{"version":3,"file":"grindery-wallet-sdk.cjs.development.js","sources":["../src/utils/uuid.ts","../src/provider/WalletProviderEventEmitter.ts","../src/provider/WalletProviderLocalStorage.ts","../src/provider/WalletProviderError.ts","../src/provider/WalletProvider.ts","../src/provider/GrinderyWalletProvider.ts","../src/sdk/GrinderyWalletSDK.ts","../src/utils/getAppId.ts","../src/index.ts"],"sourcesContent":["/**\n * @summary Generates a Version 4 (pseudorandom) UUID\n * @returns {string} The UUID\n */\nexport const uuid = (): string => {\n  let d = '';\n  while (d.length < 32) d += Math.random().toString(16).substr(2);\n  const vr = ((parseInt(d.substr(16, 1), 16) & 0x3) | 0x8).toString(16);\n  return `${d.substr(0, 8)}-${d.substr(8, 4)}-4${d.substr(\n    13,\n    3\n  )}-${vr}${d.substr(17, 3)}-${d.substr(20, 12)}`;\n};\n","import { ProviderEvent } from '../types';\n\nexport enum ProviderEvents {\n  accountsChanged = 'accountsChanged',\n  pair = 'pair',\n  connect = 'connect',\n  disconnect = 'disconnect',\n  chainChanged = 'chainChanged',\n  message = 'message',\n}\n\n/**\n * @summary A class for emitting provider events\n * @since 0.1.0\n */\nexport class WalletProviderEventEmitter {\n  /**\n   * @summary A map of events and their listeners\n   * @public\n   */\n  public events: Map<ProviderEvent, Array<Function>>;\n\n  constructor() {\n    this.events = new Map();\n  }\n\n  /**\n   * @summary Adds a listener to the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public on(event: ProviderEvent, callback: Function) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event)!.push(callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public removeListener(event: ProviderEvent, callback: Function) {\n    if (this.events.has(event)) {\n      const callbacks = this.events.get(event)!.filter((cb) => cb !== callback);\n      this.events.set(event, callbacks);\n    }\n    return this;\n  }\n\n  /**\n   * @summary Emits an event\n   * @public\n   * @param {string} event Event name\n   * @param data Event data\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  protected emit(event: ProviderEvent, ...data: any[]) {\n    if (this.events.has(event)) {\n      console.log('[Grindery.WalletSDK] > Event:', event, data[0]);\n      this.events.get(event)!.forEach((callback) => {\n        callback(...data);\n      });\n    }\n    return this;\n  }\n}\n","import { ProviderStorage, ProviderStorageKey } from '../types';\nimport { uuid } from '../utils/uuid';\nimport { WalletProviderEventEmitter } from './WalletProviderEventEmitter';\n\nconst LOCALSTORAGE_KEY = 'GrinderyWalletProvider';\n\nexport enum ProviderStorageKeys {\n  pairingToken = 'pairingToken',\n  sessionId = 'sessionId',\n  connectUrl = 'connectUrl',\n  connectUrlBrowser = 'connectUrlBrowser',\n  shortToken = 'shortToken',\n  clientId = 'clientId',\n}\n\n/**\n * @summary A local storage class for the provider\n * @since 0.1.0\n * @extends WalletProviderEventEmitter\n */\nexport class WalletProviderLocalStorage extends WalletProviderEventEmitter {\n  /**\n   * @summary Gets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @returns {string} The value of the storage by the key\n   */\n  protected getStorageValue(key: ProviderStorageKey): string {\n    const value = this.getStorage()[key] || '';\n    return value;\n  }\n\n  /**\n   * @summary Sets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @param {string} value The value to set\n   * @returns {void}\n   */\n  protected setStorageValue(key: ProviderStorageKey, value: string): string {\n    const storage = this.getStorage();\n    storage[key] = value;\n    this.saveStorage(storage);\n    return value;\n  }\n\n  /**\n   * @summary Clears the storage\n   * @protected\n   * @returns {void}\n   */\n  protected clearStorage(): void {\n    this.saveStorage({\n      clientId: this.getStorage().clientId || uuid(),\n    });\n  }\n\n  /**\n   * @summary Gets the provider storage\n   * @returns {ProviderStorage} The provider storage\n   */\n  private getStorage(): ProviderStorage {\n    try {\n      return JSON.parse(\n        localStorage.getItem(LOCALSTORAGE_KEY) || '{}'\n      ) as ProviderStorage;\n    } catch (error) {\n      localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify({}));\n      throw new Error('Error parsing storage');\n    }\n  }\n\n  /**\n   * @summary Saves the provider storage\n   * @param {ProviderStorage} storage Provider storage object\n   */\n  private saveStorage(storage: ProviderStorage): void {\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(storage));\n  }\n}\n","/**\n * @summary Error class for WalletProvider\n * @since 0.1.0\n * @extends Error\n */\nexport class WalletProviderError extends Error {\n  name: string = 'GrinderyWalletProviderError';\n  code?: number;\n  data?: unknown;\n\n  constructor(message: string, code?: number, data?: unknown) {\n    super(message);\n    this.code = code;\n    this.data = data;\n  }\n}\n\nexport const WalletProviderErrors = {\n  PairingFailed: new WalletProviderError('Pairing failed', 4900),\n  Disconnected: new WalletProviderError('Disconnected', 4900),\n  UnsupportedMethod: new WalletProviderError('Unsupported Method', 4200),\n  Unauthorized: new WalletProviderError('Unauthorized', 4900),\n  NoResult: new WalletProviderError('No result', 4900),\n  NoAppId: new WalletProviderError('App ID is required', 4900),\n};\n","import {\n  ProviderStorageKeys,\n  WalletProviderLocalStorage,\n} from './WalletProviderLocalStorage';\nimport {\n  Address,\n  ChainId,\n  GrinderyRpcApiRequestResults,\n  GrinderyRpcMethodName,\n  GrinderyRpcProviderRequestMethodName,\n  ProviderMethods,\n  ProviderRequestResult,\n  RequestArguments,\n  RequestArgumentsParams,\n  RequestToken,\n} from '../types';\nimport {\n  WalletProviderError,\n  WalletProviderErrors,\n} from './WalletProviderError';\nimport { uuid } from '../utils/uuid';\nimport { ProviderEvents } from './WalletProviderEventEmitter';\n\n/**\n * @summary The Grindery RPC API method names\n */\nexport enum GrinderyRpcMethodNames {\n  requestPairing = 'requestPairing',\n  waitForPairingResult = 'waitForPairingResult',\n  request = 'request',\n  waitForRequestResult = 'waitForRequestResult',\n  'disconnect' = 'disconnect',\n}\n\n/**\n * @summary The base wallet provider class\n * @since 0.1.0\n * @extends WalletProviderLocalStorage\n */\nexport class WalletProvider extends WalletProviderLocalStorage {\n  constructor() {\n    super();\n\n    this.injectProvider();\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return !!this.chainId;\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return (\n      this.isConnected() &&\n      !!this.getStorageValue(ProviderStorageKeys.sessionId)\n    );\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet pairing is in progress (pending).\n   */\n  public isWalletConnectionPending(): boolean {\n    return (\n      this.isConnected() &&\n      !!this.getStorageValue(ProviderStorageKeys.pairingToken) &&\n      !this.getStorageValue(ProviderStorageKeys.sessionId)\n    );\n  }\n\n  /**\n   * @summary Gets the connected chain ID in hex format\n   * @public\n   * @returns {ChainId} The chain ID in hex format\n   */\n  public getChain(): ChainId {\n    return `0x${parseFloat(this.chainId.split(':')[1]).toString(16)}`;\n  }\n\n  /**\n   * @summary Gets the connected user's wallet address\n   * @public\n   * @returns {Address} The ethereum wallet address\n   */\n  public getAddress(): Address {\n    return this.accounts[0] || '';\n  }\n\n  /**\n   * @summary Sets the application ID\n   * @public\n   * @param {string} appId The application ID\n   * @returns {string} The application ID\n   */\n  public setAppId(appId: string): string {\n    this.appId = appId;\n    return this.appId;\n  }\n\n  /**\n   * @summary Sends a request to the provider\n   * @public\n   * @param {RequestArguments} args Request arguments\n   * @param {string} args.method The method name\n   * @param {RequestArgumentsParams} args.params The method parameters\n   * @returns {T} The result of the request\n   */\n  public async request<T>({ method, params }: RequestArguments): Promise<T> {\n    /*if (!this.appId) {\n      throw WalletProviderErrors.NoAppId;\n    }*/\n    if (!this.chainId) {\n      this.emit(ProviderEvents.disconnect, WalletProviderErrors.Disconnected);\n      throw WalletProviderErrors.Disconnected;\n    }\n    if (!this.methods[method]) {\n      throw WalletProviderErrors.UnsupportedMethod;\n    }\n\n    try {\n      if (this.methods[method]?.sessionRequired && !this.isWalletConnected()) {\n        throw WalletProviderErrors.Unauthorized;\n      }\n\n      return (await this.methods[method]?.execute(params)) as T;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API and waits for the result.\n   * @public\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  public async sendAndWaitGrinderyRpcProviderRequest<T>(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[],\n    timeout?: number\n  ): Promise<T> {\n    const request = await this.sendGrinderyRpcProviderRequest(method, params);\n    return await this.waitGrinderyRpcProviderRequest(\n      request.requestToken,\n      timeout\n    );\n  }\n\n  /**\n   * @summary The application ID.\n   * @protected\n   */\n  protected appId: string = '';\n\n  /**\n   * @summary The chain ID in CAIP-2 format; e.g. \"eip155:1\".\n   * @protected\n   */\n  protected chainId: ChainId = 'eip155:137';\n\n  /**\n   * @summary Client id\n   * @protected\n   */\n  protected clientId: string =\n    this.getStorageValue('clientId') ||\n    this.setStorageValue('clientId', uuid());\n\n  /**\n   * @summary The list of supported provider methods.\n   * @protected\n   */\n  protected methods: Partial<ProviderMethods> = {};\n\n  /**\n   * @summary The user's wallet addresses list.\n   * @protected\n   */\n  protected accounts: Address[] = [];\n\n  protected setAccounts(accounts: Address[]): Address[] {\n    if (JSON.stringify(accounts) !== JSON.stringify(this.accounts)) {\n      this.emit(ProviderEvents.accountsChanged, accounts);\n    }\n    this.accounts = accounts;\n    return this.accounts;\n  }\n\n  /**\n   * @summary Registers the provider methods.\n   * @protected\n   * @param {ProviderMethods} methods A map of supported provider methods.\n   * @returns {void}\n   */\n  protected registerProviderMethods(methods: Partial<ProviderMethods>): void {\n    this.methods = methods;\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API.\n   * @protected\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @returns {ProviderRequestResult} The request token to use in the `waitGrinderyRpcProviderRequest` method\n   */\n  protected async sendGrinderyRpcProviderRequest(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[]\n  ): Promise<ProviderRequestResult> {\n    if (!this.getStorageValue(ProviderStorageKeys.sessionId)) {\n      throw WalletProviderErrors.Unauthorized;\n    }\n\n    try {\n      return await this.sendGrinderyRpcApiRequest<GrinderyRpcApiRequestResults.request>(\n        GrinderyRpcMethodNames.request,\n        {\n          sessionId: this.getStorageValue(ProviderStorageKeys.sessionId),\n          scope: this.chainId,\n          request: {\n            method,\n            params,\n          },\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Waits for the result of the provider request.\n   * @protected\n   * @param {RequestToken} requestToken A token to identify provider request. Recieved in the results of `sendGrinderyRpcProviderRequest` method.\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  protected async waitGrinderyRpcProviderRequest<T>(\n    requestToken: RequestToken,\n    timeout?: number\n  ): Promise<T> {\n    if (!this.getStorageValue(ProviderStorageKeys.sessionId)) {\n      throw WalletProviderErrors.Unauthorized;\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<T>(\n        GrinderyRpcMethodNames.waitForRequestResult,\n        {\n          requestToken,\n          timeout,\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a request to the Grindery Walletconnect RPC API.\n   * @protected\n   * @param {GrinderyRpcMethodName} method Request method name\n   * @param {RequestArgumentsParams} params Request parameters\n   * @returns {T} The result of the request\n   */\n  protected async sendGrinderyRpcApiRequest<T>(\n    method: GrinderyRpcMethodName,\n    params?: RequestArgumentsParams\n  ): Promise<T> {\n    try {\n      const response = await fetch('https://walletconnect-api.grindery.com', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method: `gws_${method}`,\n          params: params || [],\n        }),\n      });\n      const data = await response.json();\n      if (data.error) {\n        throw new WalletProviderError(data.error.message, data.error.code);\n      }\n      if (!data.result) {\n        throw WalletProviderErrors.NoResult;\n      }\n      return data.result;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Creates a provider error from an unknown error\n   * @protected\n   * @param {unknown} error Optional. Error object.\n   * @returns {WalletProviderError} The provider error\n   */\n  protected createProviderRpcError(error?: unknown): WalletProviderError {\n    let errorResponse: WalletProviderError;\n    if (error instanceof WalletProviderError) {\n      errorResponse = new WalletProviderError(\n        error.message || 'Unknown error',\n        error.code || 4900,\n        error.data\n      );\n    } else if (error instanceof Error) {\n      errorResponse = new WalletProviderError(\n        error.message || 'Unknown error',\n        4900,\n        error\n      );\n    } else {\n      errorResponse = new WalletProviderError('Unknown error', 4900, error);\n    }\n    return errorResponse;\n  }\n\n  /**\n   * @summary Injects the provider into the window object\n   * @private\n   * @returns {void}\n   */\n  private injectProvider(): void {\n    if (!window.ethereum) {\n      window.ethereum = this;\n    } else {\n      if (\n        window.ethereum.providers &&\n        Array.isArray(window.ethereum.providers)\n      ) {\n        window.ethereum.providers.push(this);\n      } else {\n        window.ethereum.providers = [window.ethereum, this];\n      }\n    }\n  }\n}\n","import {\n  GrinderyRpcApiRequestResults,\n  GrinderyRpcProviderRequestResults,\n  ProviderInterface,\n  RequestArgumentsParams,\n} from '../types';\nimport { GrinderyRpcMethodNames, WalletProvider } from './WalletProvider';\nimport { WalletProviderErrors } from './WalletProviderError';\nimport { ProviderEvents } from './WalletProviderEventEmitter';\nimport { ProviderStorageKeys } from './WalletProviderLocalStorage';\n\n/**\n * @summary The Grindery wallet provider method names\n */\nexport enum GrinderyWalletProviderMethodNames {\n  eth_requestAccounts = 'eth_requestAccounts',\n  eth_accounts = 'eth_accounts',\n  personal_sign = 'personal_sign',\n  eth_sendTransaction = 'eth_sendTransaction',\n  gws_disconnect = 'gws_disconnect',\n}\n\n/**\n * @summary The Grindery Wallet Ethereum Injected Provider Class.\n * @extends WalletProvider\n * @implements ProviderInterface\n */\nexport class GrinderyWalletProvider\n  extends WalletProvider\n  implements ProviderInterface\n{\n  /**\n   * @summary Indicates that the provider is a Grindery Wallet.\n   */\n  public readonly isGrinderyWallet: boolean = true;\n\n  constructor() {\n    super();\n\n    this.registerProviderMethods({\n      [GrinderyWalletProviderMethodNames.eth_requestAccounts]: {\n        sessionRequired: false,\n        execute: async (\n          params?: RequestArgumentsParams\n        ): Promise<GrinderyRpcProviderRequestResults.eth_requestAccounts> => {\n          if (this.isWalletConnected()) {\n            try {\n              return await this.request<GrinderyRpcProviderRequestResults.eth_accounts>(\n                {\n                  method: GrinderyWalletProviderMethodNames.eth_accounts,\n                  params: params || [],\n                }\n              );\n            } catch (error) {\n              this.setStorageValue(ProviderStorageKeys.sessionId, '');\n              // skip failed request and continue with pairing\n            }\n          }\n          if (this.isWalletConnectionPending()) {\n            try {\n              const pairResult =\n                await this.sendGrinderyRpcApiRequest<GrinderyRpcApiRequestResults.waitForPairingResult>(\n                  GrinderyRpcMethodNames.waitForPairingResult,\n                  {\n                    pairingToken: this.getStorageValue(\n                      ProviderStorageKeys.pairingToken\n                    ),\n                  }\n                );\n\n              this.clearStorage();\n              this.setStorageValue(\n                ProviderStorageKeys.sessionId,\n                pairResult.session.sessionId\n              );\n\n              if (!pairResult.session.sessionId) {\n                throw WalletProviderErrors.PairingFailed;\n              }\n\n              return await this.request<GrinderyRpcProviderRequestResults.eth_accounts>(\n                {\n                  method: GrinderyWalletProviderMethodNames.eth_accounts,\n                  params: params || [],\n                }\n              );\n            } catch (error) {\n              this.clearStorage();\n              // skip failed request and continue with pairing\n            }\n          }\n          try {\n            const result =\n              await this.sendGrinderyRpcApiRequest<GrinderyRpcApiRequestResults.requestPairing>(\n                GrinderyRpcMethodNames.requestPairing,\n                {\n                  appId: this.appId,\n                  clientId: this.clientId,\n                }\n              );\n\n            if (!result.pairingToken || !result.connectUrl) {\n              throw WalletProviderErrors.PairingFailed;\n            }\n\n            this.setStorageValue(\n              ProviderStorageKeys.pairingToken,\n              result.pairingToken\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.connectUrl,\n              result.connectUrl\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.connectUrlBrowser,\n              result.connectUrlBrowser\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.shortToken,\n              result.shortToken\n            );\n            this.emit(ProviderEvents.pair, {\n              shortToken: result.shortToken,\n              connectUrl: result.connectUrl,\n              connectUrlBrowser: result.connectUrlBrowser,\n            });\n            const pairResult =\n              await this.sendGrinderyRpcApiRequest<GrinderyRpcApiRequestResults.waitForPairingResult>(\n                GrinderyRpcMethodNames.waitForPairingResult,\n                {\n                  pairingToken: result.pairingToken,\n                }\n              );\n\n            this.setStorageValue(\n              ProviderStorageKeys.sessionId,\n              pairResult.session.sessionId\n            );\n\n            if (!pairResult.session.sessionId) {\n              throw WalletProviderErrors.PairingFailed;\n            }\n            this.setStorageValue(ProviderStorageKeys.pairingToken, '');\n            this.setStorageValue(ProviderStorageKeys.connectUrl, '');\n            this.setStorageValue(ProviderStorageKeys.connectUrlBrowser, '');\n            this.setStorageValue(ProviderStorageKeys.shortToken, '');\n\n            return await this.request({\n              method: GrinderyWalletProviderMethodNames.eth_accounts,\n              params: params || [],\n            });\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      [GrinderyWalletProviderMethodNames.eth_accounts]: {\n        sessionRequired: true,\n        execute: async (\n          params?: RequestArgumentsParams\n        ): Promise<GrinderyRpcProviderRequestResults.eth_accounts> => {\n          try {\n            return this.setAccounts(\n              await this.sendAndWaitGrinderyRpcProviderRequest(\n                GrinderyWalletProviderMethodNames.eth_accounts,\n                params ? (Array.isArray(params) ? params : [params]) : []\n              )\n            );\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      [GrinderyWalletProviderMethodNames.eth_sendTransaction]: {\n        sessionRequired: true,\n        execute: async (\n          params?: RequestArgumentsParams\n        ): Promise<GrinderyRpcProviderRequestResults.eth_sendTransaction> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest(\n            GrinderyWalletProviderMethodNames.eth_sendTransaction,\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n      [GrinderyWalletProviderMethodNames.personal_sign]: {\n        sessionRequired: true,\n        execute: async (\n          params?: Partial<RequestArgumentsParams>\n        ): Promise<GrinderyRpcProviderRequestResults.personal_sign> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest(\n            GrinderyWalletProviderMethodNames.personal_sign,\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n      [GrinderyWalletProviderMethodNames.gws_disconnect]: {\n        sessionRequired: true,\n        execute: async (): Promise<GrinderyRpcApiRequestResults.disconnect> => {\n          try {\n            const result =\n              await this.sendGrinderyRpcApiRequest<GrinderyRpcApiRequestResults.disconnect>(\n                GrinderyRpcMethodNames.disconnect,\n                {\n                  sessionToken: this.getStorageValue(\n                    ProviderStorageKeys.sessionId\n                  ),\n                }\n              );\n            this.emit(\n              ProviderEvents.disconnect,\n              WalletProviderErrors.Disconnected\n            );\n            this.clearStorage();\n            this.setAccounts([]);\n            return result;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n    });\n\n    window.addEventListener('load', () => {\n      this.emit(ProviderEvents.connect, this.getChain());\n      this.restorePairing();\n      this.restoreSession();\n    });\n  }\n\n  /**\n   * @summary Restores the pairing process if pairing token is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restorePairing(): Promise<void> {\n    const pairingToken = this.getStorageValue(ProviderStorageKeys.pairingToken);\n    const sessionId = this.getStorageValue(ProviderStorageKeys.sessionId);\n    if (pairingToken && !sessionId) {\n      try {\n        const pairResult =\n          await this.sendGrinderyRpcApiRequest<GrinderyRpcApiRequestResults.waitForPairingResult>(\n            GrinderyRpcMethodNames.waitForPairingResult,\n            {\n              pairingToken,\n            }\n          );\n\n        this.clearStorage();\n        this.setStorageValue(\n          ProviderStorageKeys.sessionId,\n          pairResult.session.sessionId\n        );\n\n        if (!pairResult.session.sessionId) {\n          throw WalletProviderErrors.PairingFailed;\n        }\n\n        const accounts = (\n          pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n        ).map((account) =>\n          account.includes(':') ? account.split(':')[2] || '' : account\n        );\n        this.setAccounts(accounts);\n      } catch (error) {\n        this.setAccounts([]);\n        this.clearStorage();\n      }\n    }\n  }\n\n  /**\n   * @summary Restores the session if session Id is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restoreSession(): Promise<void> {\n    const pairingToken = this.getStorageValue(ProviderStorageKeys.pairingToken);\n    const sessionId = this.getStorageValue(ProviderStorageKeys.sessionId);\n    if (sessionId && !pairingToken) {\n      try {\n        await this.request<string[]>({\n          method: GrinderyWalletProviderMethodNames.eth_requestAccounts,\n        });\n      } catch (error) {\n        this.setAccounts([]);\n        this.clearStorage();\n      }\n    }\n  }\n}\n","import {\n  GrinderyRpcApiRequestResults,\n  GrinderyWalletSDKConfig,\n  ProviderEvent,\n} from '../types';\nimport {\n  GrinderyWalletProviderMethodNames,\n  GrinderyWalletProvider,\n} from '../provider/GrinderyWalletProvider';\nimport { ProviderEvents } from '../provider/WalletProviderEventEmitter';\n\n/**\n * @summary The Grindery Wallet SDK class\n * @since 0.1.0\n *\n * @example\n * ```typescript\n * const grinderyWalletSDK = new GrinderyWalletSDK({ appId: 'your-app-id' });\n * ```\n */\nexport class GrinderyWalletSDK {\n  /**\n   * @summary The provider instance\n   * @public\n   */\n  public provider: GrinderyWalletProvider;\n\n  constructor({ appId }: GrinderyWalletSDKConfig) {\n    this.provider = this.getWeb3Provider();\n    this.setAppId(appId);\n    this.provider.on(ProviderEvents.pair, this.handlePairing);\n  }\n\n  /**\n   * @summary Checks if the provider is connected to the server\n   * @returns {boolean} True if the provider is connected to the server.\n   *\n   * @example\n   * ```typescript\n   * const isConnected = window.Grindery.WalletSDK.isConnected();\n   * ```\n   */\n  public isConnected(): boolean {\n    return this.provider.isConnected();\n  }\n\n  /**\n   * @summary Checks if the provider is connected to the server and the Grindery Wallet\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return this.provider.isWalletConnected();\n  }\n\n  /**\n   * @summary Initiate connection to the Grindery Wallet\n   * @public\n   * @returns {Promise<string[]>} The array of ethereum addresses\n   * @since 0.1.0\n   */\n  public async connect(): Promise<string[]> {\n    return await this.provider.request({\n      method: GrinderyWalletProviderMethodNames.eth_requestAccounts,\n    });\n  }\n\n  /**\n   * @summary Disconnects Grindery Wallet\n   * @public\n   * @returns {Promise<boolean>} True if wallet is disconnected\n   * @since 0.1.0\n   */\n  public async disconnect(): Promise<boolean> {\n    return await this.provider.request({\n      method: GrinderyWalletProviderMethodNames.gws_disconnect,\n    });\n  }\n\n  /**\n   * @summary Sets the app id\n   * @public\n   * @since 0.1.0\n   * @param {string} appId The app id\n   * @returns {void}\n   */\n  public setAppId(appId: string): void {\n    this.provider.setAppId(appId);\n  }\n\n  /**\n   * @summary Sends a transaction request to the Grindery Wallet\n   * @public\n   * @since 0.1.0\n   * @param {object} params The transaction parameters\n   * @param {string} params.to The recipient address\n   * @param {string} [params.value] The amount to send in wei\n   * @param {string} [params.data] The data to send\n   * @returns {Promise<string[]>} Array with transaction hash string\n   */\n  public async sendTransaction(params: {\n    to: string;\n    value?: string;\n    data?: string;\n  }): Promise<string[]> {\n    return await this.provider.request<string[]>({\n      method: GrinderyWalletProviderMethodNames.eth_sendTransaction,\n      params: [params],\n    });\n  }\n\n  /**\n   * @summary Sends a personal signature request to the Grindery Wallet\n   * @public\n   * @since 0.1.0\n   * @param {string} message The message to sign\n   * @returns {Promise<string>} Signature string\n   */\n  public async signMessage(message: string): Promise<string> {\n    return await this.provider.request<string>({\n      method: GrinderyWalletProviderMethodNames.personal_sign,\n      params: [message, this.provider.getAddress()],\n    });\n  }\n\n  /**\n   * @summary Adds a listener to the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public on(event: ProviderEvent, callback: Function) {\n    this.provider.on(event, callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public removeListener(event: ProviderEvent, callback: Function) {\n    this.provider.removeListener(event, callback);\n    return this;\n  }\n\n  /**\n   * @summary Gets the Grindery Wallet ethereum provider\n   * @returns {GrinderyWalletProvider} The Grindery Wallet ethereum provider\n   */\n  private getWeb3Provider(): GrinderyWalletProvider {\n    let provider = window.ethereum?.providers?.find(\n      (provider: GrinderyWalletProvider | unknown) =>\n        provider instanceof GrinderyWalletProvider && provider.isGrinderyWallet\n    );\n    if (\n      !provider &&\n      window.ethereum instanceof GrinderyWalletProvider &&\n      window.ethereum.isGrinderyWallet\n    ) {\n      provider = window.ethereum;\n    }\n    if (!provider) {\n      provider = new GrinderyWalletProvider();\n    }\n    return provider;\n  }\n\n  /**\n   * @summary Handles the pairing request, by opening the Grindery Wallet\n   * @private\n   * @param ProviderRequestPairingResult\n   * @returns {void}\n   */\n  private handlePairing({\n    shortToken,\n    connectUrlBrowser,\n  }: GrinderyRpcApiRequestResults.requestPairing): void {\n    const WebApp = window.Telegram?.WebApp;\n    const redirectUrl = `https://walletconnect.grindery.com/connect/wc?uri=${shortToken}`;\n    if (\n      WebApp &&\n      WebApp.openTelegramLink &&\n      WebApp.platform &&\n      WebApp.platform !== 'unknown'\n    ) {\n      WebApp.openTelegramLink(connectUrlBrowser);\n      if (WebApp.close) {\n        window.Telegram.WebApp.close();\n      }\n    } else {\n      window.open(redirectUrl, '_blank');\n    }\n  }\n}\n","/**\n * @summary Get the app id from the script tag or window object\n * @returns {string} The app id\n */\nexport const getAppId = (): string => {\n  let appId: string = '';\n  const elements = document.querySelectorAll('[data-app-id]');\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n    const value = element.getAttribute('data-app-id');\n    const src = element.getAttribute('src');\n    const isGrinderySrc = src && src.includes('grindery-wallet-sdk');\n    if (value && isGrinderySrc) {\n      appId = value;\n    }\n  }\n  if (window.Grindery?.appId) {\n    appId = window.Grindery.appId;\n  }\n  return appId;\n};\n","import { GrinderyWalletSDK } from './sdk/GrinderyWalletSDK';\nimport { getAppId } from './utils/getAppId';\n\ndeclare global {\n  interface Window {\n    Telegram?: any;\n    ethereum?: any;\n    Grindery?: {\n      appId?: string;\n      WalletSDK?: GrinderyWalletSDK;\n    };\n  }\n}\n\nfunction init() {\n  if (\n    !window.Grindery?.WalletSDK ||\n    !(window.Grindery.WalletSDK instanceof GrinderyWalletSDK)\n  ) {\n    window.Grindery = {\n      ...(window.Grindery || {}),\n      WalletSDK: new GrinderyWalletSDK({\n        appId: getAppId(),\n      }),\n    };\n  }\n}\n\n// Initialize the SDK\ninit();\n"],"names":["uuid","d","length","Math","random","toString","substr","vr","parseInt","ProviderEvents","WalletProviderEventEmitter","events","Map","_proto","prototype","on","event","callback","has","set","get","push","removeListener","callbacks","filter","cb","emit","_len","arguments","data","Array","_key","console","log","forEach","apply","LOCALSTORAGE_KEY","ProviderStorageKeys","WalletProviderLocalStorage","_WalletProviderEventE","_inheritsLoose","getStorageValue","key","value","getStorage","setStorageValue","storage","saveStorage","clearStorage","clientId","JSON","parse","localStorage","getItem","error","setItem","stringify","Error","WalletProviderError","_Error","message","code","_this","call","name","_wrapNativeSuper","WalletProviderErrors","PairingFailed","Disconnected","UnsupportedMethod","Unauthorized","NoResult","NoAppId","GrinderyRpcMethodNames","WalletProvider","_WalletProviderLocalS","appId","chainId","methods","accounts","injectProvider","isConnected","isWalletConnected","sessionId","isWalletConnectionPending","pairingToken","getChain","parseFloat","split","getAddress","setAppId","request","_request","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","method","params","_this$methods$method","_this$methods$method2","wrap","_callee$","_context","prev","next","disconnect","sessionRequired","execute","abrupt","sent","t0","createProviderRpcError","stop","_x","sendAndWaitGrinderyRpcProviderRequest","_sendAndWaitGrinderyRpcProviderRequest","_callee2","timeout","_callee2$","_context2","sendGrinderyRpcProviderRequest","waitGrinderyRpcProviderRequest","requestToken","_x2","_x3","_x4","setAccounts","accountsChanged","registerProviderMethods","_sendGrinderyRpcProviderRequest","_callee3","_callee3$","_context3","sendGrinderyRpcApiRequest","scope","_x5","_x6","_waitGrinderyRpcProviderRequest","_callee4","_callee4$","_context4","waitForRequestResult","_x7","_x8","_sendGrinderyRpcApiRequest","_callee5","response","_callee5$","_context5","fetch","headers","body","jsonrpc","id","json","result","_x9","_x10","errorResponse","window","ethereum","providers","isArray","GrinderyWalletProviderMethodNames","GrinderyWalletProvider","_WalletProvider","_this$registerProvide","isGrinderyWallet","eth_requestAccounts","_execute","pairResult","_pairResult","eth_accounts","waitForPairingResult","session","t1","requestPairing","connectUrl","connectUrlBrowser","shortToken","pair","t2","_execute2","eth_sendTransaction","_execute3","personal_sign","_execute4","gws_disconnect","_execute5","sessionToken","addEventListener","connect","restorePairing","restoreSession","_restorePairing","_callee6","_pairResult$session","_callee6$","_context6","namespaces","map","account","includes","_restoreSession","_callee7","_callee7$","_context7","GrinderyWalletSDK","provider","getWeb3Provider","handlePairing","_connect","_disconnect","sendTransaction","_sendTransaction","signMessage","_signMessage","_window$ethereum","find","_ref2","_window$Telegram","WebApp","Telegram","redirectUrl","openTelegramLink","platform","close","open","getAppId","_window$Grindery","elements","document","querySelectorAll","i","element","getAttribute","src","isGrinderySrc","Grindery","init","WalletSDK","_extends"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAGG;AACI,IAAMA,IAAI,GAAG,SAAPA,IAAIA,GAAgB;EAC/B,IAAIC,CAAC,GAAG,EAAE,CAAA;EACV,OAAOA,CAAC,CAACC,MAAM,GAAG,EAAE,EAAED,CAAC,IAAIE,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC,CAAA;EAC/D,IAAMC,EAAE,GAAG,CAAEC,QAAQ,CAACP,CAAC,CAACK,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,GAAI,GAAG,EAAED,QAAQ,CAAC,EAAE,CAAC,CAAA;EACrE,OAAUJ,CAAC,CAACK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAIL,GAAAA,GAAAA,CAAC,CAACK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAKL,IAAAA,GAAAA,CAAC,CAACK,MAAM,CACrD,EAAE,EACF,CAAC,CACF,GAAIC,GAAAA,GAAAA,EAAE,GAAGN,CAAC,CAACK,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,SAAIL,CAAC,CAACK,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;AAC/C,CAAC;;ACVD,IAAYG,cAOX,CAAA;AAPD,CAAA,UAAYA,cAAc,EAAA;AACxBA,EAAAA,cAAA,CAAA,iBAAA,CAAA,GAAA,iBAAmC,CAAA;AACnCA,EAAAA,cAAA,CAAA,MAAA,CAAA,GAAA,MAAa,CAAA;AACbA,EAAAA,cAAA,CAAA,SAAA,CAAA,GAAA,SAAmB,CAAA;AACnBA,EAAAA,cAAA,CAAA,YAAA,CAAA,GAAA,YAAyB,CAAA;AACzBA,EAAAA,cAAA,CAAA,cAAA,CAAA,GAAA,cAA6B,CAAA;AAC7BA,EAAAA,cAAA,CAAA,SAAA,CAAA,GAAA,SAAmB,CAAA;AACrB,CAAC,EAPWA,cAAc,KAAdA,cAAc,GAOzB,EAAA,CAAA,CAAA,CAAA;AAED;;;AAGG;AACH,IAAaC,0BAA0B,gBAAA,YAAA;AAOrC,EAAA,SAAAA,6BAAA;AANA;;;AAGG;AAHH,IAAA,IAAA,CAIOC,MAAM,GAAA,KAAA,CAAA,CAAA;AAGX,IAAA,IAAI,CAACA,MAAM,GAAG,IAAIC,GAAG,EAAE,CAAA;AACzB,GAAA;AAEA;;;;;;AAMG;AANH,EAAA,IAAAC,MAAA,GAAAH,0BAAA,CAAAI,SAAA,CAAA;EAAAD,MAAA,CAOOE,EAAE,GAAF,SAAAA,GAAGC,KAAoB,EAAEC,QAAkB,EAAA;IAChD,IAAI,CAAC,IAAI,CAACN,MAAM,CAACO,GAAG,CAACF,KAAK,CAAC,EAAE;MAC3B,IAAI,CAACL,MAAM,CAACQ,GAAG,CAACH,KAAK,EAAE,EAAE,CAAC,CAAA;AAC5B,KAAA;IACA,IAAI,CAACL,MAAM,CAACS,GAAG,CAACJ,KAAK,CAAE,CAACK,IAAI,CAACJ,QAAQ,CAAC,CAAA;AACtC,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;AAEA;;;;;;AAMG,MANH;EAAAJ,MAAA,CAOOS,cAAc,GAAd,SAAAA,eAAeN,KAAoB,EAAEC,QAAkB,EAAA;IAC5D,IAAI,IAAI,CAACN,MAAM,CAACO,GAAG,CAACF,KAAK,CAAC,EAAE;AAC1B,MAAA,IAAMO,SAAS,GAAG,IAAI,CAACZ,MAAM,CAACS,GAAG,CAACJ,KAAK,CAAE,CAACQ,MAAM,CAAC,UAACC,EAAE,EAAA;QAAA,OAAKA,EAAE,KAAKR,QAAQ,CAAA;OAAC,CAAA,CAAA;MACzE,IAAI,CAACN,MAAM,CAACQ,GAAG,CAACH,KAAK,EAAEO,SAAS,CAAC,CAAA;AACnC,KAAA;AACA,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;AAEA;;;;;;AAMG,MANH;AAAAV,EAAAA,MAAA,CAOUa,IAAI,GAAJ,SAAAA,IAAAA,CAAKV,KAAoB,EAAgB;IAAA,KAAAW,IAAAA,IAAA,GAAAC,SAAA,CAAA1B,MAAA,EAAX2B,IAAW,OAAAC,KAAA,CAAAH,IAAA,GAAAA,CAAAA,GAAAA,IAAA,WAAAI,IAAA,GAAA,CAAA,EAAAA,IAAA,GAAAJ,IAAA,EAAAI,IAAA,EAAA,EAAA;AAAXF,MAAAA,IAAW,CAAAE,IAAA,GAAAH,CAAAA,CAAAA,GAAAA,SAAA,CAAAG,IAAA,CAAA,CAAA;AAAA,KAAA;IACjD,IAAI,IAAI,CAACpB,MAAM,CAACO,GAAG,CAACF,KAAK,CAAC,EAAE;MAC1BgB,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEjB,KAAK,EAAEa,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;AAC5D,MAAA,IAAI,CAAClB,MAAM,CAACS,GAAG,CAACJ,KAAK,CAAE,CAACkB,OAAO,CAAC,UAACjB,QAAQ,EAAI;AAC3CA,QAAAA,QAAQ,CAAAkB,KAAA,CAAIN,KAAAA,CAAAA,EAAAA,IAAI,CAAC,CAAA;AACnB,OAAC,CAAC,CAAA;AACJ,KAAA;AACA,IAAA,OAAO,IAAI,CAAA;GACZ,CAAA;AAAA,EAAA,OAAAnB,0BAAA,CAAA;AAAA,CAAA,EAAA;;ACnEH,IAAM0B,gBAAgB,GAAG,wBAAwB,CAAA;AAEjD,IAAYC,mBAOX,CAAA;AAPD,CAAA,UAAYA,mBAAmB,EAAA;AAC7BA,EAAAA,mBAAA,CAAA,cAAA,CAAA,GAAA,cAA6B,CAAA;AAC7BA,EAAAA,mBAAA,CAAA,WAAA,CAAA,GAAA,WAAuB,CAAA;AACvBA,EAAAA,mBAAA,CAAA,YAAA,CAAA,GAAA,YAAyB,CAAA;AACzBA,EAAAA,mBAAA,CAAA,mBAAA,CAAA,GAAA,mBAAuC,CAAA;AACvCA,EAAAA,mBAAA,CAAA,YAAA,CAAA,GAAA,YAAyB,CAAA;AACzBA,EAAAA,mBAAA,CAAA,UAAA,CAAA,GAAA,UAAqB,CAAA;AACvB,CAAC,EAPWA,mBAAmB,KAAnBA,mBAAmB,GAO9B,EAAA,CAAA,CAAA,CAAA;AAED;;;;AAIG;AACUC,IAAAA,0BAA2B,0BAAAC,qBAAA,EAAA;AAAA,EAAA,SAAAD,0BAAA,GAAA;AAAA,IAAA,OAAAC,qBAAA,CAAAJ,KAAA,CAAA,IAAA,EAAAP,SAAA,CAAA,IAAA,IAAA,CAAA;AAAA,GAAA;EAAAY,cAAA,CAAAF,0BAAA,EAAAC,qBAAA,CAAA,CAAA;AAAA,EAAA,IAAA1B,MAAA,GAAAyB,0BAAA,CAAAxB,SAAA,CAAA;AACtC;;;;;AAKG;AALHD,EAAAA,MAAA,CAMU4B,eAAe,GAAf,SAAAA,eAAAA,CAAgBC,GAAuB,EAAA;IAC/C,IAAMC,KAAK,GAAG,IAAI,CAACC,UAAU,EAAE,CAACF,GAAG,CAAC,IAAI,EAAE,CAAA;AAC1C,IAAA,OAAOC,KAAK,CAAA;AACd,GAAA;AAEA;;;;;;AAMG,MANH;EAAA9B,MAAA,CAOUgC,eAAe,GAAf,SAAAA,gBAAgBH,GAAuB,EAAEC,KAAa,EAAA;AAC9D,IAAA,IAAMG,OAAO,GAAG,IAAI,CAACF,UAAU,EAAE,CAAA;AACjCE,IAAAA,OAAO,CAACJ,GAAG,CAAC,GAAGC,KAAK,CAAA;AACpB,IAAA,IAAI,CAACI,WAAW,CAACD,OAAO,CAAC,CAAA;AACzB,IAAA,OAAOH,KAAK,CAAA;AACd,GAAA;AAEA;;;;AAIG,MAJH;AAAA9B,EAAAA,MAAA,CAKUmC,YAAY,GAAZ,SAAAA,eAAY;IACpB,IAAI,CAACD,WAAW,CAAC;MACfE,QAAQ,EAAE,IAAI,CAACL,UAAU,EAAE,CAACK,QAAQ,IAAIjD,IAAI,EAAE;AAC/C,KAAA,CAAC,CAAA;AACJ,GAAA;AAEA;;;AAGG,MAHH;AAAAa,EAAAA,MAAA,CAIQ+B,UAAU,GAAV,SAAAA,aAAU;IAChB,IAAI;AACF,MAAA,OAAOM,IAAI,CAACC,KAAK,CACfC,YAAY,CAACC,OAAO,CAACjB,gBAAgB,CAAC,IAAI,IAAI,CAC5B,CAAA;KACrB,CAAC,OAAOkB,KAAK,EAAE;AACdF,MAAAA,YAAY,CAACG,OAAO,CAACnB,gBAAgB,EAAEc,IAAI,CAACM,SAAS,CAAC,EAAE,CAAC,CAAC,CAAA;AAC1D,MAAA,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC,CAAA;AAC1C,KAAA;AACF,GAAA;AAEA;;;AAGG,MAHH;AAAA5C,EAAAA,MAAA,CAIQkC,WAAW,GAAX,SAAAA,WAAAA,CAAYD,OAAwB,EAAA;IAC1CM,YAAY,CAACG,OAAO,CAACnB,gBAAgB,EAAEc,IAAI,CAACM,SAAS,CAACV,OAAO,CAAC,CAAC,CAAA;GAChE,CAAA;AAAA,EAAA,OAAAR,0BAAA,CAAA;AAAA,CAAA,CA1D6C5B,0BAA0B,CAAA;;ACpB1E;;;;AAIG;AACUgD,IAAAA,mBAAoB,0BAAAC,MAAA,EAAA;AAK/B,EAAA,SAAAD,oBAAYE,OAAe,EAAEC,IAAa,EAAEhC,IAAc,EAAA;AAAA,IAAA,IAAAiC,KAAA,CAAA;AACxDA,IAAAA,KAAA,GAAAH,MAAA,CAAAI,IAAA,CAAA,IAAA,EAAMH,OAAO,CAAC,IAAA,IAAA,CAAA;IAACE,KAAA,CALjBE,IAAI,GAAW,6BAA6B,CAAA;AAAAF,IAAAA,KAAA,CAC5CD,IAAI,GAAA,KAAA,CAAA,CAAA;AAAAC,IAAAA,KAAA,CACJjC,IAAI,GAAA,KAAA,CAAA,CAAA;IAIFiC,KAAA,CAAKD,IAAI,GAAGA,IAAI,CAAA;IAChBC,KAAA,CAAKjC,IAAI,GAAGA,IAAI,CAAA;AAAC,IAAA,OAAAiC,KAAA,CAAA;AACnB,GAAA;EAACtB,cAAA,CAAAkB,mBAAA,EAAAC,MAAA,CAAA,CAAA;AAAA,EAAA,OAAAD,mBAAA,CAAA;AAAA,CAAAO,eAAAA,gBAAA,CATsCR,KAAK,CAAA,CAAA,CAAA;AAYvC,IAAMS,oBAAoB,GAAG;AAClCC,EAAAA,aAAa,eAAE,IAAIT,mBAAmB,CAAC,gBAAgB,EAAE,IAAI,CAAC;AAC9DU,EAAAA,YAAY,eAAE,IAAIV,mBAAmB,CAAC,cAAc,EAAE,IAAI,CAAC;AAC3DW,EAAAA,iBAAiB,eAAE,IAAIX,mBAAmB,CAAC,oBAAoB,EAAE,IAAI,CAAC;AACtEY,EAAAA,YAAY,eAAE,IAAIZ,mBAAmB,CAAC,cAAc,EAAE,IAAI,CAAC;AAC3Da,EAAAA,QAAQ,eAAE,IAAIb,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC;AACpDc,EAAAA,OAAO,eAAE,IAAId,mBAAmB,CAAC,oBAAoB,EAAE,IAAI,CAAA;CAC5D;;ACDD;;AAEG;AACH,IAAYe,sBAMX,CAAA;AAND,CAAA,UAAYA,sBAAsB,EAAA;AAChCA,EAAAA,sBAAA,CAAA,gBAAA,CAAA,GAAA,gBAAiC,CAAA;AACjCA,EAAAA,sBAAA,CAAA,sBAAA,CAAA,GAAA,sBAA6C,CAAA;AAC7CA,EAAAA,sBAAA,CAAA,SAAA,CAAA,GAAA,SAAmB,CAAA;AACnBA,EAAAA,sBAAA,CAAA,sBAAA,CAAA,GAAA,sBAA6C,CAAA;AAC7CA,EAAAA,sBAAA,CAAA,YAAA,CAAA,GAAA,YAA2B,CAAA;AAC7B,CAAC,EANWA,sBAAsB,KAAtBA,sBAAsB,GAMjC,EAAA,CAAA,CAAA,CAAA;AAED;;;;AAIG;AACUC,IAAAA,cAAe,0BAAAC,qBAAA,EAAA;AAC1B,EAAA,SAAAD,iBAAA;AAAA,IAAA,IAAAZ,KAAA,CAAA;AACEA,IAAAA,KAAA,GAAAa,qBAAA,CAAAZ,IAAA,MAAO,IAAA,IAAA,CAAA;AAoHT;;;AAGG;IAHHD,KAAA,CAIUc,KAAK,GAAW,EAAE,CAAA;AAE5B;;;AAGG;IAHHd,KAAA,CAIUe,OAAO,GAAY,YAAY,CAAA;AAEzC;;;AAGG;AAHHf,IAAAA,KAAA,CAIUb,QAAQ,GAChBa,KAAA,CAAKrB,eAAe,CAAC,UAAU,CAAC,IAChCqB,KAAA,CAAKjB,eAAe,CAAC,UAAU,EAAE7C,IAAI,EAAE,CAAC,CAAA;AAE1C;;;AAGG;AAHH8D,IAAAA,KAAA,CAIUgB,OAAO,GAA6B,EAAE,CAAA;AAEhD;;;AAGG;IAHHhB,KAAA,CAIUiB,QAAQ,GAAc,EAAE,CAAA;IAhJhCjB,KAAA,CAAKkB,cAAc,EAAE,CAAA;AAAC,IAAA,OAAAlB,KAAA,CAAA;AACxB,GAAA;AAEA;;;AAGG;EAHHtB,cAAA,CAAAkC,cAAA,EAAAC,qBAAA,CAAA,CAAA;AAAA,EAAA,IAAA9D,MAAA,GAAA6D,cAAA,CAAA5D,SAAA,CAAA;AAAAD,EAAAA,MAAA,CAIOoE,WAAW,GAAX,SAAAA,cAAW;AAChB,IAAA,OAAO,CAAC,CAAC,IAAI,CAACJ,OAAO,CAAA;AACvB,GAAA;AAEA;;;AAGG,MAHH;AAAAhE,EAAAA,MAAA,CAIOqE,iBAAiB,GAAjB,SAAAA,oBAAiB;AACtB,IAAA,OACE,IAAI,CAACD,WAAW,EAAE,IAClB,CAAC,CAAC,IAAI,CAACxC,eAAe,CAACJ,mBAAmB,CAAC8C,SAAS,CAAC,CAAA;AAEzD,GAAA;AAEA;;;AAGG,MAHH;AAAAtE,EAAAA,MAAA,CAIOuE,yBAAyB,GAAzB,SAAAA,4BAAyB;IAC9B,OACE,IAAI,CAACH,WAAW,EAAE,IAClB,CAAC,CAAC,IAAI,CAACxC,eAAe,CAACJ,mBAAmB,CAACgD,YAAY,CAAC,IACxD,CAAC,IAAI,CAAC5C,eAAe,CAACJ,mBAAmB,CAAC8C,SAAS,CAAC,CAAA;AAExD,GAAA;AAEA;;;;AAIG,MAJH;AAAAtE,EAAAA,MAAA,CAKOyE,QAAQ,GAAR,SAAAA,WAAQ;AACb,IAAA,OAAA,IAAA,GAAYC,UAAU,CAAC,IAAI,CAACV,OAAO,CAACW,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAACnF,QAAQ,CAAC,EAAE,CAAC,CAAA;AACjE,GAAA;AAEA;;;;AAIG,MAJH;AAAAQ,EAAAA,MAAA,CAKO4E,UAAU,GAAV,SAAAA,aAAU;AACf,IAAA,OAAO,IAAI,CAACV,QAAQ,CAAC,CAAC,CAAC,IAAI,EAAE,CAAA;AAC/B,GAAA;AAEA;;;;;AAKG,MALH;AAAAlE,EAAAA,MAAA,CAMO6E,QAAQ,GAAR,SAAAA,QAAAA,CAASd,KAAa,EAAA;IAC3B,IAAI,CAACA,KAAK,GAAGA,KAAK,CAAA;IAClB,OAAO,IAAI,CAACA,KAAK,CAAA;AACnB,GAAA;AAEA;;;;;;;AAOG,MAPH;AAAA/D,EAAAA,MAAA,CAQa8E,OAAO;AAAA;AAAA,EAAA,YAAA;IAAA,IAAAC,QAAA,gBAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAb,SAAAC,OAAAA,CAAAC,IAAA,EAAA;AAAA,MAAA,IAAAC,MAAA,EAAAC,MAAA,EAAAC,oBAAA,EAAAC,qBAAA,CAAA;AAAA,MAAA,OAAAP,mBAAA,EAAA,CAAAQ,IAAA,CAAA,SAAAC,SAAAC,QAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA,QAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;AAAA,UAAA,KAAA,CAAA;YAAmBR,MAAM,GAAAD,IAAA,CAANC,MAAM,EAAEC,MAAM,GAAAF,IAAA,CAANE,MAAM,CAAA;YAAA,IAIjC,IAAI,CAACtB,OAAO,EAAA;AAAA2B,cAAAA,QAAA,CAAAE,IAAA,GAAA,CAAA,CAAA;AAAA,cAAA,MAAA;AAAA,aAAA;YACf,IAAI,CAAChF,IAAI,CAACjB,cAAc,CAACkG,UAAU,EAAEzC,oBAAoB,CAACE,YAAY,CAAC,CAAA;YAAC,MAClEF,oBAAoB,CAACE,YAAY,CAAA;AAAA,UAAA,KAAA,CAAA;AAAA,YAAA,IAEpC,IAAI,CAACU,OAAO,CAACoB,MAAM,CAAC,EAAA;AAAAM,cAAAA,QAAA,CAAAE,IAAA,GAAA,CAAA,CAAA;AAAA,cAAA,MAAA;AAAA,aAAA;YAAA,MACjBxC,oBAAoB,CAACG,iBAAiB,CAAA;AAAA,UAAA,KAAA,CAAA;AAAAmC,YAAAA,QAAA,CAAAC,IAAA,GAAA,CAAA,CAAA;AAAA,YAAA,IAAA,EAIxC,CAAAL,oBAAA,GAAA,IAAI,CAACtB,OAAO,CAACoB,MAAM,CAAC,KAAA,IAAA,IAApBE,oBAAA,CAAsBQ,eAAe,IAAI,CAAC,IAAI,CAAC1B,iBAAiB,EAAE,CAAA,EAAA;AAAAsB,cAAAA,QAAA,CAAAE,IAAA,GAAA,CAAA,CAAA;AAAA,cAAA,MAAA;AAAA,aAAA;YAAA,MAC9DxC,oBAAoB,CAACI,YAAY,CAAA;AAAA,UAAA,KAAA,CAAA;AAAAkC,YAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;AAAA,YAAA,OAAA,CAAAL,qBAAA,GAG3B,IAAI,CAACvB,OAAO,CAACoB,MAAM,CAAC,KAAA,IAAA,GAAA,KAAA,CAAA,GAApBG,qBAAA,CAAsBQ,OAAO,CAACV,MAAM,CAAC,CAAA;AAAA,UAAA,KAAA,EAAA;AAAA,YAAA,OAAAK,QAAA,CAAAM,MAAA,CAAAN,QAAAA,EAAAA,QAAA,CAAAO,IAAA,CAAA,CAAA;AAAA,UAAA,KAAA,EAAA;AAAAP,YAAAA,QAAA,CAAAC,IAAA,GAAA,EAAA,CAAA;YAAAD,QAAA,CAAAQ,EAAA,GAAAR,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,YAAA,MAE7C,IAAI,CAACS,sBAAsB,CAAAT,QAAA,CAAAQ,EAAM,CAAC,CAAA;AAAA,UAAA,KAAA,EAAA,CAAA;AAAA,UAAA,KAAA,KAAA;YAAA,OAAAR,QAAA,CAAAU,IAAA,EAAA,CAAA;AAAA,SAAA;AAAA,OAAA,EAAAlB,OAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA,CAAA;KAE3C,CAAA,CAAA,CAAA;AAAA,IAAA,SAAAL,QAAAwB,EAAA,EAAA;AAAA,MAAA,OAAAvB,QAAA,CAAAzD,KAAA,CAAA,IAAA,EAAAP,SAAA,CAAA,CAAA;AAAA,KAAA;AAAA,IAAA,OAAA+D,OAAA,CAAA;AAAA,GAAA,EAAA;AAED;;;;;;;AAOG;AAPH,GAAA;AAAA9E,EAAAA,MAAA,CAQauG,qCAAqC;AAAA;AAAA,EAAA,YAAA;AAAA,IAAA,IAAAC,sCAAA,gBAAAxB,iBAAA,eAAAC,mBAAA,EAAAC,CAAAA,IAAA,CAA3C,SAAAuB,QACLpB,CAAAA,MAA4C,EAC5CC,MAA2B,EAC3BoB,OAAgB,EAAA;AAAA,MAAA,IAAA5B,OAAA,CAAA;AAAA,MAAA,OAAAG,mBAAA,EAAA,CAAAQ,IAAA,CAAA,SAAAkB,UAAAC,SAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAAhB,IAAA,GAAAgB,SAAA,CAAAf,IAAA;AAAA,UAAA,KAAA,CAAA;AAAAe,YAAAA,SAAA,CAAAf,IAAA,GAAA,CAAA,CAAA;AAAA,YAAA,OAEM,IAAI,CAACgB,8BAA8B,CAACxB,MAAM,EAAEC,MAAM,CAAC,CAAA;AAAA,UAAA,KAAA,CAAA;YAAnER,OAAO,GAAA8B,SAAA,CAAAV,IAAA,CAAA;AAAAU,YAAAA,SAAA,CAAAf,IAAA,GAAA,CAAA,CAAA;YAAA,OACA,IAAI,CAACiB,8BAA8B,CAC9ChC,OAAO,CAACiC,YAAY,EACpBL,OAAO,CACR,CAAA;AAAA,UAAA,KAAA,CAAA;AAAA,YAAA,OAAAE,SAAA,CAAAX,MAAA,CAAAW,QAAAA,EAAAA,SAAA,CAAAV,IAAA,CAAA,CAAA;AAAA,UAAA,KAAA,CAAA,CAAA;AAAA,UAAA,KAAA,KAAA;YAAA,OAAAU,SAAA,CAAAP,IAAA,EAAA,CAAA;AAAA,SAAA;AAAA,OAAA,EAAAI,QAAA,EAAA,IAAA,CAAA,CAAA;KACF,CAAA,CAAA,CAAA;AAAA,IAAA,SAAAF,qCAAAS,CAAAA,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAA;AAAA,MAAA,OAAAV,sCAAA,CAAAlF,KAAA,CAAA,IAAA,EAAAP,SAAA,CAAA,CAAA;AAAA,KAAA;AAAA,IAAA,OAAAwF,qCAAA,CAAA;AAAA,GAAA,EAAA,CAAA;AAAAvG,EAAAA,MAAA,CAkCSmH,WAAW,GAAX,SAAAA,WAAAA,CAAYjD,QAAmB,EAAA;AACvC,IAAA,IAAI7B,IAAI,CAACM,SAAS,CAACuB,QAAQ,CAAC,KAAK7B,IAAI,CAACM,SAAS,CAAC,IAAI,CAACuB,QAAQ,CAAC,EAAE;MAC9D,IAAI,CAACrD,IAAI,CAACjB,cAAc,CAACwH,eAAe,EAAElD,QAAQ,CAAC,CAAA;AACrD,KAAA;IACA,IAAI,CAACA,QAAQ,GAAGA,QAAQ,CAAA;IACxB,OAAO,IAAI,CAACA,QAAQ,CAAA;AACtB,GAAA;AAEA;;;;;AAKG,MALH;AAAAlE,EAAAA,MAAA,CAMUqH,uBAAuB,GAAvB,SAAAA,uBAAAA,CAAwBpD,OAAiC,EAAA;IACjE,IAAI,CAACA,OAAO,GAAGA,OAAO,CAAA;AACxB,GAAA;AAEA;;;;;;AAMG,MANH;AAAAjE,EAAAA,MAAA,CAOgB6G,8BAA8B;AAAA;AAAA,EAAA,YAAA;AAAA,IAAA,IAAAS,+BAAA,gBAAAtC,iBAAA,eAAAC,mBAAA,EAAA,CAAAC,IAAA,CAApC,SAAAqC,QAAAA,CACRlC,MAA4C,EAC5CC,MAA2B,EAAA;AAAA,MAAA,OAAAL,mBAAA,EAAA,CAAAQ,IAAA,CAAA,SAAA+B,UAAAC,SAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAA7B,IAAA,GAAA6B,SAAA,CAAA5B,IAAA;AAAA,UAAA,KAAA,CAAA;AAAA,YAAA,IAEtB,IAAI,CAACjE,eAAe,CAACJ,mBAAmB,CAAC8C,SAAS,CAAC,EAAA;AAAAmD,cAAAA,SAAA,CAAA5B,IAAA,GAAA,CAAA,CAAA;AAAA,cAAA,MAAA;AAAA,aAAA;YAAA,MAChDxC,oBAAoB,CAACI,YAAY,CAAA;AAAA,UAAA,KAAA,CAAA;AAAAgE,YAAAA,SAAA,CAAA7B,IAAA,GAAA,CAAA,CAAA;AAAA6B,YAAAA,SAAA,CAAA5B,IAAA,GAAA,CAAA,CAAA;AAAA,YAAA,OAI1B,IAAI,CAAC6B,yBAAyB,CACzC9D,sBAAsB,CAACkB,OAAO,EAC9B;cACER,SAAS,EAAE,IAAI,CAAC1C,eAAe,CAACJ,mBAAmB,CAAC8C,SAAS,CAAC;cAC9DqD,KAAK,EAAE,IAAI,CAAC3D,OAAO;AACnBc,cAAAA,OAAO,EAAE;AACPO,gBAAAA,MAAM,EAANA,MAAM;AACNC,gBAAAA,MAAM,EAANA,MAAAA;AACD,eAAA;AACF,aAAA,CACF,CAAA;AAAA,UAAA,KAAA,CAAA;AAAA,YAAA,OAAAmC,SAAA,CAAAxB,MAAA,CAAAwB,QAAAA,EAAAA,SAAA,CAAAvB,IAAA,CAAA,CAAA;AAAA,UAAA,KAAA,CAAA;AAAAuB,YAAAA,SAAA,CAAA7B,IAAA,GAAA,CAAA,CAAA;YAAA6B,SAAA,CAAAtB,EAAA,GAAAsB,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,YAAA,MAEK,IAAI,CAACrB,sBAAsB,CAAAqB,SAAA,CAAAtB,EAAM,CAAC,CAAA;AAAA,UAAA,KAAA,EAAA,CAAA;AAAA,UAAA,KAAA,KAAA;YAAA,OAAAsB,SAAA,CAAApB,IAAA,EAAA,CAAA;AAAA,SAAA;AAAA,OAAA,EAAAkB,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;KAE3C,CAAA,CAAA,CAAA;IAAA,SAAAV,8BAAAA,CAAAe,GAAA,EAAAC,GAAA,EAAA;AAAA,MAAA,OAAAP,+BAAA,CAAAhG,KAAA,CAAA,IAAA,EAAAP,SAAA,CAAA,CAAA;AAAA,KAAA;AAAA,IAAA,OAAA8F,8BAAA,CAAA;AAAA,GAAA,EAAA;AAED;;;;;;AAMG;AANH,GAAA;AAAA7G,EAAAA,MAAA,CAOgB8G,8BAA8B;AAAA;AAAA,EAAA,YAAA;AAAA,IAAA,IAAAgB,+BAAA,gBAAA9C,iBAAA,eAAAC,mBAAA,EAAA,CAAAC,IAAA,CAApC,SAAA6C,QAAAA,CACRhB,YAA0B,EAC1BL,OAAgB,EAAA;AAAA,MAAA,OAAAzB,mBAAA,EAAA,CAAAQ,IAAA,CAAA,SAAAuC,UAAAC,SAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAArC,IAAA,GAAAqC,SAAA,CAAApC,IAAA;AAAA,UAAA,KAAA,CAAA;AAAA,YAAA,IAEX,IAAI,CAACjE,eAAe,CAACJ,mBAAmB,CAAC8C,SAAS,CAAC,EAAA;AAAA2D,cAAAA,SAAA,CAAApC,IAAA,GAAA,CAAA,CAAA;AAAA,cAAA,MAAA;AAAA,aAAA;YAAA,MAChDxC,oBAAoB,CAACI,YAAY,CAAA;AAAA,UAAA,KAAA,CAAA;AAAAwE,YAAAA,SAAA,CAAArC,IAAA,GAAA,CAAA,CAAA;AAAAqC,YAAAA,SAAA,CAAApC,IAAA,GAAA,CAAA,CAAA;AAAA,YAAA,OAG1B,IAAI,CAAC6B,yBAAyB,CACzC9D,sBAAsB,CAACsE,oBAAoB,EAC3C;AACEnB,cAAAA,YAAY,EAAZA,YAAY;AACZL,cAAAA,OAAO,EAAPA,OAAAA;AACD,aAAA,CACF,CAAA;AAAA,UAAA,KAAA,CAAA;AAAA,YAAA,OAAAuB,SAAA,CAAAhC,MAAA,CAAAgC,QAAAA,EAAAA,SAAA,CAAA/B,IAAA,CAAA,CAAA;AAAA,UAAA,KAAA,CAAA;AAAA+B,YAAAA,SAAA,CAAArC,IAAA,GAAA,CAAA,CAAA;YAAAqC,SAAA,CAAA9B,EAAA,GAAA8B,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,YAAA,MAEK,IAAI,CAAC7B,sBAAsB,CAAA6B,SAAA,CAAA9B,EAAM,CAAC,CAAA;AAAA,UAAA,KAAA,EAAA,CAAA;AAAA,UAAA,KAAA,KAAA;YAAA,OAAA8B,SAAA,CAAA5B,IAAA,EAAA,CAAA;AAAA,SAAA;AAAA,OAAA,EAAA0B,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;KAE3C,CAAA,CAAA,CAAA;IAAA,SAAAjB,8BAAAA,CAAAqB,GAAA,EAAAC,GAAA,EAAA;AAAA,MAAA,OAAAN,+BAAA,CAAAxG,KAAA,CAAA,IAAA,EAAAP,SAAA,CAAA,CAAA;AAAA,KAAA;AAAA,IAAA,OAAA+F,8BAAA,CAAA;AAAA,GAAA,EAAA;AAED;;;;;;AAMG;AANH,GAAA;AAAA9G,EAAAA,MAAA,CAOgB0H,yBAAyB;AAAA;AAAA,EAAA,YAAA;AAAA,IAAA,IAAAW,0BAAA,gBAAArD,iBAAA,eAAAC,mBAAA,EAAA,CAAAC,IAAA,CAA/B,SAAAoD,QAAAA,CACRjD,MAA6B,EAC7BC,MAA+B,EAAA;MAAA,IAAAiD,QAAA,EAAAvH,IAAA,CAAA;AAAA,MAAA,OAAAiE,mBAAA,EAAA,CAAAQ,IAAA,CAAA,SAAA+C,UAAAC,SAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAA7C,IAAA,GAAA6C,SAAA,CAAA5C,IAAA;AAAA,UAAA,KAAA,CAAA;AAAA4C,YAAAA,SAAA,CAAA7C,IAAA,GAAA,CAAA,CAAA;AAAA6C,YAAAA,SAAA,CAAA5C,IAAA,GAAA,CAAA,CAAA;YAAA,OAGN6C,KAAK,CAAC,wCAAwC,EAAE;AACrErD,cAAAA,MAAM,EAAE,MAAM;AACdsD,cAAAA,OAAO,EAAE;AACP,gBAAA,cAAc,EAAE,kBAAA;eACjB;AACDC,cAAAA,IAAI,EAAEvG,IAAI,CAACM,SAAS,CAAC;AACnBkG,gBAAAA,OAAO,EAAE,KAAK;AACdC,gBAAAA,EAAE,EAAE,CAAC;AACLzD,gBAAAA,MAAM,WAASA,MAAQ;gBACvBC,MAAM,EAAEA,MAAM,IAAI,EAAA;eACnB,CAAA;AACF,aAAA,CAAC,CAAA;AAAA,UAAA,KAAA,CAAA;YAXIiD,QAAQ,GAAAE,SAAA,CAAAvC,IAAA,CAAA;AAAAuC,YAAAA,SAAA,CAAA5C,IAAA,GAAA,CAAA,CAAA;AAAA,YAAA,OAYK0C,QAAQ,CAACQ,IAAI,EAAE,CAAA;AAAA,UAAA,KAAA,CAAA;YAA5B/H,IAAI,GAAAyH,SAAA,CAAAvC,IAAA,CAAA;YAAA,IACNlF,CAAAA,IAAI,CAACyB,KAAK,EAAA;AAAAgG,cAAAA,SAAA,CAAA5C,IAAA,GAAA,CAAA,CAAA;AAAA,cAAA,MAAA;AAAA,aAAA;AAAA,YAAA,MACN,IAAIhD,mBAAmB,CAAC7B,IAAI,CAACyB,KAAK,CAACM,OAAO,EAAE/B,IAAI,CAACyB,KAAK,CAACO,IAAI,CAAC,CAAA;AAAA,UAAA,KAAA,CAAA;YAAA,IAE/DhC,IAAI,CAACgI,MAAM,EAAA;AAAAP,cAAAA,SAAA,CAAA5C,IAAA,GAAA,EAAA,CAAA;AAAA,cAAA,MAAA;AAAA,aAAA;YAAA,MACRxC,oBAAoB,CAACK,QAAQ,CAAA;AAAA,UAAA,KAAA,EAAA;AAAA,YAAA,OAAA+E,SAAA,CAAAxC,MAAA,CAE9BjF,QAAAA,EAAAA,IAAI,CAACgI,MAAM,CAAA,CAAA;AAAA,UAAA,KAAA,EAAA;AAAAP,YAAAA,SAAA,CAAA7C,IAAA,GAAA,EAAA,CAAA;YAAA6C,SAAA,CAAAtC,EAAA,GAAAsC,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,YAAA,MAEZ,IAAI,CAACrC,sBAAsB,CAAAqC,SAAA,CAAAtC,EAAM,CAAC,CAAA;AAAA,UAAA,KAAA,EAAA,CAAA;AAAA,UAAA,KAAA,KAAA;YAAA,OAAAsC,SAAA,CAAApC,IAAA,EAAA,CAAA;AAAA,SAAA;AAAA,OAAA,EAAAiC,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA,CAAA;KAE3C,CAAA,CAAA,CAAA;IAAA,SAAAZ,yBAAAA,CAAAuB,GAAA,EAAAC,IAAA,EAAA;AAAA,MAAA,OAAAb,0BAAA,CAAA/G,KAAA,CAAA,IAAA,EAAAP,SAAA,CAAA,CAAA;AAAA,KAAA;AAAA,IAAA,OAAA2G,yBAAA,CAAA;AAAA,GAAA,EAAA;AAED;;;;;AAKG;AALH,GAAA;AAAA1H,EAAAA,MAAA,CAMUoG,sBAAsB,GAAtB,SAAAA,sBAAAA,CAAuB3D,KAAe,EAAA;AAC9C,IAAA,IAAI0G,aAAkC,CAAA;IACtC,IAAI1G,KAAK,YAAYI,mBAAmB,EAAE;AACxCsG,MAAAA,aAAa,GAAG,IAAItG,mBAAmB,CACrCJ,KAAK,CAACM,OAAO,IAAI,eAAe,EAChCN,KAAK,CAACO,IAAI,IAAI,IAAI,EAClBP,KAAK,CAACzB,IAAI,CACX,CAAA;AACH,KAAC,MAAM,IAAIyB,KAAK,YAAYG,KAAK,EAAE;AACjCuG,MAAAA,aAAa,GAAG,IAAItG,mBAAmB,CACrCJ,KAAK,CAACM,OAAO,IAAI,eAAe,EAChC,IAAI,EACJN,KAAK,CACN,CAAA;AACH,KAAC,MAAM;MACL0G,aAAa,GAAG,IAAItG,mBAAmB,CAAC,eAAe,EAAE,IAAI,EAAEJ,KAAK,CAAC,CAAA;AACvE,KAAA;AACA,IAAA,OAAO0G,aAAa,CAAA;AACtB,GAAA;AAEA;;;;AAIG,MAJH;AAAAnJ,EAAAA,MAAA,CAKQmE,cAAc,GAAd,SAAAA,iBAAc;AACpB,IAAA,IAAI,CAACiF,MAAM,CAACC,QAAQ,EAAE;MACpBD,MAAM,CAACC,QAAQ,GAAG,IAAI,CAAA;AACxB,KAAC,MAAM;AACL,MAAA,IACED,MAAM,CAACC,QAAQ,CAACC,SAAS,IACzBrI,KAAK,CAACsI,OAAO,CAACH,MAAM,CAACC,QAAQ,CAACC,SAAS,CAAC,EACxC;QACAF,MAAM,CAACC,QAAQ,CAACC,SAAS,CAAC9I,IAAI,CAAC,IAAI,CAAC,CAAA;AACtC,OAAC,MAAM;QACL4I,MAAM,CAACC,QAAQ,CAACC,SAAS,GAAG,CAACF,MAAM,CAACC,QAAQ,EAAE,IAAI,CAAC,CAAA;AACrD,OAAA;AACF,KAAA;GACD,CAAA;AAAA,EAAA,OAAAxF,cAAA,CAAA;AAAA,CAAA,CApTiCpC,0BAA0B,CAAA;;AC5B9D;;AAEG;AACH,IAAY+H,iCAMX,CAAA;AAND,CAAA,UAAYA,iCAAiC,EAAA;AAC3CA,EAAAA,iCAAA,CAAA,qBAAA,CAAA,GAAA,qBAA2C,CAAA;AAC3CA,EAAAA,iCAAA,CAAA,cAAA,CAAA,GAAA,cAA6B,CAAA;AAC7BA,EAAAA,iCAAA,CAAA,eAAA,CAAA,GAAA,eAA+B,CAAA;AAC/BA,EAAAA,iCAAA,CAAA,qBAAA,CAAA,GAAA,qBAA2C,CAAA;AAC3CA,EAAAA,iCAAA,CAAA,gBAAA,CAAA,GAAA,gBAAiC,CAAA;AACnC,CAAC,EANWA,iCAAiC,KAAjCA,iCAAiC,GAM5C,EAAA,CAAA,CAAA,CAAA;AAED;;;;AAIG;AACUC,IAAAA,sBACX,0BAAAC,eAAA,EAAA;AAQA,EAAA,SAAAD,yBAAA;AAAA,IAAA,IAAAE,qBAAA,CAAA;AAAA,IAAA,IAAA1G,KAAA,CAAA;AACEA,IAAAA,KAAA,GAAAyG,eAAA,CAAAxG,IAAA,MAAO,IAAA,IAAA,CAAA;AANT;;AAEG;IAFHD,KAAA,CAGgB2G,gBAAgB,GAAY,IAAI,CAAA;IAK9C3G,KAAA,CAAKoE,uBAAuB,EAAAsC,qBAAA,GAAA,EAAA,EAAAA,qBAAA,CACzBH,iCAAiC,CAACK,mBAAmB,CAAG,GAAA;AACvD9D,MAAAA,eAAe,EAAE,KAAK;MACtBC,OAAO,EAAA,YAAA;QAAA,IAAA8D,QAAA,GAAA9E,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAE,SAAAC,OAAAA,CACPG,MAA+B,EAAA;AAAA,UAAA,IAAAyE,UAAA,EAAAf,MAAA,EAAAgB,WAAA,CAAA;AAAA,UAAA,OAAA/E,mBAAA,EAAA,CAAAQ,IAAA,CAAA,SAAAC,SAAAC,QAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,IAAA,CAE3B5C,KAAA,CAAKoB,iBAAiB,EAAE,EAAA;AAAAsB,kBAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAAF,gBAAAA,QAAA,CAAAC,IAAA,GAAA,CAAA,CAAA;AAAAD,gBAAAA,QAAA,CAAAE,IAAA,GAAA,CAAA,CAAA;gBAAA,OAEX5C,KAAA,CAAK6B,OAAO,CACvB;kBACEO,MAAM,EAAEmE,iCAAiC,CAACS,YAAY;kBACtD3E,MAAM,EAAEA,MAAM,IAAI,EAAA;AACnB,iBAAA,CACF,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,OAAAK,QAAA,CAAAM,MAAA,CAAAN,QAAAA,EAAAA,QAAA,CAAAO,IAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAP,gBAAAA,QAAA,CAAAC,IAAA,GAAA,CAAA,CAAA;gBAAAD,QAAA,CAAAQ,EAAA,GAAAR,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA;gBAED1C,KAAA,CAAKjB,eAAe,CAACR,mBAAmB,CAAC8C,SAAS,EAAE,EAAE,CAAC,CAAA;AACvD;AAAA,cAAA,KAAA,EAAA;AAAA,gBAAA,IAAA,CAGArB,KAAA,CAAKsB,yBAAyB,EAAE,EAAA;AAAAoB,kBAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAAF,gBAAAA,QAAA,CAAAC,IAAA,GAAA,EAAA,CAAA;AAAAD,gBAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;AAAA,gBAAA,OAGxB5C,KAAA,CAAKyE,yBAAyB,CAClC9D,sBAAsB,CAACsG,oBAAoB,EAC3C;AACE1F,kBAAAA,YAAY,EAAEvB,KAAA,CAAKrB,eAAe,CAChCJ,mBAAmB,CAACgD,YAAY,CAAA;AAEnC,iBAAA,CACF,CAAA;AAAA,cAAA,KAAA,EAAA;gBARGuF,UAAU,GAAApE,QAAA,CAAAO,IAAA,CAAA;gBAUhBjD,KAAA,CAAKd,YAAY,EAAE,CAAA;AACnBc,gBAAAA,KAAA,CAAKjB,eAAe,CAClBR,mBAAmB,CAAC8C,SAAS,EAC7ByF,UAAU,CAACI,OAAO,CAAC7F,SAAS,CAC7B,CAAA;AAAC,gBAAA,IAEGyF,UAAU,CAACI,OAAO,CAAC7F,SAAS,EAAA;AAAAqB,kBAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;gBAAA,MACzBxC,oBAAoB,CAACC,aAAa,CAAA;AAAA,cAAA,KAAA,EAAA;AAAAqC,gBAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;gBAAA,OAG7B5C,KAAA,CAAK6B,OAAO,CACvB;kBACEO,MAAM,EAAEmE,iCAAiC,CAACS,YAAY;kBACtD3E,MAAM,EAAEA,MAAM,IAAI,EAAA;AACnB,iBAAA,CACF,CAAA;AAAA,cAAA,KAAA,EAAA;AAAA,gBAAA,OAAAK,QAAA,CAAAM,MAAA,CAAAN,QAAAA,EAAAA,QAAA,CAAAO,IAAA,CAAA,CAAA;AAAA,cAAA,KAAA,EAAA;AAAAP,gBAAAA,QAAA,CAAAC,IAAA,GAAA,EAAA,CAAA;gBAAAD,QAAA,CAAAyE,EAAA,GAAAzE,QAAA,CAAA,OAAA,CAAA,CAAA,EAAA,CAAA,CAAA;gBAED1C,KAAA,CAAKd,YAAY,EAAE,CAAA;AACnB;AAAA,cAAA,KAAA,EAAA;AAAAwD,gBAAAA,QAAA,CAAAC,IAAA,GAAA,EAAA,CAAA;AAAAD,gBAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;AAAA,gBAAA,OAKM5C,KAAA,CAAKyE,yBAAyB,CAClC9D,sBAAsB,CAACyG,cAAc,EACrC;kBACEtG,KAAK,EAAEd,KAAA,CAAKc,KAAK;kBACjB3B,QAAQ,EAAEa,KAAA,CAAKb,QAAAA;AAChB,iBAAA,CACF,CAAA;AAAA,cAAA,KAAA,EAAA;gBAPG4G,MAAM,GAAArD,QAAA,CAAAO,IAAA,CAAA;gBAAA,IASR,EAAA,CAAC8C,MAAM,CAACxE,YAAY,IAAI,CAACwE,MAAM,CAACsB,UAAU,CAAA,EAAA;AAAA3E,kBAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;gBAAA,MACtCxC,oBAAoB,CAACC,aAAa,CAAA;AAAA,cAAA,KAAA,EAAA;gBAG1CL,KAAA,CAAKjB,eAAe,CAClBR,mBAAmB,CAACgD,YAAY,EAChCwE,MAAM,CAACxE,YAAY,CACpB,CAAA;gBACDvB,KAAA,CAAKjB,eAAe,CAClBR,mBAAmB,CAAC8I,UAAU,EAC9BtB,MAAM,CAACsB,UAAU,CAClB,CAAA;gBACDrH,KAAA,CAAKjB,eAAe,CAClBR,mBAAmB,CAAC+I,iBAAiB,EACrCvB,MAAM,CAACuB,iBAAiB,CACzB,CAAA;gBACDtH,KAAA,CAAKjB,eAAe,CAClBR,mBAAmB,CAACgJ,UAAU,EAC9BxB,MAAM,CAACwB,UAAU,CAClB,CAAA;AACDvH,gBAAAA,KAAA,CAAKpC,IAAI,CAACjB,cAAc,CAAC6K,IAAI,EAAE;kBAC7BD,UAAU,EAAExB,MAAM,CAACwB,UAAU;kBAC7BF,UAAU,EAAEtB,MAAM,CAACsB,UAAU;kBAC7BC,iBAAiB,EAAEvB,MAAM,CAACuB,iBAAAA;AAC3B,iBAAA,CAAC,CAAA;AAAC5E,gBAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;AAAA,gBAAA,OAEK5C,KAAA,CAAKyE,yBAAyB,CAClC9D,sBAAsB,CAACsG,oBAAoB,EAC3C;kBACE1F,YAAY,EAAEwE,MAAM,CAACxE,YAAAA;AACtB,iBAAA,CACF,CAAA;AAAA,cAAA,KAAA,EAAA;gBANGuF,WAAU,GAAApE,QAAA,CAAAO,IAAA,CAAA;AAQhBjD,gBAAAA,KAAA,CAAKjB,eAAe,CAClBR,mBAAmB,CAAC8C,SAAS,EAC7ByF,WAAU,CAACI,OAAO,CAAC7F,SAAS,CAC7B,CAAA;AAAC,gBAAA,IAEGyF,WAAU,CAACI,OAAO,CAAC7F,SAAS,EAAA;AAAAqB,kBAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;gBAAA,MACzBxC,oBAAoB,CAACC,aAAa,CAAA;AAAA,cAAA,KAAA,EAAA;gBAE1CL,KAAA,CAAKjB,eAAe,CAACR,mBAAmB,CAACgD,YAAY,EAAE,EAAE,CAAC,CAAA;gBAC1DvB,KAAA,CAAKjB,eAAe,CAACR,mBAAmB,CAAC8I,UAAU,EAAE,EAAE,CAAC,CAAA;gBACxDrH,KAAA,CAAKjB,eAAe,CAACR,mBAAmB,CAAC+I,iBAAiB,EAAE,EAAE,CAAC,CAAA;gBAC/DtH,KAAA,CAAKjB,eAAe,CAACR,mBAAmB,CAACgJ,UAAU,EAAE,EAAE,CAAC,CAAA;AAAC7E,gBAAAA,QAAA,CAAAE,IAAA,GAAA,EAAA,CAAA;gBAAA,OAE5C5C,KAAA,CAAK6B,OAAO,CAAC;kBACxBO,MAAM,EAAEmE,iCAAiC,CAACS,YAAY;kBACtD3E,MAAM,EAAEA,MAAM,IAAI,EAAA;AACnB,iBAAA,CAAC,CAAA;AAAA,cAAA,KAAA,EAAA;AAAA,gBAAA,OAAAK,QAAA,CAAAM,MAAA,CAAAN,QAAAA,EAAAA,QAAA,CAAAO,IAAA,CAAA,CAAA;AAAA,cAAA,KAAA,EAAA;AAAAP,gBAAAA,QAAA,CAAAC,IAAA,GAAA,EAAA,CAAA;gBAAAD,QAAA,CAAA+E,EAAA,GAAA/E,QAAA,CAAA,OAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AAAA,gBAAA,MAEI1C,KAAA,CAAKmD,sBAAsB,CAAAT,QAAA,CAAA+E,EAAM,CAAC,CAAA;AAAA,cAAA,KAAA,EAAA,CAAA;AAAA,cAAA,KAAA,KAAA;gBAAA,OAAA/E,QAAA,CAAAU,IAAA,EAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAlB,OAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,CAAA,CAAA,CAAA;SAE3C,CAAA,CAAA,CAAA;AAAA,QAAA,SAAAa,QAAAM,EAAA,EAAA;AAAA,UAAA,OAAAwD,QAAA,CAAAxI,KAAA,CAAA,IAAA,EAAAP,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAAiF,OAAA,CAAA;AAAA,OAAA,EAAA;AACF,KAAA,EAAA2D,qBAAA,CACAH,iCAAiC,CAACS,YAAY,CAAG,GAAA;AAChDlE,MAAAA,eAAe,EAAE,IAAI;MACrBC,OAAO,EAAA,YAAA;QAAA,IAAA2E,SAAA,GAAA3F,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAE,SAAAuB,QAAAA,CACPnB,MAA+B,EAAA;AAAA,UAAA,OAAAL,mBAAA,EAAA,CAAAQ,IAAA,CAAA,SAAAkB,UAAAC,SAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAAhB,IAAA,GAAAgB,SAAA,CAAAf,IAAA;AAAA,cAAA,KAAA,CAAA;AAAAe,gBAAAA,SAAA,CAAAhB,IAAA,GAAA,CAAA,CAAA;gBAAAgB,SAAA,CAAAT,EAAA,GAAAlD,KAAA,CAAA;AAAA2D,gBAAAA,SAAA,CAAAf,IAAA,GAAA,CAAA,CAAA;gBAAA,OAIrB5C,KAAA,CAAKsD,qCAAqC,CAC9CiD,iCAAiC,CAACS,YAAY,EAC9C3E,MAAM,GAAIrE,KAAK,CAACsI,OAAO,CAACjE,MAAM,CAAC,GAAGA,MAAM,GAAG,CAACA,MAAM,CAAC,GAAI,EAAE,CAC1D,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAsB,gBAAAA,SAAA,CAAAwD,EAAA,GAAAxD,SAAA,CAAAV,IAAA,CAAA;AAAA,gBAAA,OAAAU,SAAA,CAAAX,MAAA,WAAAW,SAAA,CAAAT,EAAA,CAJSgB,WAAW,CAAAjE,IAAA,CAAA0D,SAAA,CAAAT,EAAA,EAAAS,SAAA,CAAAwD,EAAA,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAxD,gBAAAA,SAAA,CAAAhB,IAAA,GAAA,CAAA,CAAA;gBAAAgB,SAAA,CAAA8D,EAAA,GAAA9D,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,gBAAA,MAOjB3D,KAAA,CAAKmD,sBAAsB,CAAAQ,SAAA,CAAA8D,EAAM,CAAC,CAAA;AAAA,cAAA,KAAA,EAAA,CAAA;AAAA,cAAA,KAAA,KAAA;gBAAA,OAAA9D,SAAA,CAAAP,IAAA,EAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAI,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAE3C,CAAA,CAAA,CAAA;AAAA,QAAA,SAAAT,QAAAgB,GAAA,EAAA;AAAA,UAAA,OAAA2D,SAAA,CAAArJ,KAAA,CAAA,IAAA,EAAAP,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAAiF,OAAA,CAAA;AAAA,OAAA,EAAA;AACF,KAAA,EAAA2D,qBAAA,CACAH,iCAAiC,CAACoB,mBAAmB,CAAG,GAAA;AACvD7E,MAAAA,eAAe,EAAE,IAAI;MACrBC,OAAO,EAAA,YAAA;QAAA,IAAA6E,SAAA,GAAA7F,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAE,SAAAqC,QAAAA,CACPjC,MAA+B,EAAA;AAAA,UAAA,OAAAL,mBAAA,EAAA,CAAAQ,IAAA,CAAA,SAAA+B,UAAAC,SAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAA7B,IAAA,GAAA6B,SAAA,CAAA5B,IAAA;AAAA,cAAA,KAAA,CAAA;AAAA4B,gBAAAA,SAAA,CAAA5B,IAAA,GAAA,CAAA,CAAA;gBAAA,OAElB5C,KAAA,CAAKsD,qCAAqC,CACrDiD,iCAAiC,CAACoB,mBAAmB,EACrDtF,MAAM,GAAIrE,KAAK,CAACsI,OAAO,CAACjE,MAAM,CAAC,GAAGA,MAAM,GAAG,CAACA,MAAM,CAAC,GAAI,EAAE,CAC1D,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,OAAAmC,SAAA,CAAAxB,MAAA,CAAAwB,QAAAA,EAAAA,SAAA,CAAAvB,IAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA,CAAA;AAAA,cAAA,KAAA,KAAA;gBAAA,OAAAuB,SAAA,CAAApB,IAAA,EAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAkB,QAAA,CAAA,CAAA;SACF,CAAA,CAAA,CAAA;AAAA,QAAA,SAAAvB,QAAAiB,GAAA,EAAA;AAAA,UAAA,OAAA4D,SAAA,CAAAvJ,KAAA,CAAA,IAAA,EAAAP,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAAiF,OAAA,CAAA;AAAA,OAAA,EAAA;AACF,KAAA,EAAA2D,qBAAA,CACAH,iCAAiC,CAACsB,aAAa,CAAG,GAAA;AACjD/E,MAAAA,eAAe,EAAE,IAAI;MACrBC,OAAO,EAAA,YAAA;QAAA,IAAA+E,SAAA,GAAA/F,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAE,SAAA6C,QAAAA,CACPzC,MAAwC,EAAA;AAAA,UAAA,OAAAL,mBAAA,EAAA,CAAAQ,IAAA,CAAA,SAAAuC,UAAAC,SAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAArC,IAAA,GAAAqC,SAAA,CAAApC,IAAA;AAAA,cAAA,KAAA,CAAA;AAAAoC,gBAAAA,SAAA,CAAApC,IAAA,GAAA,CAAA,CAAA;gBAAA,OAE3B5C,KAAA,CAAKsD,qCAAqC,CACrDiD,iCAAiC,CAACsB,aAAa,EAC/CxF,MAAM,GAAIrE,KAAK,CAACsI,OAAO,CAACjE,MAAM,CAAC,GAAGA,MAAM,GAAG,CAACA,MAAM,CAAC,GAAI,EAAE,CAC1D,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,OAAA2C,SAAA,CAAAhC,MAAA,CAAAgC,QAAAA,EAAAA,SAAA,CAAA/B,IAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA,CAAA;AAAA,cAAA,KAAA,KAAA;gBAAA,OAAA+B,SAAA,CAAA5B,IAAA,EAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAA0B,QAAA,CAAA,CAAA;SACF,CAAA,CAAA,CAAA;AAAA,QAAA,SAAA/B,QAAAkB,GAAA,EAAA;AAAA,UAAA,OAAA6D,SAAA,CAAAzJ,KAAA,CAAA,IAAA,EAAAP,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAAiF,OAAA,CAAA;AAAA,OAAA,EAAA;AACF,KAAA,EAAA2D,qBAAA,CACAH,iCAAiC,CAACwB,cAAc,CAAG,GAAA;AAClDjF,MAAAA,eAAe,EAAE,IAAI;MACrBC,OAAO,EAAA,YAAA;QAAA,IAAAiF,SAAA,GAAAjG,iBAAA,eAAAC,mBAAA,EAAAC,CAAAA,IAAA,CAAE,SAAAoD,QAAA,GAAA;AAAA,UAAA,IAAAU,MAAA,CAAA;AAAA,UAAA,OAAA/D,mBAAA,EAAA,CAAAQ,IAAA,CAAA,SAAA+C,UAAAC,SAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAA7C,IAAA,GAAA6C,SAAA,CAAA5C,IAAA;AAAA,cAAA,KAAA,CAAA;AAAA4C,gBAAAA,SAAA,CAAA7C,IAAA,GAAA,CAAA,CAAA;AAAA6C,gBAAAA,SAAA,CAAA5C,IAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAGG5C,KAAA,CAAKyE,yBAAyB,CAClC9D,sBAAsB,CAACkC,UAAU,EACjC;AACEoF,kBAAAA,YAAY,EAAEjI,KAAA,CAAKrB,eAAe,CAChCJ,mBAAmB,CAAC8C,SAAS,CAAA;AAEhC,iBAAA,CACF,CAAA;AAAA,cAAA,KAAA,CAAA;gBARG0E,MAAM,GAAAP,SAAA,CAAAvC,IAAA,CAAA;gBASZjD,KAAA,CAAKpC,IAAI,CACPjB,cAAc,CAACkG,UAAU,EACzBzC,oBAAoB,CAACE,YAAY,CAClC,CAAA;gBACDN,KAAA,CAAKd,YAAY,EAAE,CAAA;AACnBc,gBAAAA,KAAA,CAAKkE,WAAW,CAAC,EAAE,CAAC,CAAA;AAAC,gBAAA,OAAAsB,SAAA,CAAAxC,MAAA,CAAA,QAAA,EACd+C,MAAM,CAAA,CAAA;AAAA,cAAA,KAAA,EAAA;AAAAP,gBAAAA,SAAA,CAAA7C,IAAA,GAAA,EAAA,CAAA;gBAAA6C,SAAA,CAAAtC,EAAA,GAAAsC,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,gBAAA,MAEPxF,KAAA,CAAKmD,sBAAsB,CAAAqC,SAAA,CAAAtC,EAAM,CAAC,CAAA;AAAA,cAAA,KAAA,EAAA,CAAA;AAAA,cAAA,KAAA,KAAA;gBAAA,OAAAsC,SAAA,CAAApC,IAAA,EAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAiC,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA,CAAA;SAE3C,CAAA,CAAA,CAAA;AAAA,QAAA,SAAAtC,OAAA,GAAA;AAAA,UAAA,OAAAiF,SAAA,CAAA3J,KAAA,CAAA,IAAA,EAAAP,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAAiF,OAAA,CAAA;AAAA,OAAA,EAAA;KACF,EAAA2D,qBAAA,EACD,CAAA;AAEFP,IAAAA,MAAM,CAAC+B,gBAAgB,CAAC,MAAM,EAAE,YAAK;AACnClI,MAAAA,KAAA,CAAKpC,IAAI,CAACjB,cAAc,CAACwL,OAAO,EAAEnI,KAAA,CAAKwB,QAAQ,EAAE,CAAC,CAAA;MAClDxB,KAAA,CAAKoI,cAAc,EAAE,CAAA;MACrBpI,KAAA,CAAKqI,cAAc,EAAE,CAAA;AACvB,KAAC,CAAC,CAAA;AAAC,IAAA,OAAArI,KAAA,CAAA;AACL,GAAA;AAEA;;;;AAIG;EAJHtB,cAAA,CAAA8H,sBAAA,EAAAC,eAAA,CAAA,CAAA;AAAA,EAAA,IAAA1J,MAAA,GAAAyJ,sBAAA,CAAAxJ,SAAA,CAAA;AAAAD,EAAAA,MAAA,CAKcqL,cAAc;AAAA;AAAA,EAAA,YAAA;IAAA,IAAAE,eAAA,gBAAAvG,iBAAA,eAAAC,mBAAA,EAAAC,CAAAA,IAAA,CAApB,SAAAsG,QAAA,GAAA;MAAA,IAAAhH,YAAA,EAAAF,SAAA,EAAAmH,mBAAA,EAAA1B,UAAA,EAAA7F,QAAA,CAAA;AAAA,MAAA,OAAAe,mBAAA,EAAA,CAAAQ,IAAA,CAAA,SAAAiG,UAAAC,SAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAA/F,IAAA,GAAA+F,SAAA,CAAA9F,IAAA;AAAA,UAAA,KAAA,CAAA;YACArB,YAAY,GAAG,IAAI,CAAC5C,eAAe,CAACJ,mBAAmB,CAACgD,YAAY,CAAC,CAAA;YACrEF,SAAS,GAAG,IAAI,CAAC1C,eAAe,CAACJ,mBAAmB,CAAC8C,SAAS,CAAC,CAAA;YAAA,IACjEE,EAAAA,YAAY,IAAI,CAACF,SAAS,CAAA,EAAA;AAAAqH,cAAAA,SAAA,CAAA9F,IAAA,GAAA,EAAA,CAAA;AAAA,cAAA,MAAA;AAAA,aAAA;AAAA8F,YAAAA,SAAA,CAAA/F,IAAA,GAAA,CAAA,CAAA;AAAA+F,YAAAA,SAAA,CAAA9F,IAAA,GAAA,CAAA,CAAA;AAAA,YAAA,OAGlB,IAAI,CAAC6B,yBAAyB,CAClC9D,sBAAsB,CAACsG,oBAAoB,EAC3C;AACE1F,cAAAA,YAAY,EAAZA,YAAAA;AACD,aAAA,CACF,CAAA;AAAA,UAAA,KAAA,CAAA;YANGuF,UAAU,GAAA4B,SAAA,CAAAzF,IAAA,CAAA;YAQhB,IAAI,CAAC/D,YAAY,EAAE,CAAA;AACnB,YAAA,IAAI,CAACH,eAAe,CAClBR,mBAAmB,CAAC8C,SAAS,EAC7ByF,UAAU,CAACI,OAAO,CAAC7F,SAAS,CAC7B,CAAA;AAAC,YAAA,IAEGyF,UAAU,CAACI,OAAO,CAAC7F,SAAS,EAAA;AAAAqH,cAAAA,SAAA,CAAA9F,IAAA,GAAA,EAAA,CAAA;AAAA,cAAA,MAAA;AAAA,aAAA;YAAA,MACzBxC,oBAAoB,CAACC,aAAa,CAAA;AAAA,UAAA,KAAA,EAAA;AAGpCY,YAAAA,QAAQ,GAAG,CACf,CAAAuH,CAAAA,mBAAA,GAAA1B,UAAU,CAACI,OAAO,KAAAsB,IAAAA,IAAAA,CAAAA,mBAAA,GAAlBA,mBAAA,CAAoBG,UAAU,KAAAH,IAAAA,IAAAA,CAAAA,mBAAA,GAA9BA,mBAAA,CAA0C,QAAA,CAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAA1CA,mBAAA,CAA4CvH,QAAQ,KAAI,EAAE,EAC1D2H,GAAG,CAAC,UAACC,OAAO,EAAA;AAAA,cAAA,OACZA,OAAO,CAACC,QAAQ,CAAC,GAAG,CAAC,GAAGD,OAAO,CAACnH,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,GAAGmH,OAAO,CAAA;aAC9D,CAAA,CAAA;AACD,YAAA,IAAI,CAAC3E,WAAW,CAACjD,QAAQ,CAAC,CAAA;AAACyH,YAAAA,SAAA,CAAA9F,IAAA,GAAA,EAAA,CAAA;AAAA,YAAA,MAAA;AAAA,UAAA,KAAA,EAAA;AAAA8F,YAAAA,SAAA,CAAA/F,IAAA,GAAA,EAAA,CAAA;YAAA+F,SAAA,CAAAxF,EAAA,GAAAwF,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAE3B,YAAA,IAAI,CAACxE,WAAW,CAAC,EAAE,CAAC,CAAA;YACpB,IAAI,CAAChF,YAAY,EAAE,CAAA;AAAC,UAAA,KAAA,EAAA,CAAA;AAAA,UAAA,KAAA,KAAA;YAAA,OAAAwJ,SAAA,CAAAtF,IAAA,EAAA,CAAA;AAAA,SAAA;AAAA,OAAA,EAAAmF,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA,CAAA;KAGzB,CAAA,CAAA,CAAA;AAAA,IAAA,SAAAH,cAAA,GAAA;AAAA,MAAA,OAAAE,eAAA,CAAAjK,KAAA,CAAA,IAAA,EAAAP,SAAA,CAAA,CAAA;AAAA,KAAA;AAAA,IAAA,OAAAsK,cAAA,CAAA;AAAA,GAAA,EAAA;AAED;;;;AAIG;AAJH,GAAA;AAAArL,EAAAA,MAAA,CAKcsL,cAAc;AAAA;AAAA,EAAA,YAAA;IAAA,IAAAU,eAAA,gBAAAhH,iBAAA,eAAAC,mBAAA,EAAAC,CAAAA,IAAA,CAApB,SAAA+G,QAAA,GAAA;MAAA,IAAAzH,YAAA,EAAAF,SAAA,CAAA;AAAA,MAAA,OAAAW,mBAAA,EAAA,CAAAQ,IAAA,CAAA,SAAAyG,UAAAC,SAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAAvG,IAAA,GAAAuG,SAAA,CAAAtG,IAAA;AAAA,UAAA,KAAA,CAAA;YACArB,YAAY,GAAG,IAAI,CAAC5C,eAAe,CAACJ,mBAAmB,CAACgD,YAAY,CAAC,CAAA;YACrEF,SAAS,GAAG,IAAI,CAAC1C,eAAe,CAACJ,mBAAmB,CAAC8C,SAAS,CAAC,CAAA;YAAA,IACjEA,EAAAA,SAAS,IAAI,CAACE,YAAY,CAAA,EAAA;AAAA2H,cAAAA,SAAA,CAAAtG,IAAA,GAAA,EAAA,CAAA;AAAA,cAAA,MAAA;AAAA,aAAA;AAAAsG,YAAAA,SAAA,CAAAvG,IAAA,GAAA,CAAA,CAAA;AAAAuG,YAAAA,SAAA,CAAAtG,IAAA,GAAA,CAAA,CAAA;YAAA,OAEpB,IAAI,CAACf,OAAO,CAAW;cAC3BO,MAAM,EAAEmE,iCAAiC,CAACK,mBAAAA;AAC3C,aAAA,CAAC,CAAA;AAAA,UAAA,KAAA,CAAA;AAAAsC,YAAAA,SAAA,CAAAtG,IAAA,GAAA,EAAA,CAAA;AAAA,YAAA,MAAA;AAAA,UAAA,KAAA,CAAA;AAAAsG,YAAAA,SAAA,CAAAvG,IAAA,GAAA,CAAA,CAAA;YAAAuG,SAAA,CAAAhG,EAAA,GAAAgG,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAEF,YAAA,IAAI,CAAChF,WAAW,CAAC,EAAE,CAAC,CAAA;YACpB,IAAI,CAAChF,YAAY,EAAE,CAAA;AAAC,UAAA,KAAA,EAAA,CAAA;AAAA,UAAA,KAAA,KAAA;YAAA,OAAAgK,SAAA,CAAA9F,IAAA,EAAA,CAAA;AAAA,SAAA;AAAA,OAAA,EAAA4F,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;KAGzB,CAAA,CAAA,CAAA;AAAA,IAAA,SAAAX,cAAA,GAAA;AAAA,MAAA,OAAAU,eAAA,CAAA1K,KAAA,CAAA,IAAA,EAAAP,SAAA,CAAA,CAAA;AAAA,KAAA;AAAA,IAAA,OAAAuK,cAAA,CAAA;AAAA,GAAA,EAAA,CAAA;AAAA,EAAA,OAAA7B,sBAAA,CAAA;AAAA,CAAA,CApQO5F,cAAc,CAAA;;ACjBxB;;;;;;;;AAQG;AACH,IAAauI,iBAAiB,gBAAA,YAAA;EAO5B,SAAAA,iBAAAA,CAAAhH,IAAA,EAA8C;AAAA,IAAA,IAAhCrB,KAAK,GAAAqB,IAAA,CAALrB,KAAK,CAAA;AANnB;;;AAGG;AAHH,IAAA,IAAA,CAIOsI,QAAQ,GAAA,KAAA,CAAA,CAAA;AAGb,IAAA,IAAI,CAACA,QAAQ,GAAG,IAAI,CAACC,eAAe,EAAE,CAAA;AACtC,IAAA,IAAI,CAACzH,QAAQ,CAACd,KAAK,CAAC,CAAA;AACpB,IAAA,IAAI,CAACsI,QAAQ,CAACnM,EAAE,CAACN,cAAc,CAAC6K,IAAI,EAAE,IAAI,CAAC8B,aAAa,CAAC,CAAA;AAC3D,GAAA;AAEA;;;;;;;;AAQG;AARH,EAAA,IAAAvM,MAAA,GAAAoM,iBAAA,CAAAnM,SAAA,CAAA;AAAAD,EAAAA,MAAA,CASOoE,WAAW,GAAX,SAAAA,cAAW;AAChB,IAAA,OAAO,IAAI,CAACiI,QAAQ,CAACjI,WAAW,EAAE,CAAA;AACpC,GAAA;AAEA;;;AAGG,MAHH;AAAApE,EAAAA,MAAA,CAIOqE,iBAAiB,GAAjB,SAAAA,oBAAiB;AACtB,IAAA,OAAO,IAAI,CAACgI,QAAQ,CAAChI,iBAAiB,EAAE,CAAA;AAC1C,GAAA;AAEA;;;;;AAKG,MALH;AAAArE,EAAAA,MAAA,CAMaoL,OAAO;AAAA;AAAA,EAAA,YAAA;IAAA,IAAAoB,QAAA,gBAAAxH,iBAAA,eAAAC,mBAAA,EAAAC,CAAAA,IAAA,CAAb,SAAAC,OAAA,GAAA;AAAA,MAAA,OAAAF,mBAAA,EAAA,CAAAQ,IAAA,CAAA,SAAAC,SAAAC,QAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA,QAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;AAAA,UAAA,KAAA,CAAA;AAAAF,YAAAA,QAAA,CAAAE,IAAA,GAAA,CAAA,CAAA;AAAA,YAAA,OACQ,IAAI,CAACwG,QAAQ,CAACvH,OAAO,CAAC;cACjCO,MAAM,EAAEmE,iCAAiC,CAACK,mBAAAA;AAC3C,aAAA,CAAC,CAAA;AAAA,UAAA,KAAA,CAAA;AAAA,YAAA,OAAAlE,QAAA,CAAAM,MAAA,CAAAN,QAAAA,EAAAA,QAAA,CAAAO,IAAA,CAAA,CAAA;AAAA,UAAA,KAAA,CAAA,CAAA;AAAA,UAAA,KAAA,KAAA;YAAA,OAAAP,QAAA,CAAAU,IAAA,EAAA,CAAA;AAAA,SAAA;AAAA,OAAA,EAAAlB,OAAA,EAAA,IAAA,CAAA,CAAA;KACH,CAAA,CAAA,CAAA;AAAA,IAAA,SAAAiG,OAAA,GAAA;AAAA,MAAA,OAAAoB,QAAA,CAAAlL,KAAA,CAAA,IAAA,EAAAP,SAAA,CAAA,CAAA;AAAA,KAAA;AAAA,IAAA,OAAAqK,OAAA,CAAA;AAAA,GAAA,EAAA;AAED;;;;;AAKG;AALH,GAAA;AAAApL,EAAAA,MAAA,CAMa8F,UAAU;AAAA;AAAA,EAAA,YAAA;IAAA,IAAA2G,WAAA,gBAAAzH,iBAAA,eAAAC,mBAAA,EAAAC,CAAAA,IAAA,CAAhB,SAAAuB,QAAA,GAAA;AAAA,MAAA,OAAAxB,mBAAA,EAAA,CAAAQ,IAAA,CAAA,SAAAkB,UAAAC,SAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAAhB,IAAA,GAAAgB,SAAA,CAAAf,IAAA;AAAA,UAAA,KAAA,CAAA;AAAAe,YAAAA,SAAA,CAAAf,IAAA,GAAA,CAAA,CAAA;AAAA,YAAA,OACQ,IAAI,CAACwG,QAAQ,CAACvH,OAAO,CAAC;cACjCO,MAAM,EAAEmE,iCAAiC,CAACwB,cAAAA;AAC3C,aAAA,CAAC,CAAA;AAAA,UAAA,KAAA,CAAA;AAAA,YAAA,OAAApE,SAAA,CAAAX,MAAA,CAAAW,QAAAA,EAAAA,SAAA,CAAAV,IAAA,CAAA,CAAA;AAAA,UAAA,KAAA,CAAA,CAAA;AAAA,UAAA,KAAA,KAAA;YAAA,OAAAU,SAAA,CAAAP,IAAA,EAAA,CAAA;AAAA,SAAA;AAAA,OAAA,EAAAI,QAAA,EAAA,IAAA,CAAA,CAAA;KACH,CAAA,CAAA,CAAA;AAAA,IAAA,SAAAX,UAAA,GAAA;AAAA,MAAA,OAAA2G,WAAA,CAAAnL,KAAA,CAAA,IAAA,EAAAP,SAAA,CAAA,CAAA;AAAA,KAAA;AAAA,IAAA,OAAA+E,UAAA,CAAA;AAAA,GAAA,EAAA;AAED;;;;;;AAMG;AANH,GAAA;AAAA9F,EAAAA,MAAA,CAOO6E,QAAQ,GAAR,SAAAA,QAAAA,CAASd,KAAa,EAAA;AAC3B,IAAA,IAAI,CAACsI,QAAQ,CAACxH,QAAQ,CAACd,KAAK,CAAC,CAAA;AAC/B,GAAA;AAEA;;;;;;;;;AASG,MATH;AAAA/D,EAAAA,MAAA,CAUa0M,eAAe;AAAA;AAAA,EAAA,YAAA;IAAA,IAAAC,gBAAA,gBAAA3H,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAArB,SAAAqC,QAAAA,CAAsBjC,MAI5B,EAAA;AAAA,MAAA,OAAAL,mBAAA,EAAA,CAAAQ,IAAA,CAAA,SAAA+B,UAAAC,SAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAA7B,IAAA,GAAA6B,SAAA,CAAA5B,IAAA;AAAA,UAAA,KAAA,CAAA;AAAA4B,YAAAA,SAAA,CAAA5B,IAAA,GAAA,CAAA,CAAA;AAAA,YAAA,OACc,IAAI,CAACwG,QAAQ,CAACvH,OAAO,CAAW;cAC3CO,MAAM,EAAEmE,iCAAiC,CAACoB,mBAAmB;cAC7DtF,MAAM,EAAE,CAACA,MAAM,CAAA;AAChB,aAAA,CAAC,CAAA;AAAA,UAAA,KAAA,CAAA;AAAA,YAAA,OAAAmC,SAAA,CAAAxB,MAAA,CAAAwB,QAAAA,EAAAA,SAAA,CAAAvB,IAAA,CAAA,CAAA;AAAA,UAAA,KAAA,CAAA,CAAA;AAAA,UAAA,KAAA,KAAA;YAAA,OAAAuB,SAAA,CAAApB,IAAA,EAAA,CAAA;AAAA,SAAA;AAAA,OAAA,EAAAkB,QAAA,EAAA,IAAA,CAAA,CAAA;KACH,CAAA,CAAA,CAAA;AAAA,IAAA,SAAAmF,gBAAApG,EAAA,EAAA;AAAA,MAAA,OAAAqG,gBAAA,CAAArL,KAAA,CAAA,IAAA,EAAAP,SAAA,CAAA,CAAA;AAAA,KAAA;AAAA,IAAA,OAAA2L,eAAA,CAAA;AAAA,GAAA,EAAA;AAED;;;;;;AAMG;AANH,GAAA;AAAA1M,EAAAA,MAAA,CAOa4M,WAAW;AAAA;AAAA,EAAA,YAAA;IAAA,IAAAC,YAAA,gBAAA7H,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAjB,SAAA6C,QAAAA,CAAkBhF,OAAe,EAAA;AAAA,MAAA,OAAAkC,mBAAA,EAAA,CAAAQ,IAAA,CAAA,SAAAuC,UAAAC,SAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAArC,IAAA,GAAAqC,SAAA,CAAApC,IAAA;AAAA,UAAA,KAAA,CAAA;AAAAoC,YAAAA,SAAA,CAAApC,IAAA,GAAA,CAAA,CAAA;AAAA,YAAA,OACzB,IAAI,CAACwG,QAAQ,CAACvH,OAAO,CAAS;cACzCO,MAAM,EAAEmE,iCAAiC,CAACsB,aAAa;cACvDxF,MAAM,EAAE,CAACvC,OAAO,EAAE,IAAI,CAACsJ,QAAQ,CAACzH,UAAU,EAAE,CAAA;AAC7C,aAAA,CAAC,CAAA;AAAA,UAAA,KAAA,CAAA;AAAA,YAAA,OAAAqD,SAAA,CAAAhC,MAAA,CAAAgC,QAAAA,EAAAA,SAAA,CAAA/B,IAAA,CAAA,CAAA;AAAA,UAAA,KAAA,CAAA,CAAA;AAAA,UAAA,KAAA,KAAA;YAAA,OAAA+B,SAAA,CAAA5B,IAAA,EAAA,CAAA;AAAA,SAAA;AAAA,OAAA,EAAA0B,QAAA,EAAA,IAAA,CAAA,CAAA;KACH,CAAA,CAAA,CAAA;AAAA,IAAA,SAAA6E,YAAA5F,GAAA,EAAA;AAAA,MAAA,OAAA6F,YAAA,CAAAvL,KAAA,CAAA,IAAA,EAAAP,SAAA,CAAA,CAAA;AAAA,KAAA;AAAA,IAAA,OAAA6L,WAAA,CAAA;AAAA,GAAA,EAAA;AAED;;;;;;AAMG;AANH,GAAA;EAAA5M,MAAA,CAOOE,EAAE,GAAF,SAAAA,GAAGC,KAAoB,EAAEC,QAAkB,EAAA;IAChD,IAAI,CAACiM,QAAQ,CAACnM,EAAE,CAACC,KAAK,EAAEC,QAAQ,CAAC,CAAA;AACjC,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;AAEA;;;;;;AAMG,MANH;EAAAJ,MAAA,CAOOS,cAAc,GAAd,SAAAA,eAAeN,KAAoB,EAAEC,QAAkB,EAAA;IAC5D,IAAI,CAACiM,QAAQ,CAAC5L,cAAc,CAACN,KAAK,EAAEC,QAAQ,CAAC,CAAA;AAC7C,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;AAEA;;;AAGG,MAHH;AAAAJ,EAAAA,MAAA,CAIQsM,eAAe,GAAf,SAAAA,kBAAe;AAAA,IAAA,IAAAQ,gBAAA,CAAA;AACrB,IAAA,IAAIT,QAAQ,GAAAS,CAAAA,gBAAA,GAAG1D,MAAM,CAACC,QAAQ,KAAAyD,IAAAA,IAAAA,CAAAA,gBAAA,GAAfA,gBAAA,CAAiBxD,SAAS,KAA1BwD,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,gBAAA,CAA4BC,IAAI,CAC7C,UAACV,QAA0C,EAAA;AAAA,MAAA,OACzCA,QAAQ,YAAY5C,sBAAsB,IAAI4C,QAAQ,CAACzC,gBAAgB,CAAA;KAC1E,CAAA,CAAA;AACD,IAAA,IACE,CAACyC,QAAQ,IACTjD,MAAM,CAACC,QAAQ,YAAYI,sBAAsB,IACjDL,MAAM,CAACC,QAAQ,CAACO,gBAAgB,EAChC;MACAyC,QAAQ,GAAGjD,MAAM,CAACC,QAAQ,CAAA;AAC5B,KAAA;IACA,IAAI,CAACgD,QAAQ,EAAE;AACbA,MAAAA,QAAQ,GAAG,IAAI5C,sBAAsB,EAAE,CAAA;AACzC,KAAA;AACA,IAAA,OAAO4C,QAAQ,CAAA;AACjB,GAAA;AAEA;;;;;AAKG,MALH;AAAArM,EAAAA,MAAA,CAMQuM,aAAa,GAAb,SAAAA,aAAAA,CAAAS,KAAA,EAGsC;AAAA,IAAA,IAAAC,gBAAA,CAAA;AAAA,IAAA,IAF5CzC,UAAU,GAAAwC,KAAA,CAAVxC,UAAU;MACVD,iBAAiB,GAAAyC,KAAA,CAAjBzC,iBAAiB,CAAA;IAEjB,IAAM2C,MAAM,GAAAD,CAAAA,gBAAA,GAAG7D,MAAM,CAAC+D,QAAQ,KAAA,IAAA,GAAA,KAAA,CAAA,GAAfF,gBAAA,CAAiBC,MAAM,CAAA;IACtC,IAAME,WAAW,0DAAwD5C,UAAY,CAAA;AACrF,IAAA,IACE0C,MAAM,IACNA,MAAM,CAACG,gBAAgB,IACvBH,MAAM,CAACI,QAAQ,IACfJ,MAAM,CAACI,QAAQ,KAAK,SAAS,EAC7B;AACAJ,MAAAA,MAAM,CAACG,gBAAgB,CAAC9C,iBAAiB,CAAC,CAAA;MAC1C,IAAI2C,MAAM,CAACK,KAAK,EAAE;AAChBnE,QAAAA,MAAM,CAAC+D,QAAQ,CAACD,MAAM,CAACK,KAAK,EAAE,CAAA;AAChC,OAAA;AACF,KAAC,MAAM;AACLnE,MAAAA,MAAM,CAACoE,IAAI,CAACJ,WAAW,EAAE,QAAQ,CAAC,CAAA;AACpC,KAAA;GACD,CAAA;AAAA,EAAA,OAAAhB,iBAAA,CAAA;AAAA,CAAA,EAAA;;ACnMH;;;AAGG;AACI,IAAMqB,QAAQ,GAAG,SAAXA,QAAQA,GAAgB;AAAA,EAAA,IAAAC,gBAAA,CAAA;EACnC,IAAI3J,KAAK,GAAW,EAAE,CAAA;AACtB,EAAA,IAAM4J,QAAQ,GAAGC,QAAQ,CAACC,gBAAgB,CAAC,eAAe,CAAC,CAAA;AAC3D,EAAA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,CAACtO,MAAM,EAAEyO,CAAC,EAAE,EAAE;AACxC,IAAA,IAAMC,OAAO,GAAGJ,QAAQ,CAACG,CAAC,CAAC,CAAA;AAC3B,IAAA,IAAMhM,KAAK,GAAGiM,OAAO,CAACC,YAAY,CAAC,aAAa,CAAC,CAAA;AACjD,IAAA,IAAMC,GAAG,GAAGF,OAAO,CAACC,YAAY,CAAC,KAAK,CAAC,CAAA;IACvC,IAAME,aAAa,GAAGD,GAAG,IAAIA,GAAG,CAAClC,QAAQ,CAAC,qBAAqB,CAAC,CAAA;IAChE,IAAIjK,KAAK,IAAIoM,aAAa,EAAE;AAC1BnK,MAAAA,KAAK,GAAGjC,KAAK,CAAA;AACf,KAAA;AACF,GAAA;EACA,IAAA4L,CAAAA,gBAAA,GAAItE,MAAM,CAAC+E,QAAQ,KAAfT,IAAAA,IAAAA,gBAAA,CAAiB3J,KAAK,EAAE;AAC1BA,IAAAA,KAAK,GAAGqF,MAAM,CAAC+E,QAAQ,CAACpK,KAAK,CAAA;AAC/B,GAAA;AACA,EAAA,OAAOA,KAAK,CAAA;AACd,CAAC;;ACND,SAASqK,IAAIA,GAAA;AAAA,EAAA,IAAAV,gBAAA,CAAA;EACX,IACE,EAAA,CAAAA,gBAAA,GAACtE,MAAM,CAAC+E,QAAQ,KAAA,IAAA,IAAfT,gBAAA,CAAiBW,SAAS,KAC3B,EAAEjF,MAAM,CAAC+E,QAAQ,CAACE,SAAS,YAAYjC,iBAAiB,CAAC,EACzD;IACAhD,MAAM,CAAC+E,QAAQ,GAAAG,QAAA,CAAA,EAAA,EACTlF,MAAM,CAAC+E,QAAQ,IAAI,EAAE,EAAA;MACzBE,SAAS,EAAE,IAAIjC,iBAAiB,CAAC;QAC/BrI,KAAK,EAAE0J,QAAQ,EAAE;OAClB,CAAA;KACF,CAAA,CAAA;AACH,GAAA;AACF,CAAA;AAEA;AACAW,IAAI,EAAE;;"}