{"version":3,"file":"grindery-wallet-sdk.cjs.development.js","sources":["../src/enums.ts","../src/classes/EventEmitter.ts","../src/classes/LocalStorage.ts","../src/classes/ProviderError.ts","../src/classes/ProviderBase.ts","../src/classes/GrinderyWalletProvider.ts","../src/classes/GrinderyWalletSDK.ts","../src/index.ts"],"sourcesContent":["export enum ProviderEvents {\n  accountsChanged = 'accountsChanged',\n  pair = 'pair',\n  connect = 'connect',\n  disconnect = 'disconnect',\n  chainChanged = 'chainChanged',\n  message = 'message',\n}\n\nexport enum ProviderStorageKeys {\n  pairingToken = 'pairingToken',\n  sessionId = 'sessionId',\n  connectUrl = 'connectUrl',\n  connectUrlBrowser = 'connectUrlBrowser',\n  shortToken = 'shortToken',\n}\n\nexport enum GrinderyRpcMethodNames {\n  checkout_requestPairing = 'checkout_requestPairing',\n  checkout_waitForPairingResult = 'checkout_waitForPairingResult',\n  checkout_request = 'checkout_request',\n  checkout_waitForRequestResult = 'checkout_waitForRequestResult',\n}\n\nexport enum GrinderyRpcProviderRequestMethodNames {\n  eth_requestAccounts = 'eth_requestAccounts',\n  eth_accounts = 'eth_accounts',\n  personal_sign = 'personal_sign',\n  eth_sendTransaction = 'eth_sendTransaction',\n}\n","import { ProviderEvent } from '../types';\n\n/**\n * @summary A class for emitting provider events\n * @since 0.1.0\n */\nexport class EventEmitter {\n  /**\n   * @summary A map of events and their listeners\n   * @public\n   */\n  public events: Map<ProviderEvent, Array<Function>>;\n\n  constructor() {\n    this.events = new Map();\n  }\n\n  /**\n   * @summary Adds a listener to the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public on(event: ProviderEvent, callback: Function) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event)!.push(callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public removeListener(event: ProviderEvent, callback: Function) {\n    if (this.events.has(event)) {\n      const callbacks = this.events.get(event)!.filter(cb => cb !== callback);\n      this.events.set(event, callbacks);\n    }\n    return this;\n  }\n\n  /**\n   * @summary Emits an event\n   * @public\n   * @param {string} event Event name\n   * @param data Event data\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  protected emit(event: ProviderEvent, ...data: any[]) {\n    if (this.events.has(event)) {\n      console.log('[Grindery.WalletSDK] > Event:', event, data);\n      this.events.get(event)!.forEach(callback => {\n        callback(...data);\n      });\n    }\n    return this;\n  }\n}\n","import { EventEmitter } from './EventEmitter';\nimport { ProviderStorage, ProviderStorageKey } from '../types';\n\nconst LOCALSTORAGE_KEY = 'GrinderyWalletProvider';\n\n/**\n * @summary A local storage class for the provider\n * @since 0.1.0\n * @extends EventEmitter\n */\nexport class ProviderLocalStorage extends EventEmitter {\n  /**\n   * @summary Gets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @returns {string} The value of the storage by the key\n   */\n  protected getStorageValue(key: ProviderStorageKey): string {\n    const value = this.getStorage()[key] || '';\n    return value;\n  }\n\n  /**\n   * @summary Sets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @param {string} value The value to set\n   * @returns {void}\n   */\n  protected setStorageValue(key: ProviderStorageKey, value: string): void {\n    const storage = this.getStorage();\n    storage[key] = value;\n    this.saveStorage(storage);\n  }\n\n  /**\n   * @summary Clears the storage\n   * @protected\n   * @returns {void}\n   */\n  protected clearStorage(): void {\n    this.saveStorage({});\n  }\n\n  /**\n   * @summary Gets the provider storage\n   * @returns {ProviderStorage} The provider storage\n   */\n  private getStorage(): ProviderStorage {\n    try {\n      return JSON.parse(\n        localStorage.getItem(LOCALSTORAGE_KEY) || '{}'\n      ) as ProviderStorage;\n    } catch (error) {\n      localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify({}));\n      throw new Error('Error parsing storage');\n    }\n  }\n\n  /**\n   * @summary Saves the provider storage\n   * @param {ProviderStorage} storage Provider storage object\n   */\n  private saveStorage(storage: ProviderStorage): void {\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(storage));\n  }\n}\n","/**\n * @summary Error class for GrinderyWalletProvider\n * @since 0.1.0\n * @extends Error\n */\nexport class ProviderError extends Error {\n  name: string = 'GrinderyWalletProviderError';\n  code?: number;\n  data?: unknown;\n\n  constructor(message: string, code?: number, data?: unknown) {\n    super(message);\n    this.code = code;\n    this.data = data;\n  }\n}\n","import { ProviderLocalStorage } from './LocalStorage';\nimport {\n  Address,\n  ChainId,\n  GrinderyRpcMethodName,\n  GrinderyRpcProviderRequestMethodName,\n  ProviderMethods,\n  ProviderRequestResult,\n  RequestArguments,\n  RequestArgumentsParams,\n  RequestToken,\n} from '../types';\nimport { ProviderError } from './ProviderError';\nimport {\n  GrinderyRpcMethodNames,\n  ProviderEvents,\n  ProviderStorageKeys,\n} from '../enums';\n\n/**\n * @summary The provider base class\n * @since 0.1.0\n * @extends ProviderLocalStorage\n */\nexport class ProviderBase extends ProviderLocalStorage {\n  constructor() {\n    super();\n\n    this.injectProvider();\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return !!this.chainId;\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return (\n      this.isConnected() &&\n      !!this.getStorageValue(ProviderStorageKeys.sessionId)\n    );\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet pairing is in progress (pending).\n   */\n  public isWalletConnectionPending(): boolean {\n    return (\n      this.isConnected() &&\n      !!this.getStorageValue(ProviderStorageKeys.pairingToken)\n    );\n  }\n\n  /**\n   * @summary Gets the connected chain ID in hex format\n   * @public\n   * @returns {ChainId} The chain ID in hex format\n   */\n  public getChain(): ChainId {\n    return `0x${parseFloat(this.chainId.split(':')[1]).toString(16)}`;\n  }\n\n  /**\n   * @summary Gets the connected user's wallet address\n   * @public\n   * @returns {Address} The ethereum wallet address\n   */\n  public getAddress(): Address {\n    return this.accounts[0] || '';\n  }\n\n  /**\n   * @summary Sends a request to the provider\n   * @public\n   * @param {RequestArguments} args Request arguments\n   * @param {string} args.method The method name\n   * @param {RequestArgumentsParams} args.params The method parameters\n   * @returns {T} The result of the request\n   */\n  public async request<T>({ method, params }: RequestArguments): Promise<T> {\n    if (!this.chainId) {\n      this.emit(\n        ProviderEvents.disconnect,\n        new ProviderError('Disconnected', 4900)\n      );\n      throw new ProviderError('Disconnected', 4900);\n    }\n    if (!this.methods) {\n      throw new ProviderError('Unsupported Method', 4200);\n    }\n    if (!this.methods[method]) {\n      throw new ProviderError('Unsupported Method', 4200);\n    }\n\n    try {\n      if (this.methods[method].sessionRequired && !this.isWalletConnected()) {\n        throw new ProviderError('Unauthorized', 4900);\n      }\n\n      return (await this.methods[method].execute(params)) as T;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API and waits for the result.\n   * @public\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  public async sendAndWaitGrinderyRpcProviderRequest<T>(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[],\n    timeout?: number\n  ): Promise<T> {\n    const request = await this.sendGrinderyRpcProviderRequest(method, params);\n    return await this.waitGrinderyRpcProviderRequest(\n      request.requestToken,\n      timeout\n    );\n  }\n\n  /**\n   * @summary The application ID.\n   * @protected\n   */\n  protected appId: string = document.title || 'Grindery Wallet Provider';\n\n  /**\n   * @summary The chain ID in CAIP-2 format; e.g. \"eip155:1\".\n   * @protected\n   */\n  protected chainId: ChainId = 'eip155:137';\n\n  /**\n   * @summary The list of supported provider methods.\n   * @protected\n   */\n  protected methods?: ProviderMethods;\n\n  /**\n   * @summary The user's wallet addresses list.\n   * @protected\n   */\n  protected accounts: Address[] = [];\n\n  /**\n   * @summary Registers the provider methods.\n   * @protected\n   * @param {ProviderMethods} methods A map of supported provider methods.\n   * @returns {void}\n   */\n  protected registerProviderMethods(methods: ProviderMethods): void {\n    this.methods = methods;\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API.\n   * @protected\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @returns {ProviderRequestResult} The request token to use in the `waitGrinderyRpcProviderRequest` method\n   */\n  protected async sendGrinderyRpcProviderRequest(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[]\n  ): Promise<ProviderRequestResult> {\n    if (!this.getStorageValue(ProviderStorageKeys.sessionId)) {\n      throw new ProviderError('Unauthorized', 4900);\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<ProviderRequestResult>(\n        GrinderyRpcMethodNames.checkout_request,\n        {\n          sessionId: this.getStorageValue(ProviderStorageKeys.sessionId),\n          scope: this.chainId,\n          request: {\n            method,\n            params,\n          },\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Waits for the result of the provider request.\n   * @protected\n   * @param {RequestToken} requestToken A token to identify provider request. Recieved in the results of `sendGrinderyRpcProviderRequest` method.\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  protected async waitGrinderyRpcProviderRequest<T>(\n    requestToken: RequestToken,\n    timeout?: number\n  ): Promise<T> {\n    if (!this.getStorageValue(ProviderStorageKeys.sessionId)) {\n      throw new ProviderError('Unauthorized', 4900);\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<T>(\n        GrinderyRpcMethodNames.checkout_waitForRequestResult,\n        {\n          requestToken,\n          timeout,\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a request to the Grindery Walletconnect RPC API.\n   * @protected\n   * @param {GrinderyRpcMethodName} method Request method name\n   * @param {RequestArgumentsParams} params Request parameters\n   * @returns {T} The result of the request\n   */\n  protected async sendGrinderyRpcApiRequest<T>(\n    method: GrinderyRpcMethodName,\n    params?: RequestArgumentsParams\n  ): Promise<T> {\n    try {\n      const response = await fetch('https://walletconnect-api.grindery.com', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method,\n          params: params || [],\n        }),\n      });\n      const data = await response.json();\n      if (data.error) {\n        throw new ProviderError(data.error.message, data.error.code);\n      }\n      if (!data.result) {\n        throw new ProviderError('No result', 4900);\n      }\n      return data.result;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Creates a provider error from an unknown error\n   * @protected\n   * @param {unknown} error Optional. Error object.\n   * @returns {ProviderError} The provider error\n   */\n  protected createProviderRpcError(error?: unknown): ProviderError {\n    let errorResponse: ProviderError;\n    if (error instanceof ProviderError) {\n      errorResponse = new ProviderError(error.message || 'Unknown error');\n      errorResponse.code = error.code || 4900;\n      errorResponse.data = error.data;\n    } else if (error instanceof Error) {\n      errorResponse = new ProviderError(error.message || 'Unknown error');\n      errorResponse.code = 4900;\n    } else {\n      errorResponse = new ProviderError('Unknown error');\n      errorResponse.code = 4900;\n    }\n    return errorResponse;\n  }\n\n  /**\n   * @summary Injects the provider into the window object\n   * @private\n   * @returns {void}\n   */\n  private injectProvider(): void {\n    if (!window.ethereum) {\n      window.ethereum = this;\n    } else {\n      if (\n        window.ethereum.providers &&\n        Array.isArray(window.ethereum.providers)\n      ) {\n        window.ethereum.providers.push(this);\n      } else {\n        window.ethereum.providers = [window.ethereum, this];\n      }\n    }\n  }\n}\n","import {\n  GrinderyRpcMethodNames,\n  GrinderyRpcProviderRequestMethodNames,\n  ProviderStorageKeys,\n} from '../enums';\nimport {\n  ProviderInterface,\n  ProviderPairingResult,\n  ProviderRequestPairingResult,\n  RequestArgumentsParams,\n} from '../types';\nimport { ProviderBase } from './ProviderBase';\nimport { ProviderError } from './ProviderError';\n\n/**\n * @summary The Grindery Wallet Ethereum Injected Provider Class.\n * @extends ProviderBase\n * @implements ProviderInterface\n */\nexport class GrinderyWalletProvider extends ProviderBase\n  implements ProviderInterface {\n  /**\n   * @summary Indicates that the provider is a Grindery Wallet.\n   */\n  public readonly isGrinderyWallet: boolean = true;\n\n  constructor() {\n    super();\n\n    this.registerProviderMethods({\n      eth_requestAccounts: {\n        sessionRequired: false,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          if (this.isWalletConnected()) {\n            try {\n              const accounts = await this.request<string[]>({\n                method: GrinderyRpcProviderRequestMethodNames.eth_accounts,\n                params: params || [],\n              });\n              this.accounts = accounts;\n              this.emit('accountsChanged', { accounts });\n              return accounts;\n            } catch (error) {\n              this.setStorageValue(ProviderStorageKeys.sessionId, '');\n              // skip failed request and continue with pairing\n            }\n          }\n          if (this.isWalletConnectionPending()) {\n            try {\n              const pairResult = await this.sendGrinderyRpcApiRequest<\n                ProviderPairingResult\n              >(GrinderyRpcMethodNames.checkout_waitForPairingResult, {\n                pairingToken: this.getStorageValue(\n                  ProviderStorageKeys.pairingToken\n                ),\n              });\n\n              this.clearStorage();\n              this.setStorageValue(\n                ProviderStorageKeys.sessionId,\n                pairResult.session.sessionId\n              );\n\n              if (!pairResult.session.sessionId) {\n                throw new ProviderError('Pairing failed', 4900);\n              }\n\n              const accounts = (\n                pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n              ).map(account =>\n                account.includes(':') ? account.split(':')[2] || '' : account\n              );\n              this.accounts = accounts;\n              this.emit('accountsChanged', { accounts });\n              return [];\n            } catch (error) {\n              this.clearStorage();\n              // skip failed request and continue with pairing\n            }\n          }\n          try {\n            const result = await this.sendGrinderyRpcApiRequest<\n              ProviderRequestPairingResult\n            >(GrinderyRpcMethodNames.checkout_requestPairing, {\n              appId: this.appId,\n            });\n\n            if (!result.pairingToken || !result.connectUrl) {\n              throw new ProviderError('Pairing failed', 4900);\n            }\n\n            this.setStorageValue(\n              ProviderStorageKeys.pairingToken,\n              result.pairingToken\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.connectUrl,\n              result.connectUrl\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.connectUrlBrowser,\n              result.connectUrlBrowser\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.shortToken,\n              result.shortToken\n            );\n            this.emit('pair', {\n              shortToken: result.shortToken,\n              connectUrl: result.connectUrl,\n              connectUrlBrowser: result.connectUrlBrowser,\n            });\n            const pairResult = await this.sendGrinderyRpcApiRequest<\n              ProviderPairingResult\n            >(GrinderyRpcMethodNames.checkout_waitForPairingResult, {\n              pairingToken: result.pairingToken,\n            });\n\n            this.setStorageValue(\n              ProviderStorageKeys.sessionId,\n              pairResult.session.sessionId\n            );\n\n            if (!pairResult.session.sessionId) {\n              throw new ProviderError('Pairing failed', 4900);\n            }\n            this.setStorageValue(ProviderStorageKeys.pairingToken, '');\n            this.setStorageValue(ProviderStorageKeys.connectUrl, '');\n            this.setStorageValue(ProviderStorageKeys.connectUrlBrowser, '');\n            this.setStorageValue(ProviderStorageKeys.shortToken, '');\n            const accounts = (\n              pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n            ).map(account =>\n              account.includes(':') ? account.split(':')[2] || '' : account\n            );\n            this.accounts = accounts;\n            this.emit('accountsChanged', { accounts });\n            return accounts;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.eth_accounts]: {\n        sessionRequired: true,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          try {\n            const accounts = await this.sendAndWaitGrinderyRpcProviderRequest<\n              string[]\n            >(\n              GrinderyRpcProviderRequestMethodNames.eth_accounts,\n              params ? (Array.isArray(params) ? params : [params]) : []\n            );\n            this.accounts = accounts;\n            this.emit('accountsChanged', { accounts });\n            return accounts;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.eth_sendTransaction]: {\n        sessionRequired: true,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest<string[]>(\n            GrinderyRpcProviderRequestMethodNames.eth_sendTransaction,\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.personal_sign]: {\n        sessionRequired: true,\n        execute: async (\n          params?: Partial<RequestArgumentsParams>\n        ): Promise<string> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest(\n            GrinderyRpcProviderRequestMethodNames.personal_sign,\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n    });\n\n    window.addEventListener('load', () => {\n      this.emit('connect', { chainId: this.getChain() });\n      this.restorePairing();\n      this.restoreSession();\n    });\n  }\n\n  /**\n   * @summary Restores the pairing process if pairing token is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restorePairing(): Promise<void> {\n    const pairingToken = this.getStorageValue(ProviderStorageKeys.pairingToken);\n    const sessionId = this.getStorageValue(ProviderStorageKeys.sessionId);\n    if (pairingToken && !sessionId) {\n      try {\n        const pairResult = await this.sendGrinderyRpcApiRequest<\n          ProviderPairingResult\n        >(GrinderyRpcMethodNames.checkout_waitForPairingResult, {\n          pairingToken,\n        });\n\n        this.clearStorage();\n        this.setStorageValue(\n          ProviderStorageKeys.sessionId,\n          pairResult.session.sessionId\n        );\n\n        if (!pairResult.session.sessionId) {\n          throw new ProviderError('Pairing failed', 4900);\n        }\n\n        const accounts = (\n          pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n        ).map(account =>\n          account.includes(':') ? account.split(':')[2] || '' : account\n        );\n        this.accounts = accounts;\n        this.emit('accountsChanged', { accounts });\n      } catch (error) {\n        this.accounts = [];\n        this.clearStorage();\n      }\n    }\n  }\n\n  /**\n   * @summary Restores the session if session Id is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restoreSession(): Promise<void> {\n    const pairingToken = this.getStorageValue(ProviderStorageKeys.pairingToken);\n    const sessionId = this.getStorageValue(ProviderStorageKeys.sessionId);\n    if (sessionId && !pairingToken) {\n      try {\n        await this.request<string[]>({\n          method: GrinderyRpcProviderRequestMethodNames.eth_requestAccounts,\n        });\n      } catch (error) {\n        this.accounts = [];\n        this.clearStorage();\n      }\n    }\n  }\n}\n","import {\n  GrinderyRpcProviderRequestMethodNames,\n  ProviderEvents,\n} from '../enums';\nimport { ProviderEvent, ProviderRequestPairingResult } from '../types';\nimport { GrinderyWalletProvider } from './GrinderyWalletProvider';\n\n/**\n * @summary The Grindery Wallet SDK class\n * @since 0.1.0\n */\nexport class GrinderyWalletSDK {\n  /**\n   * @summary The provider instance\n   * @public\n   */\n  public provider: GrinderyWalletProvider;\n\n  constructor() {\n    this.provider = this.getWeb3Provider();\n    this.provider.on(ProviderEvents.pair, this.handlePairing);\n  }\n\n  /**\n   * @summary Checks if the provider is connected to the server\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return this.provider.isConnected();\n  }\n\n  /**\n   * @summary Checks if the provider is connected to the server and the Grindery Wallet\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return this.provider.isWalletConnected();\n  }\n\n  /**\n   * @summary Initiate connection to the Grindery Wallet\n   * @public\n   * @returns {Promise<string[]>} The array of ethereum addresses\n   * @since 0.1.0\n   */\n  public async connect(): Promise<string[]> {\n    return await this.provider.request({\n      method: GrinderyRpcProviderRequestMethodNames.eth_requestAccounts,\n    });\n  }\n\n  /**\n   * @summary Sends a transaction request to the Grindery Wallet\n   * @public\n   * @since 0.1.0\n   * @param {object} params The transaction parameters\n   * @param {string} params.to The recipient address\n   * @param {string} [params.value] The amount to send in wei\n   * @param {string} [params.data] The data to send\n   * @returns {Promise<string[]>} Array with transaction hash string\n   */\n  public async sendTransaction(params: {\n    to: string;\n    value?: string;\n    data?: string;\n  }): Promise<string[]> {\n    return await this.provider.request<string[]>({\n      method: GrinderyRpcProviderRequestMethodNames.eth_sendTransaction,\n      params: [params],\n    });\n  }\n\n  /**\n   * @summary Sends a personal signature request to the Grindery Wallet\n   * @public\n   * @since 0.1.0\n   * @param {string} message The message to sign\n   * @returns {Promise<string>} Signature string\n   */\n  public async signMessage(message: string): Promise<string> {\n    return await this.provider.request<string>({\n      method: GrinderyRpcProviderRequestMethodNames.personal_sign,\n      params: [message, this.provider.getAddress()],\n    });\n  }\n\n  /**\n   * @summary Adds a listener to the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public on(event: ProviderEvent, callback: Function) {\n    this.provider.on(event, callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public removeListener(event: ProviderEvent, callback: Function) {\n    this.provider.removeListener(event, callback);\n    return this;\n  }\n\n  /**\n   * @summary Gets the Grindery Wallet ethereum provider\n   * @returns {GrinderyWalletProvider} The Grindery Wallet ethereum provider\n   */\n  private getWeb3Provider(): GrinderyWalletProvider {\n    let provider = window.ethereum?.providers?.find(\n      (provider: GrinderyWalletProvider | unknown) =>\n        provider instanceof GrinderyWalletProvider && provider.isGrinderyWallet\n    );\n    if (\n      !provider &&\n      window.ethereum instanceof GrinderyWalletProvider &&\n      window.ethereum.isGrinderyWallet\n    ) {\n      provider = window.ethereum;\n    }\n    if (!provider) {\n      provider = new GrinderyWalletProvider();\n    }\n    return provider;\n  }\n\n  /**\n   * @summary Handles the pairing request, by opening the Grindery Wallet\n   * @private\n   * @param ProviderRequestPairingResult\n   * @returns {void}\n   */\n  private handlePairing({\n    shortToken,\n    connectUrlBrowser,\n  }: ProviderRequestPairingResult): void {\n    const WebApp = window.Telegram?.WebApp;\n    const redirectUrl = `https://walletconnect.grindery.com/connect/wc?uri=${shortToken}`;\n    if (\n      WebApp &&\n      WebApp.openTelegramLink &&\n      WebApp.platform &&\n      WebApp.platform !== 'unknown'\n    ) {\n      WebApp.openTelegramLink(connectUrlBrowser);\n      if (WebApp.close) {\n        window.Telegram.WebApp.close();\n      }\n    } else {\n      window.open(redirectUrl, '_blank');\n    }\n  }\n}\n","import { GrinderyWalletSDK } from './classes/GrinderyWalletSDK';\n\ndeclare global {\n  interface Window {\n    Telegram?: any;\n    ethereum?: any;\n    Grindery?: {\n      WalletSDK?: GrinderyWalletSDK;\n    };\n  }\n}\n\nfunction init() {\n  if (\n    !window.Grindery?.WalletSDK ||\n    !(window.Grindery.WalletSDK instanceof GrinderyWalletSDK)\n  ) {\n    window.Grindery = {\n      ...(window.Grindery || {}),\n      WalletSDK: new GrinderyWalletSDK(),\n    };\n  }\n}\n\n// Initialize the SDK when the page is loaded\ninit();\n"],"names":["ProviderEvents","ProviderStorageKeys","GrinderyRpcMethodNames","GrinderyRpcProviderRequestMethodNames","EventEmitter","events","Map","_proto","prototype","on","event","callback","has","set","get","push","removeListener","callbacks","filter","cb","emit","data","Array","_len","_key","arguments","console","log","forEach","apply","LOCALSTORAGE_KEY","ProviderLocalStorage","_EventEmitter","_inheritsLoose","getStorageValue","key","value","getStorage","setStorageValue","storage","saveStorage","clearStorage","JSON","parse","localStorage","getItem","error","setItem","stringify","Error","ProviderError","_Error","message","code","_this","call","_wrapNativeSuper","ProviderBase","_ProviderLocalStorage","document","title","injectProvider","isConnected","chainId","isWalletConnected","sessionId","isWalletConnectionPending","pairingToken","getChain","parseFloat","split","toString","getAddress","accounts","request","_request","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","method","params","wrap","_callee$","_context","prev","next","disconnect","methods","sessionRequired","execute","abrupt","sent","t0","createProviderRpcError","stop","_x","sendAndWaitGrinderyRpcProviderRequest","_sendAndWaitGrinderyRpcProviderRequest","_callee2","timeout","_callee2$","_context2","sendGrinderyRpcProviderRequest","waitGrinderyRpcProviderRequest","requestToken","_x2","_x3","_x4","registerProviderMethods","_sendGrinderyRpcProviderRequest","_callee3","_callee3$","_context3","sendGrinderyRpcApiRequest","checkout_request","scope","_x5","_x6","_waitGrinderyRpcProviderRequest","_callee4","_callee4$","_context4","checkout_waitForRequestResult","_x7","_x8","_sendGrinderyRpcApiRequest","_callee5","response","_callee5$","_context5","fetch","headers","body","jsonrpc","id","json","result","_x9","_x10","errorResponse","window","ethereum","providers","isArray","GrinderyWalletProvider","_ProviderBase","_this$registerProvide","eth_requestAccounts","_execute","_pairResult$session","pairResult","_accounts","_pairResult$session2","_pairResult","_accounts2","eth_accounts","checkout_waitForPairingResult","session","namespaces","map","account","includes","t1","checkout_requestPairing","appId","connectUrl","connectUrlBrowser","shortToken","t2","_execute2","eth_sendTransaction","_execute3","personal_sign","_execute4","addEventListener","restorePairing","restoreSession","_restorePairing","_pairResult$session3","_restoreSession","_callee6","_callee6$","_context6","GrinderyWalletSDK","provider","getWeb3Provider","pair","handlePairing","connect","_connect","sendTransaction","_sendTransaction","signMessage","_signMessage","_window$ethereum","find","isGrinderyWallet","WebApp","_window$Telegram","Telegram","redirectUrl","openTelegramLink","platform","close","open","init","_window$Grindery","Grindery","WalletSDK","_extends"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAYA,cAOX;AAPD,WAAYA,cAAc;EACxBA,qDAAmC;EACnCA,+BAAa;EACbA,qCAAmB;EACnBA,2CAAyB;EACzBA,+CAA6B;EAC7BA,qCAAmB;AACrB,CAAC,EAPWA,cAAc,KAAdA,cAAc;AAS1B,IAAYC,mBAMX;AAND,WAAYA,mBAAmB;EAC7BA,oDAA6B;EAC7BA,8CAAuB;EACvBA,gDAAyB;EACzBA,8DAAuC;EACvCA,gDAAyB;AAC3B,CAAC,EANWA,mBAAmB,KAAnBA,mBAAmB;AAQ/B,IAAYC,sBAKX;AALD,WAAYA,sBAAsB;EAChCA,6EAAmD;EACnDA,yFAA+D;EAC/DA,+DAAqC;EACrCA,yFAA+D;AACjE,CAAC,EALWA,sBAAsB,KAAtBA,sBAAsB;AAOlC,IAAYC,qCAKX;AALD,WAAYA,qCAAqC;EAC/CA,oFAA2C;EAC3CA,sEAA6B;EAC7BA,wEAA+B;EAC/BA,oFAA2C;AAC7C,CAAC,EALWA,qCAAqC,KAArCA,qCAAqC;;ACtBjD;;;;AAIA,IAAaC,YAAY;EAOvB,SAAAA;IACE,IAAI,CAACC,MAAM,GAAG,IAAIC,GAAG,EAAE;;;;;;;;;EAGzB,IAAAC,MAAA,GAAAH,YAAA,CAAAI,SAAA;EAAAD,MAAA,CAOOE,EAAE,GAAF,SAAAA,GAAGC,KAAoB,EAAEC,QAAkB;IAChD,IAAI,CAAC,IAAI,CAACN,MAAM,CAACO,GAAG,CAACF,KAAK,CAAC,EAAE;MAC3B,IAAI,CAACL,MAAM,CAACQ,GAAG,CAACH,KAAK,EAAE,EAAE,CAAC;;IAE5B,IAAI,CAACL,MAAM,CAACS,GAAG,CAACJ,KAAK,CAAE,CAACK,IAAI,CAACJ,QAAQ,CAAC;IACtC,OAAO,IAAI;;;;;;;;;EAGbJ,MAAA,CAOOS,cAAc,GAAd,SAAAA,eAAeN,KAAoB,EAAEC,QAAkB;IAC5D,IAAI,IAAI,CAACN,MAAM,CAACO,GAAG,CAACF,KAAK,CAAC,EAAE;MAC1B,IAAMO,SAAS,GAAG,IAAI,CAACZ,MAAM,CAACS,GAAG,CAACJ,KAAK,CAAE,CAACQ,MAAM,CAAC,UAAAC,EAAE;QAAA,OAAIA,EAAE,KAAKR,QAAQ;QAAC;MACvE,IAAI,CAACN,MAAM,CAACQ,GAAG,CAACH,KAAK,EAAEO,SAAS,CAAC;;IAEnC,OAAO,IAAI;;;;;;;;;EAGbV,MAAA,CAOUa,IAAI,GAAJ,SAAAA,KAAKV,KAAoB;sCAAKW,IAAW,OAAAC,KAAA,CAAAC,IAAA,OAAAA,IAAA,WAAAC,IAAA,MAAAA,IAAA,GAAAD,IAAA,EAAAC,IAAA;MAAXH,IAAW,CAAAG,IAAA,QAAAC,SAAA,CAAAD,IAAA;;IACjD,IAAI,IAAI,CAACnB,MAAM,CAACO,GAAG,CAACF,KAAK,CAAC,EAAE;MAC1BgB,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEjB,KAAK,EAAEW,IAAI,CAAC;MACzD,IAAI,CAAChB,MAAM,CAACS,GAAG,CAACJ,KAAK,CAAE,CAACkB,OAAO,CAAC,UAAAjB,QAAQ;QACtCA,QAAQ,CAAAkB,KAAA,SAAIR,IAAI,CAAC;OAClB,CAAC;;IAEJ,OAAO,IAAI;GACZ;EAAA,OAAAjB,YAAA;AAAA;;AC3DH,IAAM0B,gBAAgB,GAAG,wBAAwB;AAEjD;;;;;AAKA,IAAaC,oBAAqB,0BAAAC,aAAA;EAAA,SAAAD;IAAA,OAAAC,aAAA,CAAAH,KAAA,OAAAJ,SAAA;;EAAAQ,cAAA,CAAAF,oBAAA,EAAAC,aAAA;EAAA,IAAAzB,MAAA,GAAAwB,oBAAA,CAAAvB,SAAA;;;;;;;EAChCD,MAAA,CAMU2B,eAAe,GAAf,SAAAA,gBAAgBC,GAAuB;IAC/C,IAAMC,KAAK,GAAG,IAAI,CAACC,UAAU,EAAE,CAACF,GAAG,CAAC,IAAI,EAAE;IAC1C,OAAOC,KAAK;;;;;;;;;EAGd7B,MAAA,CAOU+B,eAAe,GAAf,SAAAA,gBAAgBH,GAAuB,EAAEC,KAAa;IAC9D,IAAMG,OAAO,GAAG,IAAI,CAACF,UAAU,EAAE;IACjCE,OAAO,CAACJ,GAAG,CAAC,GAAGC,KAAK;IACpB,IAAI,CAACI,WAAW,CAACD,OAAO,CAAC;;;;;;;EAG3BhC,MAAA,CAKUkC,YAAY,GAAZ,SAAAA;IACR,IAAI,CAACD,WAAW,CAAC,EAAE,CAAC;;;;;;EAGtBjC,MAAA,CAIQ8B,UAAU,GAAV,SAAAA;IACN,IAAI;MACF,OAAOK,IAAI,CAACC,KAAK,CACfC,YAAY,CAACC,OAAO,CAACf,gBAAgB,CAAC,IAAI,IAAI,CAC5B;KACrB,CAAC,OAAOgB,KAAK,EAAE;MACdF,YAAY,CAACG,OAAO,CAACjB,gBAAgB,EAAEY,IAAI,CAACM,SAAS,CAAC,EAAE,CAAC,CAAC;MAC1D,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;;;;;;;EAI5C1C,MAAA,CAIQiC,WAAW,GAAX,SAAAA,YAAYD,OAAwB;IAC1CK,YAAY,CAACG,OAAO,CAACjB,gBAAgB,EAAEY,IAAI,CAACM,SAAS,CAACT,OAAO,CAAC,CAAC;GAChE;EAAA,OAAAR,oBAAA;AAAA,EAvDuC3B,YAAY;;ACVtD;;;;;AAKA,IAAa8C,aAAc,0BAAAC,MAAA;EAKzB,SAAAD,cAAYE,OAAe,EAAEC,IAAa,EAAEhC,IAAc;;IACxDiC,KAAA,GAAAH,MAAA,CAAAI,IAAA,OAAMH,OAAO,CAAC;IALhBE,KAAA,KAAI,GAAW,6BAA6B;IAM1CA,KAAA,CAAKD,IAAI,GAAGA,IAAI;IAChBC,KAAA,CAAKjC,IAAI,GAAGA,IAAI;IAAC,OAAAiC,KAAA;;EAClBrB,cAAA,CAAAiB,aAAA,EAAAC,MAAA;EAAA,OAAAD,aAAA;AAAA,gBAAAM,gBAAA,CATgCP,KAAK;;ACcxC;;;;;AAKA,IAAaQ,YAAa,0BAAAC,qBAAA;EACxB,SAAAD;;IACEH,KAAA,GAAAI,qBAAA,CAAAH,IAAA,MAAO;;;;;IA+GCD,KAAA,MAAK,GAAWK,QAAQ,CAACC,KAAK,IAAI,0BAA0B;;;;;IAM5DN,KAAA,QAAO,GAAY,YAAY;;;;;IAY/BA,KAAA,SAAQ,GAAc,EAAE;IA/HhCA,KAAA,CAAKO,cAAc,EAAE;IAAC,OAAAP,KAAA;;;;;;EAGxBrB,cAAA,CAAAwB,YAAA,EAAAC,qBAAA;EAAA,IAAAnD,MAAA,GAAAkD,YAAA,CAAAjD,SAAA;EAAAD,MAAA,CAIOuD,WAAW,GAAX,SAAAA;IACL,OAAO,CAAC,CAAC,IAAI,CAACC,OAAO;;;;;;EAGvBxD,MAAA,CAIOyD,iBAAiB,GAAjB,SAAAA;IACL,OACE,IAAI,CAACF,WAAW,EAAE,IAClB,CAAC,CAAC,IAAI,CAAC5B,eAAe,CAACjC,mBAAmB,CAACgE,SAAS,CAAC;;;;;;EAIzD1D,MAAA,CAIO2D,yBAAyB,GAAzB,SAAAA;IACL,OACE,IAAI,CAACJ,WAAW,EAAE,IAClB,CAAC,CAAC,IAAI,CAAC5B,eAAe,CAACjC,mBAAmB,CAACkE,YAAY,CAAC;;;;;;;EAI5D5D,MAAA,CAKO6D,QAAQ,GAAR,SAAAA;IACL,cAAYC,UAAU,CAAC,IAAI,CAACN,OAAO,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC;;;;;;;EAGjEhE,MAAA,CAKOiE,UAAU,GAAV,SAAAA;IACL,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC,IAAI,EAAE;;;;;;;;;;EAG/BlE,MAAA,CAQamE,OAAO;;EAAA;IAAA,IAAAC,QAAA,gBAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAb,SAAAC,QAAAC,IAAA;MAAA,IAAAC,MAAA,EAAAC,MAAA;MAAA,OAAAL,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAmBN,MAAM,GAAAD,IAAA,CAANC,MAAM,EAAEC,MAAM,GAAAF,IAAA,CAANE,MAAM;YAAA,IACjC,IAAI,CAACnB,OAAO;cAAAsB,QAAA,CAAAE,IAAA;cAAA;;YACf,IAAI,CAACnE,IAAI,CACPpB,cAAc,CAACwF,UAAU,EACzB,IAAItC,aAAa,CAAC,cAAc,EAAE,IAAI,CAAC,CACxC;YAAC,MACI,IAAIA,aAAa,CAAC,cAAc,EAAE,IAAI,CAAC;UAAA;YAAA,IAE1C,IAAI,CAACuC,OAAO;cAAAJ,QAAA,CAAAE,IAAA;cAAA;;YAAA,MACT,IAAIrC,aAAa,CAAC,oBAAoB,EAAE,IAAI,CAAC;UAAA;YAAA,IAEhD,IAAI,CAACuC,OAAO,CAACR,MAAM,CAAC;cAAAI,QAAA,CAAAE,IAAA;cAAA;;YAAA,MACjB,IAAIrC,aAAa,CAAC,oBAAoB,EAAE,IAAI,CAAC;UAAA;YAAAmC,QAAA,CAAAC,IAAA;YAAA,MAI/C,IAAI,CAACG,OAAO,CAACR,MAAM,CAAC,CAACS,eAAe,IAAI,CAAC,IAAI,CAAC1B,iBAAiB,EAAE;cAAAqB,QAAA,CAAAE,IAAA;cAAA;;YAAA,MAC7D,IAAIrC,aAAa,CAAC,cAAc,EAAE,IAAI,CAAC;UAAA;YAAAmC,QAAA,CAAAE,IAAA;YAAA,OAGjC,IAAI,CAACE,OAAO,CAACR,MAAM,CAAC,CAACU,OAAO,CAACT,MAAM,CAAC;UAAA;YAAA,OAAAG,QAAA,CAAAO,MAAA,WAAAP,QAAA,CAAAQ,IAAA;UAAA;YAAAR,QAAA,CAAAC,IAAA;YAAAD,QAAA,CAAAS,EAAA,GAAAT,QAAA;YAAA,MAE5C,IAAI,CAACU,sBAAsB,CAAAV,QAAA,CAAAS,EAAM,CAAC;UAAA;UAAA;YAAA,OAAAT,QAAA,CAAAW,IAAA;;SAAAjB,OAAA;KAE3C;IAAA,SAAAL,QAAAuB,EAAA;MAAA,OAAAtB,QAAA,CAAA9C,KAAA,OAAAJ,SAAA;;IAAA,OAAAiD,OAAA;;;;;;;;;;;EAEDnE,MAAA,CAQa2F,qCAAqC;;EAAA;IAAA,IAAAC,sCAAA,gBAAAvB,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAA3C,SAAAsB,SACLnB,MAA4C,EAC5CC,MAA2B,EAC3BmB,OAAgB;MAAA,IAAA3B,OAAA;MAAA,OAAAG,mBAAA,GAAAM,IAAA,UAAAmB,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAAjB,IAAA,GAAAiB,SAAA,CAAAhB,IAAA;UAAA;YAAAgB,SAAA,CAAAhB,IAAA;YAAA,OAEM,IAAI,CAACiB,8BAA8B,CAACvB,MAAM,EAAEC,MAAM,CAAC;UAAA;YAAnER,OAAO,GAAA6B,SAAA,CAAAV,IAAA;YAAAU,SAAA,CAAAhB,IAAA;YAAA,OACA,IAAI,CAACkB,8BAA8B,CAC9C/B,OAAO,CAACgC,YAAY,EACpBL,OAAO,CACR;UAAA;YAAA,OAAAE,SAAA,CAAAX,MAAA,WAAAW,SAAA,CAAAV,IAAA;UAAA;UAAA;YAAA,OAAAU,SAAA,CAAAP,IAAA;;SAAAI,QAAA;KACF;IAAA,SAAAF,sCAAAS,GAAA,EAAAC,GAAA,EAAAC,GAAA;MAAA,OAAAV,sCAAA,CAAAtE,KAAA,OAAAJ,SAAA;;IAAA,OAAAyE,qCAAA;;;;;;;;;EA0BD3F,MAAA,CAMUuG,uBAAuB,GAAvB,SAAAA,wBAAwBrB,OAAwB;IACxD,IAAI,CAACA,OAAO,GAAGA,OAAO;;;;;;;;;EAGxBlF,MAAA,CAOgBiG,8BAA8B;;EAAA;IAAA,IAAAO,+BAAA,gBAAAnC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAApC,SAAAkC,SACR/B,MAA4C,EAC5CC,MAA2B;MAAA,OAAAL,mBAAA,GAAAM,IAAA,UAAA8B,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAA5B,IAAA,GAAA4B,SAAA,CAAA3B,IAAA;UAAA;YAAA,IAEtB,IAAI,CAACrD,eAAe,CAACjC,mBAAmB,CAACgE,SAAS,CAAC;cAAAiD,SAAA,CAAA3B,IAAA;cAAA;;YAAA,MAChD,IAAIrC,aAAa,CAAC,cAAc,EAAE,IAAI,CAAC;UAAA;YAAAgE,SAAA,CAAA5B,IAAA;YAAA4B,SAAA,CAAA3B,IAAA;YAAA,OAGhC,IAAI,CAAC4B,yBAAyB,CACzCjH,sBAAsB,CAACkH,gBAAgB,EACvC;cACEnD,SAAS,EAAE,IAAI,CAAC/B,eAAe,CAACjC,mBAAmB,CAACgE,SAAS,CAAC;cAC9DoD,KAAK,EAAE,IAAI,CAACtD,OAAO;cACnBW,OAAO,EAAE;gBACPO,MAAM,EAANA,MAAM;gBACNC,MAAM,EAANA;;aAEH,CACF;UAAA;YAAA,OAAAgC,SAAA,CAAAtB,MAAA,WAAAsB,SAAA,CAAArB,IAAA;UAAA;YAAAqB,SAAA,CAAA5B,IAAA;YAAA4B,SAAA,CAAApB,EAAA,GAAAoB,SAAA;YAAA,MAEK,IAAI,CAACnB,sBAAsB,CAAAmB,SAAA,CAAApB,EAAM,CAAC;UAAA;UAAA;YAAA,OAAAoB,SAAA,CAAAlB,IAAA;;SAAAgB,QAAA;KAE3C;IAAA,SAAAR,+BAAAc,GAAA,EAAAC,GAAA;MAAA,OAAAR,+BAAA,CAAAlF,KAAA,OAAAJ,SAAA;;IAAA,OAAA+E,8BAAA;;;;;;;;;;EAEDjG,MAAA,CAOgBkG,8BAA8B;;EAAA;IAAA,IAAAe,+BAAA,gBAAA5C,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAApC,SAAA2C,SACRf,YAA0B,EAC1BL,OAAgB;MAAA,OAAAxB,mBAAA,GAAAM,IAAA,UAAAuC,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAArC,IAAA,GAAAqC,SAAA,CAAApC,IAAA;UAAA;YAAA,IAEX,IAAI,CAACrD,eAAe,CAACjC,mBAAmB,CAACgE,SAAS,CAAC;cAAA0D,SAAA,CAAApC,IAAA;cAAA;;YAAA,MAChD,IAAIrC,aAAa,CAAC,cAAc,EAAE,IAAI,CAAC;UAAA;YAAAyE,SAAA,CAAArC,IAAA;YAAAqC,SAAA,CAAApC,IAAA;YAAA,OAGhC,IAAI,CAAC4B,yBAAyB,CACzCjH,sBAAsB,CAAC0H,6BAA6B,EACpD;cACElB,YAAY,EAAZA,YAAY;cACZL,OAAO,EAAPA;aACD,CACF;UAAA;YAAA,OAAAsB,SAAA,CAAA/B,MAAA,WAAA+B,SAAA,CAAA9B,IAAA;UAAA;YAAA8B,SAAA,CAAArC,IAAA;YAAAqC,SAAA,CAAA7B,EAAA,GAAA6B,SAAA;YAAA,MAEK,IAAI,CAAC5B,sBAAsB,CAAA4B,SAAA,CAAA7B,EAAM,CAAC;UAAA;UAAA;YAAA,OAAA6B,SAAA,CAAA3B,IAAA;;SAAAyB,QAAA;KAE3C;IAAA,SAAAhB,+BAAAoB,GAAA,EAAAC,GAAA;MAAA,OAAAN,+BAAA,CAAA3F,KAAA,OAAAJ,SAAA;;IAAA,OAAAgF,8BAAA;;;;;;;;;;EAEDlG,MAAA,CAOgB4G,yBAAyB;;EAAA;IAAA,IAAAY,0BAAA,gBAAAnD,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAA/B,SAAAkD,SACR/C,MAA6B,EAC7BC,MAA+B;MAAA,IAAA+C,QAAA,EAAA5G,IAAA;MAAA,OAAAwD,mBAAA,GAAAM,IAAA,UAAA+C,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAA7C,IAAA,GAAA6C,SAAA,CAAA5C,IAAA;UAAA;YAAA4C,SAAA,CAAA7C,IAAA;YAAA6C,SAAA,CAAA5C,IAAA;YAAA,OAGN6C,KAAK,CAAC,wCAAwC,EAAE;cACrEnD,MAAM,EAAE,MAAM;cACdoD,OAAO,EAAE;gBACP,cAAc,EAAE;eACjB;cACDC,IAAI,EAAE5F,IAAI,CAACM,SAAS,CAAC;gBACnBuF,OAAO,EAAE,KAAK;gBACdC,EAAE,EAAE,CAAC;gBACLvD,MAAM,EAANA,MAAM;gBACNC,MAAM,EAAEA,MAAM,IAAI;eACnB;aACF,CAAC;UAAA;YAXI+C,QAAQ,GAAAE,SAAA,CAAAtC,IAAA;YAAAsC,SAAA,CAAA5C,IAAA;YAAA,OAYK0C,QAAQ,CAACQ,IAAI,EAAE;UAAA;YAA5BpH,IAAI,GAAA8G,SAAA,CAAAtC,IAAA;YAAA,KACNxE,IAAI,CAACyB,KAAK;cAAAqF,SAAA,CAAA5C,IAAA;cAAA;;YAAA,MACN,IAAIrC,aAAa,CAAC7B,IAAI,CAACyB,KAAK,CAACM,OAAO,EAAE/B,IAAI,CAACyB,KAAK,CAACO,IAAI,CAAC;UAAA;YAAA,IAEzDhC,IAAI,CAACqH,MAAM;cAAAP,SAAA,CAAA5C,IAAA;cAAA;;YAAA,MACR,IAAIrC,aAAa,CAAC,WAAW,EAAE,IAAI,CAAC;UAAA;YAAA,OAAAiF,SAAA,CAAAvC,MAAA,WAErCvE,IAAI,CAACqH,MAAM;UAAA;YAAAP,SAAA,CAAA7C,IAAA;YAAA6C,SAAA,CAAArC,EAAA,GAAAqC,SAAA;YAAA,MAEZ,IAAI,CAACpC,sBAAsB,CAAAoC,SAAA,CAAArC,EAAM,CAAC;UAAA;UAAA;YAAA,OAAAqC,SAAA,CAAAnC,IAAA;;SAAAgC,QAAA;KAE3C;IAAA,SAAAb,0BAAAwB,GAAA,EAAAC,IAAA;MAAA,OAAAb,0BAAA,CAAAlG,KAAA,OAAAJ,SAAA;;IAAA,OAAA0F,yBAAA;;;;;;;;;EAED5G,MAAA,CAMUwF,sBAAsB,GAAtB,SAAAA,uBAAuBjD,KAAe;IAC9C,IAAI+F,aAA4B;IAChC,IAAI/F,KAAK,YAAYI,aAAa,EAAE;MAClC2F,aAAa,GAAG,IAAI3F,aAAa,CAACJ,KAAK,CAACM,OAAO,IAAI,eAAe,CAAC;MACnEyF,aAAa,CAACxF,IAAI,GAAGP,KAAK,CAACO,IAAI,IAAI,IAAI;MACvCwF,aAAa,CAACxH,IAAI,GAAGyB,KAAK,CAACzB,IAAI;KAChC,MAAM,IAAIyB,KAAK,YAAYG,KAAK,EAAE;MACjC4F,aAAa,GAAG,IAAI3F,aAAa,CAACJ,KAAK,CAACM,OAAO,IAAI,eAAe,CAAC;MACnEyF,aAAa,CAACxF,IAAI,GAAG,IAAI;KAC1B,MAAM;MACLwF,aAAa,GAAG,IAAI3F,aAAa,CAAC,eAAe,CAAC;MAClD2F,aAAa,CAACxF,IAAI,GAAG,IAAI;;IAE3B,OAAOwF,aAAa;;;;;;;EAGtBtI,MAAA,CAKQsD,cAAc,GAAd,SAAAA;IACN,IAAI,CAACiF,MAAM,CAACC,QAAQ,EAAE;MACpBD,MAAM,CAACC,QAAQ,GAAG,IAAI;KACvB,MAAM;MACL,IACED,MAAM,CAACC,QAAQ,CAACC,SAAS,IACzB1H,KAAK,CAAC2H,OAAO,CAACH,MAAM,CAACC,QAAQ,CAACC,SAAS,CAAC,EACxC;QACAF,MAAM,CAACC,QAAQ,CAACC,SAAS,CAACjI,IAAI,CAAC,IAAI,CAAC;OACrC,MAAM;QACL+H,MAAM,CAACC,QAAQ,CAACC,SAAS,GAAG,CAACF,MAAM,CAACC,QAAQ,EAAE,IAAI,CAAC;;;GAGxD;EAAA,OAAAtF,YAAA;AAAA,EAtR+B1B,oBAAoB;;ACVtD;;;;;AAKA,IAAamH,sBAAuB,0BAAAC,aAAA;EAOlC,SAAAD;;;IACE5F,KAAA,GAAA6F,aAAA,CAAA5F,IAAA,MAAO;;;;IAHOD,KAAA,iBAAgB,GAAY,IAAI;IAK9CA,KAAA,CAAKwD,uBAAuB,EAAAsC,qBAAA;MAC1BC,mBAAmB,EAAE;QACnB3D,eAAe,EAAE,KAAK;QACtBC,OAAO;UAAA,IAAA2D,QAAA,GAAA1E,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAE,SAAAC,QAAOG,MAA+B;YAAA,IAAAT,QAAA,EAAA8E,mBAAA,EAAAC,UAAA,EAAAC,SAAA,EAAAC,oBAAA,EAAAhB,MAAA,EAAAiB,WAAA,EAAAC,UAAA;YAAA,OAAA/E,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA;cAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;gBAAA;kBAAA,KACzCjC,KAAA,CAAKU,iBAAiB,EAAE;oBAAAqB,QAAA,CAAAE,IAAA;oBAAA;;kBAAAF,QAAA,CAAAC,IAAA;kBAAAD,QAAA,CAAAE,IAAA;kBAAA,OAEDjC,KAAA,CAAKoB,OAAO,CAAW;oBAC5CO,MAAM,EAAE9E,qCAAqC,CAAC0J,YAAY;oBAC1D3E,MAAM,EAAEA,MAAM,IAAI;mBACnB,CAAC;gBAAA;kBAHIT,QAAQ,GAAAY,QAAA,CAAAQ,IAAA;kBAIdvC,KAAA,CAAKmB,QAAQ,GAAGA,QAAQ;kBACxBnB,KAAA,CAAKlC,IAAI,CAAC,iBAAiB,EAAE;oBAAEqD,QAAQ,EAARA;mBAAU,CAAC;kBAAC,OAAAY,QAAA,CAAAO,MAAA,WACpCnB,QAAQ;gBAAA;kBAAAY,QAAA,CAAAC,IAAA;kBAAAD,QAAA,CAAAS,EAAA,GAAAT,QAAA;kBAEf/B,KAAA,CAAKhB,eAAe,CAACrC,mBAAmB,CAACgE,SAAS,EAAE,EAAE,CAAC;;gBACvD;kBAAA,KAGAX,KAAA,CAAKY,yBAAyB,EAAE;oBAAAmB,QAAA,CAAAE,IAAA;oBAAA;;kBAAAF,QAAA,CAAAC,IAAA;kBAAAD,QAAA,CAAAE,IAAA;kBAAA,OAEPjC,KAAA,CAAK6D,yBAAyB,CAErDjH,sBAAsB,CAAC4J,6BAA6B,EAAE;oBACtD3F,YAAY,EAAEb,KAAA,CAAKpB,eAAe,CAChCjC,mBAAmB,CAACkE,YAAY;mBAEnC,CAAC;gBAAA;kBANIqF,UAAU,GAAAnE,QAAA,CAAAQ,IAAA;kBAQhBvC,KAAA,CAAKb,YAAY,EAAE;kBACnBa,KAAA,CAAKhB,eAAe,CAClBrC,mBAAmB,CAACgE,SAAS,EAC7BuF,UAAU,CAACO,OAAO,CAAC9F,SAAS,CAC7B;kBAAC,IAEGuF,UAAU,CAACO,OAAO,CAAC9F,SAAS;oBAAAoB,QAAA,CAAAE,IAAA;oBAAA;;kBAAA,MACzB,IAAIrC,aAAa,CAAC,gBAAgB,EAAE,IAAI,CAAC;gBAAA;kBAG3CuB,SAAQ,GAAG,CACf,EAAA8E,mBAAA,GAAAC,UAAU,CAACO,OAAO,cAAAR,mBAAA,GAAlBA,mBAAA,CAAoBS,UAAU,cAAAT,mBAAA,GAA9BA,mBAAA,UAA0C,qBAA1CA,mBAAA,CAA4C9E,QAAQ,KAAI,EAAE,EAC1DwF,GAAG,CAAC,UAAAC,OAAO;oBAAA,OACXA,OAAO,CAACC,QAAQ,CAAC,GAAG,CAAC,GAAGD,OAAO,CAAC5F,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG4F,OAAO;oBAC9D;kBACD5G,KAAA,CAAKmB,QAAQ,GAAGA,SAAQ;kBACxBnB,KAAA,CAAKlC,IAAI,CAAC,iBAAiB,EAAE;oBAAEqD,QAAQ,EAARA;mBAAU,CAAC;kBAAC,OAAAY,QAAA,CAAAO,MAAA,WACpC,EAAE;gBAAA;kBAAAP,QAAA,CAAAC,IAAA;kBAAAD,QAAA,CAAA+E,EAAA,GAAA/E,QAAA;kBAET/B,KAAA,CAAKb,YAAY,EAAE;;gBACnB;kBAAA4C,QAAA,CAAAC,IAAA;kBAAAD,QAAA,CAAAE,IAAA;kBAAA,OAImBjC,KAAA,CAAK6D,yBAAyB,CAEjDjH,sBAAsB,CAACmK,uBAAuB,EAAE;oBAChDC,KAAK,EAAEhH,KAAA,CAAKgH;mBACb,CAAC;gBAAA;kBAJI5B,MAAM,GAAArD,QAAA,CAAAQ,IAAA;kBAAA,MAMR,CAAC6C,MAAM,CAACvE,YAAY,IAAI,CAACuE,MAAM,CAAC6B,UAAU;oBAAAlF,QAAA,CAAAE,IAAA;oBAAA;;kBAAA,MACtC,IAAIrC,aAAa,CAAC,gBAAgB,EAAE,IAAI,CAAC;gBAAA;kBAGjDI,KAAA,CAAKhB,eAAe,CAClBrC,mBAAmB,CAACkE,YAAY,EAChCuE,MAAM,CAACvE,YAAY,CACpB;kBACDb,KAAA,CAAKhB,eAAe,CAClBrC,mBAAmB,CAACsK,UAAU,EAC9B7B,MAAM,CAAC6B,UAAU,CAClB;kBACDjH,KAAA,CAAKhB,eAAe,CAClBrC,mBAAmB,CAACuK,iBAAiB,EACrC9B,MAAM,CAAC8B,iBAAiB,CACzB;kBACDlH,KAAA,CAAKhB,eAAe,CAClBrC,mBAAmB,CAACwK,UAAU,EAC9B/B,MAAM,CAAC+B,UAAU,CAClB;kBACDnH,KAAA,CAAKlC,IAAI,CAAC,MAAM,EAAE;oBAChBqJ,UAAU,EAAE/B,MAAM,CAAC+B,UAAU;oBAC7BF,UAAU,EAAE7B,MAAM,CAAC6B,UAAU;oBAC7BC,iBAAiB,EAAE9B,MAAM,CAAC8B;mBAC3B,CAAC;kBAACnF,QAAA,CAAAE,IAAA;kBAAA,OACsBjC,KAAA,CAAK6D,yBAAyB,CAErDjH,sBAAsB,CAAC4J,6BAA6B,EAAE;oBACtD3F,YAAY,EAAEuE,MAAM,CAACvE;mBACtB,CAAC;gBAAA;kBAJIqF,WAAU,GAAAnE,QAAA,CAAAQ,IAAA;kBAMhBvC,KAAA,CAAKhB,eAAe,CAClBrC,mBAAmB,CAACgE,SAAS,EAC7BuF,WAAU,CAACO,OAAO,CAAC9F,SAAS,CAC7B;kBAAC,IAEGuF,WAAU,CAACO,OAAO,CAAC9F,SAAS;oBAAAoB,QAAA,CAAAE,IAAA;oBAAA;;kBAAA,MACzB,IAAIrC,aAAa,CAAC,gBAAgB,EAAE,IAAI,CAAC;gBAAA;kBAEjDI,KAAA,CAAKhB,eAAe,CAACrC,mBAAmB,CAACkE,YAAY,EAAE,EAAE,CAAC;kBAC1Db,KAAA,CAAKhB,eAAe,CAACrC,mBAAmB,CAACsK,UAAU,EAAE,EAAE,CAAC;kBACxDjH,KAAA,CAAKhB,eAAe,CAACrC,mBAAmB,CAACuK,iBAAiB,EAAE,EAAE,CAAC;kBAC/DlH,KAAA,CAAKhB,eAAe,CAACrC,mBAAmB,CAACwK,UAAU,EAAE,EAAE,CAAC;kBAClDhG,UAAQ,GAAG,CACf,EAAAiF,oBAAA,GAAAF,WAAU,CAACO,OAAO,cAAAL,oBAAA,GAAlBA,oBAAA,CAAoBM,UAAU,cAAAN,oBAAA,GAA9BA,oBAAA,UAA0C,qBAA1CA,oBAAA,CAA4CjF,QAAQ,KAAI,EAAE,EAC1DwF,GAAG,CAAC,UAAAC,OAAO;oBAAA,OACXA,OAAO,CAACC,QAAQ,CAAC,GAAG,CAAC,GAAGD,OAAO,CAAC5F,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG4F,OAAO;oBAC9D;kBACD5G,KAAA,CAAKmB,QAAQ,GAAGA,UAAQ;kBACxBnB,KAAA,CAAKlC,IAAI,CAAC,iBAAiB,EAAE;oBAAEqD,QAAQ,EAARA;mBAAU,CAAC;kBAAC,OAAAY,QAAA,CAAAO,MAAA,WACpCnB,UAAQ;gBAAA;kBAAAY,QAAA,CAAAC,IAAA;kBAAAD,QAAA,CAAAqF,EAAA,GAAArF,QAAA;kBAAA,MAET/B,KAAA,CAAKyC,sBAAsB,CAAAV,QAAA,CAAAqF,EAAM,CAAC;gBAAA;gBAAA;kBAAA,OAAArF,QAAA,CAAAW,IAAA;;eAAAjB,OAAA;WAE3C;UAAA,SAAAY,QAAAM,EAAA;YAAA,OAAAqD,QAAA,CAAAzH,KAAA,OAAAJ,SAAA;;UAAA,OAAAkE,OAAA;;;OACFyD,qBAAA,CACAjJ,qCAAqC,CAAC0J,YAAY,IAAG;MACpDnE,eAAe,EAAE,IAAI;MACrBC,OAAO;QAAA,IAAAgF,SAAA,GAAA/F,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAE,SAAAsB,SAAOlB,MAA+B;UAAA,IAAAT,QAAA;UAAA,OAAAI,mBAAA,GAAAM,IAAA,UAAAmB,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAAjB,IAAA,GAAAiB,SAAA,CAAAhB,IAAA;cAAA;gBAAAgB,SAAA,CAAAjB,IAAA;gBAAAiB,SAAA,CAAAhB,IAAA;gBAAA,OAEpBjC,KAAA,CAAK4C,qCAAqC,CAG/D/F,qCAAqC,CAAC0J,YAAY,EAClD3E,MAAM,GAAI5D,KAAK,CAAC2H,OAAO,CAAC/D,MAAM,CAAC,GAAGA,MAAM,GAAG,CAACA,MAAM,CAAC,GAAI,EAAE,CAC1D;cAAA;gBALKT,QAAQ,GAAA8B,SAAA,CAAAV,IAAA;gBAMdvC,KAAA,CAAKmB,QAAQ,GAAGA,QAAQ;gBACxBnB,KAAA,CAAKlC,IAAI,CAAC,iBAAiB,EAAE;kBAAEqD,QAAQ,EAARA;iBAAU,CAAC;gBAAC,OAAA8B,SAAA,CAAAX,MAAA,WACpCnB,QAAQ;cAAA;gBAAA8B,SAAA,CAAAjB,IAAA;gBAAAiB,SAAA,CAAAT,EAAA,GAAAS,SAAA;gBAAA,MAETjD,KAAA,CAAKyC,sBAAsB,CAAAQ,SAAA,CAAAT,EAAM,CAAC;cAAA;cAAA;gBAAA,OAAAS,SAAA,CAAAP,IAAA;;aAAAI,QAAA;SAE3C;QAAA,SAAAT,QAAAgB,GAAA;UAAA,OAAAgE,SAAA,CAAA9I,KAAA,OAAAJ,SAAA;;QAAA,OAAAkE,OAAA;;KACF,EAAAyD,qBAAA,CACAjJ,qCAAqC,CAACyK,mBAAmB,IAAG;MAC3DlF,eAAe,EAAE,IAAI;MACrBC,OAAO;QAAA,IAAAkF,SAAA,GAAAjG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAE,SAAAkC,SAAO9B,MAA+B;UAAA,OAAAL,mBAAA,GAAAM,IAAA,UAAA8B,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAA5B,IAAA,GAAA4B,SAAA,CAAA3B,IAAA;cAAA;gBAAA2B,SAAA,CAAA3B,IAAA;gBAAA,OAChCjC,KAAA,CAAK4C,qCAAqC,CACrD/F,qCAAqC,CAACyK,mBAAmB,EACzD1F,MAAM,GAAI5D,KAAK,CAAC2H,OAAO,CAAC/D,MAAM,CAAC,GAAGA,MAAM,GAAG,CAACA,MAAM,CAAC,GAAI,EAAE,CAC1D;cAAA;gBAAA,OAAAgC,SAAA,CAAAtB,MAAA,WAAAsB,SAAA,CAAArB,IAAA;cAAA;cAAA;gBAAA,OAAAqB,SAAA,CAAAlB,IAAA;;aAAAgB,QAAA;SACF;QAAA,SAAArB,QAAAiB,GAAA;UAAA,OAAAiE,SAAA,CAAAhJ,KAAA,OAAAJ,SAAA;;QAAA,OAAAkE,OAAA;;KACF,EAAAyD,qBAAA,CACAjJ,qCAAqC,CAAC2K,aAAa,IAAG;MACrDpF,eAAe,EAAE,IAAI;MACrBC,OAAO;QAAA,IAAAoF,SAAA,GAAAnG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAE,SAAA2C,SACPvC,MAAwC;UAAA,OAAAL,mBAAA,GAAAM,IAAA,UAAAuC,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAArC,IAAA,GAAAqC,SAAA,CAAApC,IAAA;cAAA;gBAAAoC,SAAA,CAAApC,IAAA;gBAAA,OAE3BjC,KAAA,CAAK4C,qCAAqC,CACrD/F,qCAAqC,CAAC2K,aAAa,EACnD5F,MAAM,GAAI5D,KAAK,CAAC2H,OAAO,CAAC/D,MAAM,CAAC,GAAGA,MAAM,GAAG,CAACA,MAAM,CAAC,GAAI,EAAE,CAC1D;cAAA;gBAAA,OAAAyC,SAAA,CAAA/B,MAAA,WAAA+B,SAAA,CAAA9B,IAAA;cAAA;cAAA;gBAAA,OAAA8B,SAAA,CAAA3B,IAAA;;aAAAyB,QAAA;SACF;QAAA,SAAA9B,QAAAkB,GAAA;UAAA,OAAAkE,SAAA,CAAAlJ,KAAA,OAAAJ,SAAA;;QAAA,OAAAkE,OAAA;;KACF,EAAAyD,qBAAA,EACD;IAEFN,MAAM,CAACkC,gBAAgB,CAAC,MAAM,EAAE;MAC9B1H,KAAA,CAAKlC,IAAI,CAAC,SAAS,EAAE;QAAE2C,OAAO,EAAET,KAAA,CAAKc,QAAQ;OAAI,CAAC;MAClDd,KAAA,CAAK2H,cAAc,EAAE;MACrB3H,KAAA,CAAK4H,cAAc,EAAE;KACtB,CAAC;IAAC,OAAA5H,KAAA;;;;;;;EAGLrB,cAAA,CAAAiH,sBAAA,EAAAC,aAAA;EAAA,IAAA5I,MAAA,GAAA2I,sBAAA,CAAA1I,SAAA;EAAAD,MAAA,CAKc0K,cAAc;;EAAA;IAAA,IAAAE,eAAA,gBAAAvG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAApB,SAAAkD;MAAA,IAAA7D,YAAA,EAAAF,SAAA,EAAAmH,oBAAA,EAAA5B,UAAA,EAAA/E,QAAA;MAAA,OAAAI,mBAAA,GAAAM,IAAA,UAAA+C,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAA7C,IAAA,GAAA6C,SAAA,CAAA5C,IAAA;UAAA;YACApB,YAAY,GAAG,IAAI,CAACjC,eAAe,CAACjC,mBAAmB,CAACkE,YAAY,CAAC;YACrEF,SAAS,GAAG,IAAI,CAAC/B,eAAe,CAACjC,mBAAmB,CAACgE,SAAS,CAAC;YAAA,MACjEE,YAAY,IAAI,CAACF,SAAS;cAAAkE,SAAA,CAAA5C,IAAA;cAAA;;YAAA4C,SAAA,CAAA7C,IAAA;YAAA6C,SAAA,CAAA5C,IAAA;YAAA,OAED,IAAI,CAAC4B,yBAAyB,CAErDjH,sBAAsB,CAAC4J,6BAA6B,EAAE;cACtD3F,YAAY,EAAZA;aACD,CAAC;UAAA;YAJIqF,UAAU,GAAArB,SAAA,CAAAtC,IAAA;YAMhB,IAAI,CAACpD,YAAY,EAAE;YACnB,IAAI,CAACH,eAAe,CAClBrC,mBAAmB,CAACgE,SAAS,EAC7BuF,UAAU,CAACO,OAAO,CAAC9F,SAAS,CAC7B;YAAC,IAEGuF,UAAU,CAACO,OAAO,CAAC9F,SAAS;cAAAkE,SAAA,CAAA5C,IAAA;cAAA;;YAAA,MACzB,IAAIrC,aAAa,CAAC,gBAAgB,EAAE,IAAI,CAAC;UAAA;YAG3CuB,QAAQ,GAAG,CACf,EAAA2G,oBAAA,GAAA5B,UAAU,CAACO,OAAO,cAAAqB,oBAAA,GAAlBA,oBAAA,CAAoBpB,UAAU,cAAAoB,oBAAA,GAA9BA,oBAAA,UAA0C,qBAA1CA,oBAAA,CAA4C3G,QAAQ,KAAI,EAAE,EAC1DwF,GAAG,CAAC,UAAAC,OAAO;cAAA,OACXA,OAAO,CAACC,QAAQ,CAAC,GAAG,CAAC,GAAGD,OAAO,CAAC5F,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG4F,OAAO;cAC9D;YACD,IAAI,CAACzF,QAAQ,GAAGA,QAAQ;YACxB,IAAI,CAACrD,IAAI,CAAC,iBAAiB,EAAE;cAAEqD,QAAQ,EAARA;aAAU,CAAC;YAAC0D,SAAA,CAAA5C,IAAA;YAAA;UAAA;YAAA4C,SAAA,CAAA7C,IAAA;YAAA6C,SAAA,CAAArC,EAAA,GAAAqC,SAAA;YAE3C,IAAI,CAAC1D,QAAQ,GAAG,EAAE;YAClB,IAAI,CAAChC,YAAY,EAAE;UAAC;UAAA;YAAA,OAAA0F,SAAA,CAAAnC,IAAA;;SAAAgC,QAAA;KAGzB;IAAA,SAAAiD;MAAA,OAAAE,eAAA,CAAAtJ,KAAA,OAAAJ,SAAA;;IAAA,OAAAwJ,cAAA;;;;;;;;EAED1K,MAAA,CAKc2K,cAAc;;EAAA;IAAA,IAAAG,eAAA,gBAAAzG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAApB,SAAAwG;MAAA,IAAAnH,YAAA,EAAAF,SAAA;MAAA,OAAAY,mBAAA,GAAAM,IAAA,UAAAoG,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAAlG,IAAA,GAAAkG,SAAA,CAAAjG,IAAA;UAAA;YACApB,YAAY,GAAG,IAAI,CAACjC,eAAe,CAACjC,mBAAmB,CAACkE,YAAY,CAAC;YACrEF,SAAS,GAAG,IAAI,CAAC/B,eAAe,CAACjC,mBAAmB,CAACgE,SAAS,CAAC;YAAA,MACjEA,SAAS,IAAI,CAACE,YAAY;cAAAqH,SAAA,CAAAjG,IAAA;cAAA;;YAAAiG,SAAA,CAAAlG,IAAA;YAAAkG,SAAA,CAAAjG,IAAA;YAAA,OAEpB,IAAI,CAACb,OAAO,CAAW;cAC3BO,MAAM,EAAE9E,qCAAqC,CAACkJ;aAC/C,CAAC;UAAA;YAAAmC,SAAA,CAAAjG,IAAA;YAAA;UAAA;YAAAiG,SAAA,CAAAlG,IAAA;YAAAkG,SAAA,CAAA1F,EAAA,GAAA0F,SAAA;YAEF,IAAI,CAAC/G,QAAQ,GAAG,EAAE;YAClB,IAAI,CAAChC,YAAY,EAAE;UAAC;UAAA;YAAA,OAAA+I,SAAA,CAAAxF,IAAA;;SAAAsF,QAAA;KAGzB;IAAA,SAAAJ;MAAA,OAAAG,eAAA,CAAAxJ,KAAA,OAAAJ,SAAA;;IAAA,OAAAyJ,cAAA;;EAAA,OAAAhC,sBAAA;AAAA,EArOyCzF,YAAY;;ACZxD;;;;AAIA,IAAagI,iBAAiB;EAO5B,SAAAA;IACE,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACC,eAAe,EAAE;IACtC,IAAI,CAACD,QAAQ,CAACjL,EAAE,CAACT,cAAc,CAAC4L,IAAI,EAAE,IAAI,CAACC,aAAa,CAAC;;;;;;EAG3D,IAAAtL,MAAA,GAAAkL,iBAAA,CAAAjL,SAAA;EAAAD,MAAA,CAIOuD,WAAW,GAAX,SAAAA;IACL,OAAO,IAAI,CAAC4H,QAAQ,CAAC5H,WAAW,EAAE;;;;;;EAGpCvD,MAAA,CAIOyD,iBAAiB,GAAjB,SAAAA;IACL,OAAO,IAAI,CAAC0H,QAAQ,CAAC1H,iBAAiB,EAAE;;;;;;;;EAG1CzD,MAAA,CAMauL,OAAO;;EAAA;IAAA,IAAAC,QAAA,gBAAAnH,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAb,SAAAC;MAAA,OAAAF,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAAF,QAAA,CAAAE,IAAA;YAAA,OACQ,IAAI,CAACmG,QAAQ,CAAChH,OAAO,CAAC;cACjCO,MAAM,EAAE9E,qCAAqC,CAACkJ;aAC/C,CAAC;UAAA;YAAA,OAAAhE,QAAA,CAAAO,MAAA,WAAAP,QAAA,CAAAQ,IAAA;UAAA;UAAA;YAAA,OAAAR,QAAA,CAAAW,IAAA;;SAAAjB,OAAA;KACH;IAAA,SAAA+G;MAAA,OAAAC,QAAA,CAAAlK,KAAA,OAAAJ,SAAA;;IAAA,OAAAqK,OAAA;;;;;;;;;;;;;EAEDvL,MAAA,CAUayL,eAAe;;EAAA;IAAA,IAAAC,gBAAA,gBAAArH,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAArB,SAAAsB,SAAsBlB,MAI5B;MAAA,OAAAL,mBAAA,GAAAM,IAAA,UAAAmB,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAAjB,IAAA,GAAAiB,SAAA,CAAAhB,IAAA;UAAA;YAAAgB,SAAA,CAAAhB,IAAA;YAAA,OACc,IAAI,CAACmG,QAAQ,CAAChH,OAAO,CAAW;cAC3CO,MAAM,EAAE9E,qCAAqC,CAACyK,mBAAmB;cACjE1F,MAAM,EAAE,CAACA,MAAM;aAChB,CAAC;UAAA;YAAA,OAAAqB,SAAA,CAAAX,MAAA,WAAAW,SAAA,CAAAV,IAAA;UAAA;UAAA;YAAA,OAAAU,SAAA,CAAAP,IAAA;;SAAAI,QAAA;KACH;IAAA,SAAA4F,gBAAA/F,EAAA;MAAA,OAAAgG,gBAAA,CAAApK,KAAA,OAAAJ,SAAA;;IAAA,OAAAuK,eAAA;;;;;;;;;;EAEDzL,MAAA,CAOa2L,WAAW;;EAAA;IAAA,IAAAC,YAAA,gBAAAvH,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAjB,SAAAkC,SAAkB5D,OAAe;MAAA,OAAAyB,mBAAA,GAAAM,IAAA,UAAA8B,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAA5B,IAAA,GAAA4B,SAAA,CAAA3B,IAAA;UAAA;YAAA2B,SAAA,CAAA3B,IAAA;YAAA,OACzB,IAAI,CAACmG,QAAQ,CAAChH,OAAO,CAAS;cACzCO,MAAM,EAAE9E,qCAAqC,CAAC2K,aAAa;cAC3D5F,MAAM,EAAE,CAAC9B,OAAO,EAAE,IAAI,CAACsI,QAAQ,CAAClH,UAAU,EAAE;aAC7C,CAAC;UAAA;YAAA,OAAA0C,SAAA,CAAAtB,MAAA,WAAAsB,SAAA,CAAArB,IAAA;UAAA;UAAA;YAAA,OAAAqB,SAAA,CAAAlB,IAAA;;SAAAgB,QAAA;KACH;IAAA,SAAAkF,YAAAvF,GAAA;MAAA,OAAAwF,YAAA,CAAAtK,KAAA,OAAAJ,SAAA;;IAAA,OAAAyK,WAAA;;;;;;;;;;EAED3L,MAAA,CAOOE,EAAE,GAAF,SAAAA,GAAGC,KAAoB,EAAEC,QAAkB;IAChD,IAAI,CAAC+K,QAAQ,CAACjL,EAAE,CAACC,KAAK,EAAEC,QAAQ,CAAC;IACjC,OAAO,IAAI;;;;;;;;;EAGbJ,MAAA,CAOOS,cAAc,GAAd,SAAAA,eAAeN,KAAoB,EAAEC,QAAkB;IAC5D,IAAI,CAAC+K,QAAQ,CAAC1K,cAAc,CAACN,KAAK,EAAEC,QAAQ,CAAC;IAC7C,OAAO,IAAI;;;;;;EAGbJ,MAAA,CAIQoL,eAAe,GAAf,SAAAA;;IACN,IAAID,QAAQ,IAAAU,gBAAA,GAAGtD,MAAM,CAACC,QAAQ,cAAAqD,gBAAA,GAAfA,gBAAA,CAAiBpD,SAAS,qBAA1BoD,gBAAA,CAA4BC,IAAI,CAC7C,UAACX,QAA0C;MAAA,OACzCA,QAAQ,YAAYxC,sBAAsB,IAAIwC,QAAQ,CAACY,gBAAgB;MAC1E;IACD,IACE,CAACZ,QAAQ,IACT5C,MAAM,CAACC,QAAQ,YAAYG,sBAAsB,IACjDJ,MAAM,CAACC,QAAQ,CAACuD,gBAAgB,EAChC;MACAZ,QAAQ,GAAG5C,MAAM,CAACC,QAAQ;;IAE5B,IAAI,CAAC2C,QAAQ,EAAE;MACbA,QAAQ,GAAG,IAAIxC,sBAAsB,EAAE;;IAEzC,OAAOwC,QAAQ;;;;;;;;EAGjBnL,MAAA,CAMQsL,aAAa,GAAb,SAAAA,cAAA7G,IAAA;;QACNyF,UAAU,GAAAzF,IAAA,CAAVyF,UAAU;MACVD,iBAAiB,GAAAxF,IAAA,CAAjBwF,iBAAiB;IAEjB,IAAM+B,MAAM,IAAAC,gBAAA,GAAG1D,MAAM,CAAC2D,QAAQ,qBAAfD,gBAAA,CAAiBD,MAAM;IACtC,IAAMG,WAAW,0DAAwDjC,UAAY;IACrF,IACE8B,MAAM,IACNA,MAAM,CAACI,gBAAgB,IACvBJ,MAAM,CAACK,QAAQ,IACfL,MAAM,CAACK,QAAQ,KAAK,SAAS,EAC7B;MACAL,MAAM,CAACI,gBAAgB,CAACnC,iBAAiB,CAAC;MAC1C,IAAI+B,MAAM,CAACM,KAAK,EAAE;QAChB/D,MAAM,CAAC2D,QAAQ,CAACF,MAAM,CAACM,KAAK,EAAE;;KAEjC,MAAM;MACL/D,MAAM,CAACgE,IAAI,CAACJ,WAAW,EAAE,QAAQ,CAAC;;GAErC;EAAA,OAAAjB,iBAAA;AAAA;;ACjJH,SAASsB,IAAIA;;EACX,IACE,GAAAC,gBAAA,GAAClE,MAAM,CAACmE,QAAQ,aAAfD,gBAAA,CAAiBE,SAAS,KAC3B,EAAEpE,MAAM,CAACmE,QAAQ,CAACC,SAAS,YAAYzB,iBAAiB,CAAC,EACzD;IACA3C,MAAM,CAACmE,QAAQ,GAAAE,QAAA,KACTrE,MAAM,CAACmE,QAAQ,IAAI,EAAE;MACzBC,SAAS,EAAE,IAAIzB,iBAAiB;MACjC;;AAEL;AAEA;AACAsB,IAAI,EAAE"}