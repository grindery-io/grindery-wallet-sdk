{"version":3,"file":"grindery-wallet-sdk.cjs.development.js","sources":["../src/enums.ts","../src/provider/WalletProviderEventEmitter.ts","../src/provider/WalletProviderLocalStorage.ts","../src/provider/WalletProviderError.ts","../src/utils/uuid.ts","../src/provider/WalletProvider.ts","../src/provider/GrinderyWalletProvider.ts","../src/sdk/GrinderyWalletSDK.ts","../src/utils/getAppId.ts","../src/index.ts"],"sourcesContent":["export enum ProviderEvents {\n  accountsChanged = 'accountsChanged',\n  pair = 'pair',\n  connect = 'connect',\n  disconnect = 'disconnect',\n  chainChanged = 'chainChanged',\n  message = 'message',\n}\n\nexport enum ProviderStorageKeys {\n  pairingToken = 'pairingToken',\n  sessionId = 'sessionId',\n  connectUrl = 'connectUrl',\n  connectUrlBrowser = 'connectUrlBrowser',\n  shortToken = 'shortToken',\n}\n\n/**\n * @summary The Grindery RPC API method names\n */\nexport enum GrinderyRpcMethodNames {\n  requestPairing = 'requestPairing',\n  waitForPairingResult = 'waitForPairingResult',\n  request = 'request',\n  waitForRequestResult = 'waitForRequestResult',\n  'disconnect' = 'disconnect',\n}\n\n/**\n * @summary The Grindery wallet provider method names\n */\nexport enum GrinderyRpcProviderRequestMethodNames {\n  eth_requestAccounts = 'eth_requestAccounts',\n  eth_accounts = 'eth_accounts',\n  personal_sign = 'personal_sign',\n  eth_sendTransaction = 'eth_sendTransaction',\n  gws_disconnect = 'gws_disconnect',\n}\n","import { ProviderEvent } from '../types';\n\n/**\n * @summary A class for emitting provider events\n * @since 0.1.0\n */\nexport class WalletProviderEventEmitter {\n  /**\n   * @summary A map of events and their listeners\n   * @public\n   */\n  public events: Map<ProviderEvent, Array<Function>>;\n\n  constructor() {\n    this.events = new Map();\n  }\n\n  /**\n   * @summary Adds a listener to the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public on(event: ProviderEvent, callback: Function) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event)!.push(callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public removeListener(event: ProviderEvent, callback: Function) {\n    if (this.events.has(event)) {\n      const callbacks = this.events.get(event)!.filter(cb => cb !== callback);\n      this.events.set(event, callbacks);\n    }\n    return this;\n  }\n\n  /**\n   * @summary Emits an event\n   * @public\n   * @param {string} event Event name\n   * @param data Event data\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  protected emit(event: ProviderEvent, ...data: any[]) {\n    if (this.events.has(event)) {\n      console.log('[Grindery.WalletSDK] > Event:', event, data[0]);\n      this.events.get(event)!.forEach(callback => {\n        callback(...data);\n      });\n    }\n    return this;\n  }\n}\n","import { ProviderStorage, ProviderStorageKey } from '../types';\nimport { WalletProviderEventEmitter } from './WalletProviderEventEmitter';\n\nconst LOCALSTORAGE_KEY = 'GrinderyWalletProvider';\n\n/**\n * @summary A local storage class for the provider\n * @since 0.1.0\n * @extends WalletProviderEventEmitter\n */\nexport class WalletProviderLocalStorage extends WalletProviderEventEmitter {\n  /**\n   * @summary Gets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @returns {string} The value of the storage by the key\n   */\n  protected getStorageValue(key: ProviderStorageKey): string {\n    const value = this.getStorage()[key] || '';\n    return value;\n  }\n\n  /**\n   * @summary Sets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @param {string} value The value to set\n   * @returns {void}\n   */\n  protected setStorageValue(key: ProviderStorageKey, value: string): void {\n    const storage = this.getStorage();\n    storage[key] = value;\n    this.saveStorage(storage);\n  }\n\n  /**\n   * @summary Clears the storage\n   * @protected\n   * @returns {void}\n   */\n  protected clearStorage(): void {\n    this.saveStorage({});\n  }\n\n  /**\n   * @summary Gets the provider storage\n   * @returns {ProviderStorage} The provider storage\n   */\n  private getStorage(): ProviderStorage {\n    try {\n      return JSON.parse(\n        localStorage.getItem(LOCALSTORAGE_KEY) || '{}'\n      ) as ProviderStorage;\n    } catch (error) {\n      localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify({}));\n      throw new Error('Error parsing storage');\n    }\n  }\n\n  /**\n   * @summary Saves the provider storage\n   * @param {ProviderStorage} storage Provider storage object\n   */\n  private saveStorage(storage: ProviderStorage): void {\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(storage));\n  }\n}\n","/**\n * @summary Error class for WalletProvider\n * @since 0.1.0\n * @extends Error\n */\nexport class WalletProviderError extends Error {\n  name: string = 'GrinderyWalletProviderError';\n  code?: number;\n  data?: unknown;\n\n  constructor(message: string, code?: number, data?: unknown) {\n    super(message);\n    this.code = code;\n    this.data = data;\n  }\n}\n\nexport const WalletProviderErrors = {\n  PairingFailed: new WalletProviderError('Pairing failed', 4900),\n  Disconnected: new WalletProviderError('Disconnected', 4900),\n  UnsupportedMethod: new WalletProviderError('Unsupported Method', 4200),\n  Unauthorized: new WalletProviderError('Unauthorized', 4900),\n  NoResult: new WalletProviderError('No result', 4900),\n  NoAppId: new WalletProviderError('App ID is required', 4900),\n};\n","/**\n * @summary Generates a Version 4 (pseudorandom) UUID\n * @returns {string} The UUID\n */\nexport const uuid = (): string => {\n  let d = '';\n  while (d.length < 32)\n    d += Math.random()\n      .toString(16)\n      .substr(2);\n  const vr = ((parseInt(d.substr(16, 1), 16) & 0x3) | 0x8).toString(16);\n  return `${d.substr(0, 8)}-${d.substr(8, 4)}-4${d.substr(\n    13,\n    3\n  )}-${vr}${d.substr(17, 3)}-${d.substr(20, 12)}`;\n};\n","import { WalletProviderLocalStorage } from './WalletProviderLocalStorage';\nimport {\n  Address,\n  ChainId,\n  GrinderyRpcApiRequestResults,\n  GrinderyRpcMethodName,\n  GrinderyRpcProviderRequestMethodName,\n  ProviderMethods,\n  ProviderRequestResult,\n  RequestArguments,\n  RequestArgumentsParams,\n  RequestToken,\n} from '../types';\nimport {\n  WalletProviderError,\n  WalletProviderErrors,\n} from './WalletProviderError';\nimport {\n  GrinderyRpcMethodNames,\n  ProviderEvents,\n  ProviderStorageKeys,\n} from '../enums';\nimport { uuid } from '../utils/uuid';\n\n/**\n * @summary The base wallet provider class\n * @since 0.1.0\n * @extends WalletProviderLocalStorage\n */\nexport class WalletProvider extends WalletProviderLocalStorage {\n  constructor() {\n    super();\n\n    this.injectProvider();\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return !!this.chainId;\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return (\n      this.isConnected() &&\n      !!this.getStorageValue(ProviderStorageKeys.sessionId)\n    );\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet pairing is in progress (pending).\n   */\n  public isWalletConnectionPending(): boolean {\n    return (\n      this.isConnected() &&\n      !!this.getStorageValue(ProviderStorageKeys.pairingToken) &&\n      !this.getStorageValue(ProviderStorageKeys.sessionId)\n    );\n  }\n\n  /**\n   * @summary Gets the connected chain ID in hex format\n   * @public\n   * @returns {ChainId} The chain ID in hex format\n   */\n  public getChain(): ChainId {\n    return `0x${parseFloat(this.chainId.split(':')[1]).toString(16)}`;\n  }\n\n  /**\n   * @summary Gets the connected user's wallet address\n   * @public\n   * @returns {Address} The ethereum wallet address\n   */\n  public getAddress(): Address {\n    return this.accounts[0] || '';\n  }\n\n  /**\n   * @summary Sets the application ID\n   * @public\n   * @param {string} appId The application ID\n   * @returns {string} The application ID\n   */\n  public setAppId(appId: string): string {\n    this.appId = appId;\n    return this.appId;\n  }\n\n  /**\n   * @summary Sends a request to the provider\n   * @public\n   * @param {RequestArguments} args Request arguments\n   * @param {string} args.method The method name\n   * @param {RequestArgumentsParams} args.params The method parameters\n   * @returns {T} The result of the request\n   */\n  public async request<T>({ method, params }: RequestArguments): Promise<T> {\n    /*if (!this.appId) {\n      throw WalletProviderErrors.NoAppId;\n    }*/\n    if (!this.chainId) {\n      this.emit(ProviderEvents.disconnect, WalletProviderErrors.Disconnected);\n      throw WalletProviderErrors.Disconnected;\n    }\n    if (!this.methods[method]) {\n      throw WalletProviderErrors.UnsupportedMethod;\n    }\n\n    try {\n      if (this.methods[method]?.sessionRequired && !this.isWalletConnected()) {\n        throw WalletProviderErrors.Unauthorized;\n      }\n\n      return (await this.methods[method]?.execute(params)) as T;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API and waits for the result.\n   * @public\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  public async sendAndWaitGrinderyRpcProviderRequest<T>(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[],\n    timeout?: number\n  ): Promise<T> {\n    const request = await this.sendGrinderyRpcProviderRequest(method, params);\n    return await this.waitGrinderyRpcProviderRequest(\n      request.requestToken,\n      timeout\n    );\n  }\n\n  /**\n   * @summary The application ID.\n   * @protected\n   */\n  protected appId: string = '';\n\n  /**\n   * @summary The chain ID in CAIP-2 format; e.g. \"eip155:1\".\n   * @protected\n   */\n  protected chainId: ChainId = 'eip155:137';\n\n  /**\n   * @summary Client id\n   * @protected\n   */\n  protected clientId: string = uuid();\n\n  /**\n   * @summary The list of supported provider methods.\n   * @protected\n   */\n  protected methods: Partial<ProviderMethods> = {};\n\n  /**\n   * @summary The user's wallet addresses list.\n   * @protected\n   */\n  protected accounts: Address[] = [];\n\n  protected setAccounts(accounts: Address[]): Address[] {\n    if (JSON.stringify(accounts) !== JSON.stringify(this.accounts)) {\n      this.emit(ProviderEvents.accountsChanged, accounts);\n    }\n    this.accounts = accounts;\n    return this.accounts;\n  }\n\n  /**\n   * @summary Registers the provider methods.\n   * @protected\n   * @param {ProviderMethods} methods A map of supported provider methods.\n   * @returns {void}\n   */\n  protected registerProviderMethods(methods: Partial<ProviderMethods>): void {\n    this.methods = methods;\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API.\n   * @protected\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @returns {ProviderRequestResult} The request token to use in the `waitGrinderyRpcProviderRequest` method\n   */\n  protected async sendGrinderyRpcProviderRequest(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[]\n  ): Promise<ProviderRequestResult> {\n    if (!this.getStorageValue(ProviderStorageKeys.sessionId)) {\n      throw WalletProviderErrors.Unauthorized;\n    }\n\n    try {\n      return await this.sendGrinderyRpcApiRequest<\n        GrinderyRpcApiRequestResults.request\n      >(GrinderyRpcMethodNames.request, {\n        sessionId: this.getStorageValue(ProviderStorageKeys.sessionId),\n        scope: this.chainId,\n        request: {\n          method,\n          params,\n        },\n      });\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Waits for the result of the provider request.\n   * @protected\n   * @param {RequestToken} requestToken A token to identify provider request. Recieved in the results of `sendGrinderyRpcProviderRequest` method.\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  protected async waitGrinderyRpcProviderRequest<T>(\n    requestToken: RequestToken,\n    timeout?: number\n  ): Promise<T> {\n    if (!this.getStorageValue(ProviderStorageKeys.sessionId)) {\n      throw WalletProviderErrors.Unauthorized;\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<T>(\n        GrinderyRpcMethodNames.waitForRequestResult,\n        {\n          requestToken,\n          timeout,\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a request to the Grindery Walletconnect RPC API.\n   * @protected\n   * @param {GrinderyRpcMethodName} method Request method name\n   * @param {RequestArgumentsParams} params Request parameters\n   * @returns {T} The result of the request\n   */\n  protected async sendGrinderyRpcApiRequest<T>(\n    method: GrinderyRpcMethodName,\n    params?: RequestArgumentsParams\n  ): Promise<T> {\n    try {\n      const response = await fetch('https://walletconnect-api.grindery.com', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method: `gws_${method}`,\n          params: params || [],\n        }),\n      });\n      const data = await response.json();\n      if (data.error) {\n        throw new WalletProviderError(data.error.message, data.error.code);\n      }\n      if (!data.result) {\n        throw WalletProviderErrors.NoResult;\n      }\n      return data.result;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Creates a provider error from an unknown error\n   * @protected\n   * @param {unknown} error Optional. Error object.\n   * @returns {WalletProviderError} The provider error\n   */\n  protected createProviderRpcError(error?: unknown): WalletProviderError {\n    let errorResponse: WalletProviderError;\n    if (error instanceof WalletProviderError) {\n      errorResponse = new WalletProviderError(\n        error.message || 'Unknown error',\n        error.code || 4900,\n        error.data\n      );\n    } else if (error instanceof Error) {\n      errorResponse = new WalletProviderError(\n        error.message || 'Unknown error',\n        4900,\n        error\n      );\n    } else {\n      errorResponse = new WalletProviderError('Unknown error', 4900, error);\n    }\n    return errorResponse;\n  }\n\n  /**\n   * @summary Injects the provider into the window object\n   * @private\n   * @returns {void}\n   */\n  private injectProvider(): void {\n    if (!window.ethereum) {\n      window.ethereum = this;\n    } else {\n      if (\n        window.ethereum.providers &&\n        Array.isArray(window.ethereum.providers)\n      ) {\n        window.ethereum.providers.push(this);\n      } else {\n        window.ethereum.providers = [window.ethereum, this];\n      }\n    }\n  }\n}\n","import {\n  GrinderyRpcMethodNames,\n  GrinderyRpcProviderRequestMethodNames,\n  ProviderEvents,\n  ProviderStorageKeys,\n} from '../enums';\nimport {\n  GrinderyRpcApiRequestResults,\n  GrinderyRpcProviderRequestResults,\n  ProviderInterface,\n  RequestArgumentsParams,\n} from '../types';\nimport { WalletProvider } from './WalletProvider';\nimport { WalletProviderErrors } from './WalletProviderError';\n\n/**\n * @summary The Grindery Wallet Ethereum Injected Provider Class.\n * @extends WalletProvider\n * @implements ProviderInterface\n */\nexport class GrinderyWalletProvider extends WalletProvider\n  implements ProviderInterface {\n  /**\n   * @summary Indicates that the provider is a Grindery Wallet.\n   */\n  public readonly isGrinderyWallet: boolean = true;\n\n  constructor() {\n    super();\n\n    this.registerProviderMethods({\n      [GrinderyRpcProviderRequestMethodNames.eth_requestAccounts]: {\n        sessionRequired: false,\n        execute: async (\n          params?: RequestArgumentsParams\n        ): Promise<GrinderyRpcProviderRequestResults.eth_requestAccounts> => {\n          if (this.isWalletConnected()) {\n            try {\n              return await this.request<\n                GrinderyRpcProviderRequestResults.eth_accounts\n              >({\n                method: GrinderyRpcProviderRequestMethodNames.eth_accounts,\n                params: params || [],\n              });\n            } catch (error) {\n              this.setStorageValue(ProviderStorageKeys.sessionId, '');\n              // skip failed request and continue with pairing\n            }\n          }\n          if (this.isWalletConnectionPending()) {\n            try {\n              const pairResult = await this.sendGrinderyRpcApiRequest<\n                GrinderyRpcApiRequestResults.waitForPairingResult\n              >(GrinderyRpcMethodNames.waitForPairingResult, {\n                pairingToken: this.getStorageValue(\n                  ProviderStorageKeys.pairingToken\n                ),\n              });\n\n              this.clearStorage();\n              this.setStorageValue(\n                ProviderStorageKeys.sessionId,\n                pairResult.session.sessionId\n              );\n\n              if (!pairResult.session.sessionId) {\n                throw WalletProviderErrors.PairingFailed;\n              }\n\n              return await this.request<\n                GrinderyRpcProviderRequestResults.eth_accounts\n              >({\n                method: GrinderyRpcProviderRequestMethodNames.eth_accounts,\n                params: params || [],\n              });\n            } catch (error) {\n              this.clearStorage();\n              // skip failed request and continue with pairing\n            }\n          }\n          try {\n            const result = await this.sendGrinderyRpcApiRequest<\n              GrinderyRpcApiRequestResults.requestPairing\n            >(GrinderyRpcMethodNames.requestPairing, {\n              appId: this.appId,\n              clientId: this.clientId,\n            });\n\n            if (!result.pairingToken || !result.connectUrl) {\n              throw WalletProviderErrors.PairingFailed;\n            }\n\n            this.setStorageValue(\n              ProviderStorageKeys.pairingToken,\n              result.pairingToken\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.connectUrl,\n              result.connectUrl\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.connectUrlBrowser,\n              result.connectUrlBrowser\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.shortToken,\n              result.shortToken\n            );\n            this.emit(ProviderEvents.pair, {\n              shortToken: result.shortToken,\n              connectUrl: result.connectUrl,\n              connectUrlBrowser: result.connectUrlBrowser,\n            });\n            const pairResult = await this.sendGrinderyRpcApiRequest<\n              GrinderyRpcApiRequestResults.waitForPairingResult\n            >(GrinderyRpcMethodNames.waitForPairingResult, {\n              pairingToken: result.pairingToken,\n            });\n\n            this.setStorageValue(\n              ProviderStorageKeys.sessionId,\n              pairResult.session.sessionId\n            );\n\n            if (!pairResult.session.sessionId) {\n              throw WalletProviderErrors.PairingFailed;\n            }\n            this.setStorageValue(ProviderStorageKeys.pairingToken, '');\n            this.setStorageValue(ProviderStorageKeys.connectUrl, '');\n            this.setStorageValue(ProviderStorageKeys.connectUrlBrowser, '');\n            this.setStorageValue(ProviderStorageKeys.shortToken, '');\n\n            return await this.request({\n              method: GrinderyRpcProviderRequestMethodNames.eth_accounts,\n              params: params || [],\n            });\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.eth_accounts]: {\n        sessionRequired: true,\n        execute: async (\n          params?: RequestArgumentsParams\n        ): Promise<GrinderyRpcProviderRequestResults.eth_accounts> => {\n          try {\n            return this.setAccounts(\n              await this.sendAndWaitGrinderyRpcProviderRequest(\n                GrinderyRpcProviderRequestMethodNames.eth_accounts,\n                params ? (Array.isArray(params) ? params : [params]) : []\n              )\n            );\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.eth_sendTransaction]: {\n        sessionRequired: true,\n        execute: async (\n          params?: RequestArgumentsParams\n        ): Promise<GrinderyRpcProviderRequestResults.eth_sendTransaction> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest(\n            GrinderyRpcProviderRequestMethodNames.eth_sendTransaction,\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.personal_sign]: {\n        sessionRequired: true,\n        execute: async (\n          params?: Partial<RequestArgumentsParams>\n        ): Promise<GrinderyRpcProviderRequestResults.personal_sign> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest(\n            GrinderyRpcProviderRequestMethodNames.personal_sign,\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.gws_disconnect]: {\n        sessionRequired: true,\n        execute: async (): Promise<GrinderyRpcApiRequestResults.disconnect> => {\n          try {\n            const result = await this.sendGrinderyRpcApiRequest<\n              GrinderyRpcApiRequestResults.disconnect\n            >(GrinderyRpcMethodNames.disconnect, {\n              sessionToken: this.getStorageValue(ProviderStorageKeys.sessionId),\n            });\n            this.emit(\n              ProviderEvents.disconnect,\n              WalletProviderErrors.Disconnected\n            );\n            this.clearStorage();\n            this.setAccounts([]);\n            return result;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n    });\n\n    window.addEventListener('load', () => {\n      this.emit(ProviderEvents.connect, this.getChain());\n      this.restorePairing();\n      this.restoreSession();\n    });\n  }\n\n  /**\n   * @summary Restores the pairing process if pairing token is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restorePairing(): Promise<void> {\n    const pairingToken = this.getStorageValue(ProviderStorageKeys.pairingToken);\n    const sessionId = this.getStorageValue(ProviderStorageKeys.sessionId);\n    if (pairingToken && !sessionId) {\n      try {\n        const pairResult = await this.sendGrinderyRpcApiRequest<\n          GrinderyRpcApiRequestResults.waitForPairingResult\n        >(GrinderyRpcMethodNames.waitForPairingResult, {\n          pairingToken,\n        });\n\n        this.clearStorage();\n        this.setStorageValue(\n          ProviderStorageKeys.sessionId,\n          pairResult.session.sessionId\n        );\n\n        if (!pairResult.session.sessionId) {\n          throw WalletProviderErrors.PairingFailed;\n        }\n\n        const accounts = (\n          pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n        ).map(account =>\n          account.includes(':') ? account.split(':')[2] || '' : account\n        );\n        this.setAccounts(accounts);\n      } catch (error) {\n        this.setAccounts([]);\n        this.clearStorage();\n      }\n    }\n  }\n\n  /**\n   * @summary Restores the session if session Id is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restoreSession(): Promise<void> {\n    const pairingToken = this.getStorageValue(ProviderStorageKeys.pairingToken);\n    const sessionId = this.getStorageValue(ProviderStorageKeys.sessionId);\n    if (sessionId && !pairingToken) {\n      try {\n        await this.request<string[]>({\n          method: GrinderyRpcProviderRequestMethodNames.eth_requestAccounts,\n        });\n      } catch (error) {\n        this.setAccounts([]);\n        this.clearStorage();\n      }\n    }\n  }\n}\n","import {\n  GrinderyRpcProviderRequestMethodNames,\n  ProviderEvents,\n} from '../enums';\nimport {\n  GrinderyRpcApiRequestResults,\n  GrinderyWalletSDKConfig,\n  ProviderEvent,\n} from '../types';\nimport { GrinderyWalletProvider } from '../provider/GrinderyWalletProvider';\n\n/**\n * @summary The Grindery Wallet SDK class\n * @since 0.1.0\n */\nexport class GrinderyWalletSDK {\n  /**\n   * @summary The provider instance\n   * @public\n   */\n  public provider: GrinderyWalletProvider;\n\n  constructor({ appId }: GrinderyWalletSDKConfig) {\n    this.provider = this.getWeb3Provider();\n    this.setAppId(appId);\n    this.provider.on(ProviderEvents.pair, this.handlePairing);\n  }\n\n  /**\n   * @summary Checks if the provider is connected to the server\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return this.provider.isConnected();\n  }\n\n  /**\n   * @summary Checks if the provider is connected to the server and the Grindery Wallet\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return this.provider.isWalletConnected();\n  }\n\n  /**\n   * @summary Initiate connection to the Grindery Wallet\n   * @public\n   * @returns {Promise<string[]>} The array of ethereum addresses\n   * @since 0.1.0\n   */\n  public async connect(): Promise<string[]> {\n    return await this.provider.request({\n      method: GrinderyRpcProviderRequestMethodNames.eth_requestAccounts,\n    });\n  }\n\n  /**\n   * @summary Disconnects Grindery Wallet\n   * @public\n   * @returns {Promise<boolean>} True if wallet is disconnected\n   * @since 0.1.0\n   */\n  public async disconnect(): Promise<boolean> {\n    return await this.provider.request({\n      method: GrinderyRpcProviderRequestMethodNames.gws_disconnect,\n    });\n  }\n\n  /**\n   * @summary Sets the app id\n   * @public\n   * @since 0.1.0\n   * @param {string} appId The app id\n   * @returns {void}\n   */\n  public setAppId(appId: string): void {\n    this.provider.setAppId(appId);\n  }\n\n  /**\n   * @summary Sends a transaction request to the Grindery Wallet\n   * @public\n   * @since 0.1.0\n   * @param {object} params The transaction parameters\n   * @param {string} params.to The recipient address\n   * @param {string} [params.value] The amount to send in wei\n   * @param {string} [params.data] The data to send\n   * @returns {Promise<string[]>} Array with transaction hash string\n   */\n  public async sendTransaction(params: {\n    to: string;\n    value?: string;\n    data?: string;\n  }): Promise<string[]> {\n    return await this.provider.request<string[]>({\n      method: GrinderyRpcProviderRequestMethodNames.eth_sendTransaction,\n      params: [params],\n    });\n  }\n\n  /**\n   * @summary Sends a personal signature request to the Grindery Wallet\n   * @public\n   * @since 0.1.0\n   * @param {string} message The message to sign\n   * @returns {Promise<string>} Signature string\n   */\n  public async signMessage(message: string): Promise<string> {\n    return await this.provider.request<string>({\n      method: GrinderyRpcProviderRequestMethodNames.personal_sign,\n      params: [message, this.provider.getAddress()],\n    });\n  }\n\n  /**\n   * @summary Adds a listener to the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public on(event: ProviderEvent, callback: Function) {\n    this.provider.on(event, callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public removeListener(event: ProviderEvent, callback: Function) {\n    this.provider.removeListener(event, callback);\n    return this;\n  }\n\n  /**\n   * @summary Gets the Grindery Wallet ethereum provider\n   * @returns {GrinderyWalletProvider} The Grindery Wallet ethereum provider\n   */\n  private getWeb3Provider(): GrinderyWalletProvider {\n    let provider = window.ethereum?.providers?.find(\n      (provider: GrinderyWalletProvider | unknown) =>\n        provider instanceof GrinderyWalletProvider && provider.isGrinderyWallet\n    );\n    if (\n      !provider &&\n      window.ethereum instanceof GrinderyWalletProvider &&\n      window.ethereum.isGrinderyWallet\n    ) {\n      provider = window.ethereum;\n    }\n    if (!provider) {\n      provider = new GrinderyWalletProvider();\n    }\n    return provider;\n  }\n\n  /**\n   * @summary Handles the pairing request, by opening the Grindery Wallet\n   * @private\n   * @param ProviderRequestPairingResult\n   * @returns {void}\n   */\n  private handlePairing({\n    shortToken,\n    connectUrlBrowser,\n  }: GrinderyRpcApiRequestResults.requestPairing): void {\n    const WebApp = window.Telegram?.WebApp;\n    const redirectUrl = `https://walletconnect.grindery.com/connect/wc?uri=${shortToken}`;\n    if (\n      WebApp &&\n      WebApp.openTelegramLink &&\n      WebApp.platform &&\n      WebApp.platform !== 'unknown'\n    ) {\n      WebApp.openTelegramLink(connectUrlBrowser);\n      if (WebApp.close) {\n        window.Telegram.WebApp.close();\n      }\n    } else {\n      window.open(redirectUrl, '_blank');\n    }\n  }\n}\n","/**\n * @summary Get the app id from the script tag or window object\n * @returns {string} The app id\n */\nexport const getAppId = (): string => {\n  let appId: string = '';\n  const elements = document.querySelectorAll('[data-app-id]');\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n    const value = element.getAttribute('data-app-id');\n    const src = element.getAttribute('src');\n    const isGrinderySrc = src && src.includes('grindery-wallet-sdk');\n    if (value && isGrinderySrc) {\n      appId = value;\n    }\n  }\n  if (window.Grindery?.appId) {\n    appId = window.Grindery.appId;\n  }\n  return appId;\n};\n","import { GrinderyWalletSDK } from './sdk/GrinderyWalletSDK';\nimport { getAppId } from './utils/getAppId';\n\ndeclare global {\n  interface Window {\n    Telegram?: any;\n    ethereum?: any;\n    Grindery?: {\n      appId?: string;\n      WalletSDK?: GrinderyWalletSDK;\n    };\n  }\n}\n\nfunction init() {\n  if (\n    !window.Grindery?.WalletSDK ||\n    !(window.Grindery.WalletSDK instanceof GrinderyWalletSDK)\n  ) {\n    window.Grindery = {\n      ...(window.Grindery || {}),\n      WalletSDK: new GrinderyWalletSDK({\n        appId: getAppId(),\n      }),\n    };\n  }\n}\n\n// Initialize the SDK\ninit();\n"],"names":["ProviderEvents","ProviderStorageKeys","GrinderyRpcMethodNames","GrinderyRpcProviderRequestMethodNames","WalletProviderEventEmitter","events","Map","_proto","prototype","on","event","callback","has","set","get","push","removeListener","callbacks","filter","cb","emit","data","Array","_len","_key","arguments","console","log","forEach","apply","LOCALSTORAGE_KEY","WalletProviderLocalStorage","_WalletProviderEventE","_inheritsLoose","getStorageValue","key","value","getStorage","setStorageValue","storage","saveStorage","clearStorage","JSON","parse","localStorage","getItem","error","setItem","stringify","Error","WalletProviderError","_Error","message","code","_this","call","_wrapNativeSuper","WalletProviderErrors","PairingFailed","Disconnected","UnsupportedMethod","Unauthorized","NoResult","NoAppId","uuid","d","length","Math","random","toString","substr","vr","parseInt","WalletProvider","_WalletProviderLocalS","injectProvider","isConnected","chainId","isWalletConnected","sessionId","isWalletConnectionPending","pairingToken","getChain","parseFloat","split","getAddress","accounts","setAppId","appId","request","_request","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","method","params","_this$methods$method","_this$methods$method2","wrap","_callee$","_context","prev","next","disconnect","methods","sessionRequired","execute","abrupt","sent","t0","createProviderRpcError","stop","_x","sendAndWaitGrinderyRpcProviderRequest","_sendAndWaitGrinderyRpcProviderRequest","_callee2","timeout","_callee2$","_context2","sendGrinderyRpcProviderRequest","waitGrinderyRpcProviderRequest","requestToken","_x2","_x3","_x4","setAccounts","accountsChanged","registerProviderMethods","_sendGrinderyRpcProviderRequest","_callee3","_callee3$","_context3","sendGrinderyRpcApiRequest","scope","_x5","_x6","_waitGrinderyRpcProviderRequest","_callee4","_callee4$","_context4","waitForRequestResult","_x7","_x8","_sendGrinderyRpcApiRequest","_callee5","response","_callee5$","_context5","fetch","headers","body","jsonrpc","id","json","result","_x9","_x10","errorResponse","window","ethereum","providers","isArray","GrinderyWalletProvider","_WalletProvider","_this$registerProvide","eth_requestAccounts","_execute","pairResult","_pairResult","eth_accounts","waitForPairingResult","session","t1","requestPairing","clientId","connectUrl","connectUrlBrowser","shortToken","pair","t2","_execute2","eth_sendTransaction","_execute3","personal_sign","_execute4","gws_disconnect","_execute5","sessionToken","addEventListener","connect","restorePairing","restoreSession","_restorePairing","_callee6","_pairResult$session","_callee6$","_context6","namespaces","map","account","includes","_restoreSession","_callee7","_callee7$","_context7","GrinderyWalletSDK","provider","getWeb3Provider","handlePairing","_connect","_disconnect","sendTransaction","_sendTransaction","signMessage","_signMessage","_window$ethereum","find","isGrinderyWallet","_ref2","WebApp","_window$Telegram","Telegram","redirectUrl","openTelegramLink","platform","close","open","getAppId","elements","document","querySelectorAll","i","element","getAttribute","src","isGrinderySrc","_window$Grindery","Grindery","init","WalletSDK","_extends"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAYA,cAOX;AAPD,WAAYA,cAAc;EACxBA,qDAAmC;EACnCA,+BAAa;EACbA,qCAAmB;EACnBA,2CAAyB;EACzBA,+CAA6B;EAC7BA,qCAAmB;AACrB,CAAC,EAPWA,cAAc,KAAdA,cAAc;AAS1B,IAAYC,mBAMX;AAND,WAAYA,mBAAmB;EAC7BA,oDAA6B;EAC7BA,8CAAuB;EACvBA,gDAAyB;EACzBA,8DAAuC;EACvCA,gDAAyB;AAC3B,CAAC,EANWA,mBAAmB,KAAnBA,mBAAmB;AAQ/B;;;AAGA,IAAYC,sBAMX;AAND,WAAYA,sBAAsB;EAChCA,2DAAiC;EACjCA,uEAA6C;EAC7CA,6CAAmB;EACnBA,uEAA6C;EAC7CA,mDAA2B;AAC7B,CAAC,EANWA,sBAAsB,KAAtBA,sBAAsB;AAQlC;;;AAGA,IAAYC,qCAMX;AAND,WAAYA,qCAAqC;EAC/CA,oFAA2C;EAC3CA,sEAA6B;EAC7BA,wEAA+B;EAC/BA,oFAA2C;EAC3CA,0EAAiC;AACnC,CAAC,EANWA,qCAAqC,KAArCA,qCAAqC;;AC7BjD;;;;AAIA,IAAaC,0BAA0B;EAOrC,SAAAA;IACE,IAAI,CAACC,MAAM,GAAG,IAAIC,GAAG,EAAE;;;;;;;;;EAGzB,IAAAC,MAAA,GAAAH,0BAAA,CAAAI,SAAA;EAAAD,MAAA,CAOOE,EAAE,GAAF,SAAAA,GAAGC,KAAoB,EAAEC,QAAkB;IAChD,IAAI,CAAC,IAAI,CAACN,MAAM,CAACO,GAAG,CAACF,KAAK,CAAC,EAAE;MAC3B,IAAI,CAACL,MAAM,CAACQ,GAAG,CAACH,KAAK,EAAE,EAAE,CAAC;;IAE5B,IAAI,CAACL,MAAM,CAACS,GAAG,CAACJ,KAAK,CAAE,CAACK,IAAI,CAACJ,QAAQ,CAAC;IACtC,OAAO,IAAI;;;;;;;;;EAGbJ,MAAA,CAOOS,cAAc,GAAd,SAAAA,eAAeN,KAAoB,EAAEC,QAAkB;IAC5D,IAAI,IAAI,CAACN,MAAM,CAACO,GAAG,CAACF,KAAK,CAAC,EAAE;MAC1B,IAAMO,SAAS,GAAG,IAAI,CAACZ,MAAM,CAACS,GAAG,CAACJ,KAAK,CAAE,CAACQ,MAAM,CAAC,UAAAC,EAAE;QAAA,OAAIA,EAAE,KAAKR,QAAQ;QAAC;MACvE,IAAI,CAACN,MAAM,CAACQ,GAAG,CAACH,KAAK,EAAEO,SAAS,CAAC;;IAEnC,OAAO,IAAI;;;;;;;;;EAGbV,MAAA,CAOUa,IAAI,GAAJ,SAAAA,KAAKV,KAAoB;sCAAKW,IAAW,OAAAC,KAAA,CAAAC,IAAA,OAAAA,IAAA,WAAAC,IAAA,MAAAA,IAAA,GAAAD,IAAA,EAAAC,IAAA;MAAXH,IAAW,CAAAG,IAAA,QAAAC,SAAA,CAAAD,IAAA;;IACjD,IAAI,IAAI,CAACnB,MAAM,CAACO,GAAG,CAACF,KAAK,CAAC,EAAE;MAC1BgB,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEjB,KAAK,EAAEW,IAAI,CAAC,CAAC,CAAC,CAAC;MAC5D,IAAI,CAAChB,MAAM,CAACS,GAAG,CAACJ,KAAK,CAAE,CAACkB,OAAO,CAAC,UAAAjB,QAAQ;QACtCA,QAAQ,CAAAkB,KAAA,SAAIR,IAAI,CAAC;OAClB,CAAC;;IAEJ,OAAO,IAAI;GACZ;EAAA,OAAAjB,0BAAA;AAAA;;AC3DH,IAAM0B,gBAAgB,GAAG,wBAAwB;AAEjD;;;;;AAKA,IAAaC,0BAA2B,0BAAAC,qBAAA;EAAA,SAAAD;IAAA,OAAAC,qBAAA,CAAAH,KAAA,OAAAJ,SAAA;;EAAAQ,cAAA,CAAAF,0BAAA,EAAAC,qBAAA;EAAA,IAAAzB,MAAA,GAAAwB,0BAAA,CAAAvB,SAAA;;;;;;;EACtCD,MAAA,CAMU2B,eAAe,GAAf,SAAAA,gBAAgBC,GAAuB;IAC/C,IAAMC,KAAK,GAAG,IAAI,CAACC,UAAU,EAAE,CAACF,GAAG,CAAC,IAAI,EAAE;IAC1C,OAAOC,KAAK;;;;;;;;;EAGd7B,MAAA,CAOU+B,eAAe,GAAf,SAAAA,gBAAgBH,GAAuB,EAAEC,KAAa;IAC9D,IAAMG,OAAO,GAAG,IAAI,CAACF,UAAU,EAAE;IACjCE,OAAO,CAACJ,GAAG,CAAC,GAAGC,KAAK;IACpB,IAAI,CAACI,WAAW,CAACD,OAAO,CAAC;;;;;;;EAG3BhC,MAAA,CAKUkC,YAAY,GAAZ,SAAAA;IACR,IAAI,CAACD,WAAW,CAAC,EAAE,CAAC;;;;;;EAGtBjC,MAAA,CAIQ8B,UAAU,GAAV,SAAAA;IACN,IAAI;MACF,OAAOK,IAAI,CAACC,KAAK,CACfC,YAAY,CAACC,OAAO,CAACf,gBAAgB,CAAC,IAAI,IAAI,CAC5B;KACrB,CAAC,OAAOgB,KAAK,EAAE;MACdF,YAAY,CAACG,OAAO,CAACjB,gBAAgB,EAAEY,IAAI,CAACM,SAAS,CAAC,EAAE,CAAC,CAAC;MAC1D,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;;;;;;;EAI5C1C,MAAA,CAIQiC,WAAW,GAAX,SAAAA,YAAYD,OAAwB;IAC1CK,YAAY,CAACG,OAAO,CAACjB,gBAAgB,EAAEY,IAAI,CAACM,SAAS,CAACT,OAAO,CAAC,CAAC;GAChE;EAAA,OAAAR,0BAAA;AAAA,EAvD6C3B,0BAA0B;;ACV1E;;;;;AAKA,IAAa8C,mBAAoB,0BAAAC,MAAA;EAK/B,SAAAD,oBAAYE,OAAe,EAAEC,IAAa,EAAEhC,IAAc;;IACxDiC,KAAA,GAAAH,MAAA,CAAAI,IAAA,OAAMH,OAAO,CAAC;IALhBE,KAAA,KAAI,GAAW,6BAA6B;IAM1CA,KAAA,CAAKD,IAAI,GAAGA,IAAI;IAChBC,KAAA,CAAKjC,IAAI,GAAGA,IAAI;IAAC,OAAAiC,KAAA;;EAClBrB,cAAA,CAAAiB,mBAAA,EAAAC,MAAA;EAAA,OAAAD,mBAAA;AAAA,gBAAAM,gBAAA,CATsCP,KAAK;AAY9C,AAAO,IAAMQ,oBAAoB,GAAG;EAClCC,aAAa,eAAE,IAAIR,mBAAmB,CAAC,gBAAgB,EAAE,IAAI,CAAC;EAC9DS,YAAY,eAAE,IAAIT,mBAAmB,CAAC,cAAc,EAAE,IAAI,CAAC;EAC3DU,iBAAiB,eAAE,IAAIV,mBAAmB,CAAC,oBAAoB,EAAE,IAAI,CAAC;EACtEW,YAAY,eAAE,IAAIX,mBAAmB,CAAC,cAAc,EAAE,IAAI,CAAC;EAC3DY,QAAQ,eAAE,IAAIZ,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC;EACpDa,OAAO,eAAE,IAAIb,mBAAmB,CAAC,oBAAoB,EAAE,IAAI;CAC5D;;ACxBD;;;;AAIA,AAAO,IAAMc,IAAI,GAAG,SAAPA,IAAIA;EACf,IAAIC,CAAC,GAAG,EAAE;EACV,OAAOA,CAAC,CAACC,MAAM,GAAG,EAAE,EAClBD,CAAC,IAAIE,IAAI,CAACC,MAAM,EAAE,CACfC,QAAQ,CAAC,EAAE,CAAC,CACZC,MAAM,CAAC,CAAC,CAAC;EACd,IAAMC,EAAE,GAAG,CAAEC,QAAQ,CAACP,CAAC,CAACK,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,GAAI,GAAG,EAAED,QAAQ,CAAC,EAAE,CAAC;EACrE,OAAUJ,CAAC,CAACK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,SAAIL,CAAC,CAACK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,UAAKL,CAAC,CAACK,MAAM,CACrD,EAAE,EACF,CAAC,CACF,SAAIC,EAAE,GAAGN,CAAC,CAACK,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,SAAIL,CAAC,CAACK,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC;AAC/C,CAAC;;ACSD;;;;;AAKA,IAAaG,cAAe,0BAAAC,qBAAA;EAC1B,SAAAD;;IACEnB,KAAA,GAAAoB,qBAAA,CAAAnB,IAAA,MAAO;;;;;IAwHCD,KAAA,MAAK,GAAW,EAAE;;;;;IAMlBA,KAAA,QAAO,GAAY,YAAY;;;;;IAM/BA,KAAA,SAAQ,GAAWU,IAAI,EAAE;;;;;IAMzBV,KAAA,QAAO,GAA6B,EAAE;;;;;IAMtCA,KAAA,SAAQ,GAAc,EAAE;IA9IhCA,KAAA,CAAKqB,cAAc,EAAE;IAAC,OAAArB,KAAA;;;;;;EAGxBrB,cAAA,CAAAwC,cAAA,EAAAC,qBAAA;EAAA,IAAAnE,MAAA,GAAAkE,cAAA,CAAAjE,SAAA;EAAAD,MAAA,CAIOqE,WAAW,GAAX,SAAAA;IACL,OAAO,CAAC,CAAC,IAAI,CAACC,OAAO;;;;;;EAGvBtE,MAAA,CAIOuE,iBAAiB,GAAjB,SAAAA;IACL,OACE,IAAI,CAACF,WAAW,EAAE,IAClB,CAAC,CAAC,IAAI,CAAC1C,eAAe,CAACjC,mBAAmB,CAAC8E,SAAS,CAAC;;;;;;EAIzDxE,MAAA,CAIOyE,yBAAyB,GAAzB,SAAAA;IACL,OACE,IAAI,CAACJ,WAAW,EAAE,IAClB,CAAC,CAAC,IAAI,CAAC1C,eAAe,CAACjC,mBAAmB,CAACgF,YAAY,CAAC,IACxD,CAAC,IAAI,CAAC/C,eAAe,CAACjC,mBAAmB,CAAC8E,SAAS,CAAC;;;;;;;EAIxDxE,MAAA,CAKO2E,QAAQ,GAAR,SAAAA;IACL,cAAYC,UAAU,CAAC,IAAI,CAACN,OAAO,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAACf,QAAQ,CAAC,EAAE,CAAC;;;;;;;EAGjE9D,MAAA,CAKO8E,UAAU,GAAV,SAAAA;IACL,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC,IAAI,EAAE;;;;;;;;EAG/B/E,MAAA,CAMOgF,QAAQ,GAAR,SAAAA,SAASC,KAAa;IAC3B,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,OAAO,IAAI,CAACA,KAAK;;;;;;;;;;EAGnBjF,MAAA,CAQakF,OAAO;;EAAA;IAAA,IAAAC,QAAA,gBAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAb,SAAAC,QAAAC,IAAA;MAAA,IAAAC,MAAA,EAAAC,MAAA,EAAAC,oBAAA,EAAAC,qBAAA;MAAA,OAAAP,mBAAA,GAAAQ,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAmBR,MAAM,GAAAD,IAAA,CAANC,MAAM,EAAEC,MAAM,GAAAF,IAAA,CAANE,MAAM;YAAA,IAIjC,IAAI,CAACpB,OAAO;cAAAyB,QAAA,CAAAE,IAAA;cAAA;;YACf,IAAI,CAACpF,IAAI,CAACpB,cAAc,CAACyG,UAAU,EAAEhD,oBAAoB,CAACE,YAAY,CAAC;YAAC,MAClEF,oBAAoB,CAACE,YAAY;UAAA;YAAA,IAEpC,IAAI,CAAC+C,OAAO,CAACV,MAAM,CAAC;cAAAM,QAAA,CAAAE,IAAA;cAAA;;YAAA,MACjB/C,oBAAoB,CAACG,iBAAiB;UAAA;YAAA0C,QAAA,CAAAC,IAAA;YAAA,MAIxC,CAAAL,oBAAA,OAAI,CAACQ,OAAO,CAACV,MAAM,CAAC,aAApBE,oBAAA,CAAsBS,eAAe,IAAI,CAAC,IAAI,CAAC7B,iBAAiB,EAAE;cAAAwB,QAAA,CAAAE,IAAA;cAAA;;YAAA,MAC9D/C,oBAAoB,CAACI,YAAY;UAAA;YAAAyC,QAAA,CAAAE,IAAA;YAAA,QAAAL,qBAAA,GAG3B,IAAI,CAACO,OAAO,CAACV,MAAM,CAAC,qBAApBG,qBAAA,CAAsBS,OAAO,CAACX,MAAM,CAAC;UAAA;YAAA,OAAAK,QAAA,CAAAO,MAAA,WAAAP,QAAA,CAAAQ,IAAA;UAAA;YAAAR,QAAA,CAAAC,IAAA;YAAAD,QAAA,CAAAS,EAAA,GAAAT,QAAA;YAAA,MAE7C,IAAI,CAACU,sBAAsB,CAAAV,QAAA,CAAAS,EAAM,CAAC;UAAA;UAAA;YAAA,OAAAT,QAAA,CAAAW,IAAA;;SAAAnB,OAAA;KAE3C;IAAA,SAAAL,QAAAyB,EAAA;MAAA,OAAAxB,QAAA,CAAA7D,KAAA,OAAAJ,SAAA;;IAAA,OAAAgE,OAAA;;;;;;;;;;;EAEDlF,MAAA,CAQa4G,qCAAqC;;EAAA;IAAA,IAAAC,sCAAA,gBAAAzB,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAA3C,SAAAwB,SACLrB,MAA4C,EAC5CC,MAA2B,EAC3BqB,OAAgB;MAAA,IAAA7B,OAAA;MAAA,OAAAG,mBAAA,GAAAQ,IAAA,UAAAmB,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAAjB,IAAA,GAAAiB,SAAA,CAAAhB,IAAA;UAAA;YAAAgB,SAAA,CAAAhB,IAAA;YAAA,OAEM,IAAI,CAACiB,8BAA8B,CAACzB,MAAM,EAAEC,MAAM,CAAC;UAAA;YAAnER,OAAO,GAAA+B,SAAA,CAAAV,IAAA;YAAAU,SAAA,CAAAhB,IAAA;YAAA,OACA,IAAI,CAACkB,8BAA8B,CAC9CjC,OAAO,CAACkC,YAAY,EACpBL,OAAO,CACR;UAAA;YAAA,OAAAE,SAAA,CAAAX,MAAA,WAAAW,SAAA,CAAAV,IAAA;UAAA;UAAA;YAAA,OAAAU,SAAA,CAAAP,IAAA;;SAAAI,QAAA;KACF;IAAA,SAAAF,sCAAAS,GAAA,EAAAC,GAAA,EAAAC,GAAA;MAAA,OAAAV,sCAAA,CAAAvF,KAAA,OAAAJ,SAAA;;IAAA,OAAA0F,qCAAA;;EAAA5G,MAAA,CAgCSwH,WAAW,GAAX,SAAAA,YAAYzC,QAAmB;IACvC,IAAI5C,IAAI,CAACM,SAAS,CAACsC,QAAQ,CAAC,KAAK5C,IAAI,CAACM,SAAS,CAAC,IAAI,CAACsC,QAAQ,CAAC,EAAE;MAC9D,IAAI,CAAClE,IAAI,CAACpB,cAAc,CAACgI,eAAe,EAAE1C,QAAQ,CAAC;;IAErD,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IACxB,OAAO,IAAI,CAACA,QAAQ;;;;;;;;EAGtB/E,MAAA,CAMU0H,uBAAuB,GAAvB,SAAAA,wBAAwBvB,OAAiC;IACjE,IAAI,CAACA,OAAO,GAAGA,OAAO;;;;;;;;;EAGxBnG,MAAA,CAOgBkH,8BAA8B;;EAAA;IAAA,IAAAS,+BAAA,gBAAAvC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAApC,SAAAsC,SACRnC,MAA4C,EAC5CC,MAA2B;MAAA,OAAAL,mBAAA,GAAAQ,IAAA,UAAAgC,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAA9B,IAAA,GAAA8B,SAAA,CAAA7B,IAAA;UAAA;YAAA,IAEtB,IAAI,CAACtE,eAAe,CAACjC,mBAAmB,CAAC8E,SAAS,CAAC;cAAAsD,SAAA,CAAA7B,IAAA;cAAA;;YAAA,MAChD/C,oBAAoB,CAACI,YAAY;UAAA;YAAAwE,SAAA,CAAA9B,IAAA;YAAA8B,SAAA,CAAA7B,IAAA;YAAA,OAI1B,IAAI,CAAC8B,yBAAyB,CAEzCpI,sBAAsB,CAACuF,OAAO,EAAE;cAChCV,SAAS,EAAE,IAAI,CAAC7C,eAAe,CAACjC,mBAAmB,CAAC8E,SAAS,CAAC;cAC9DwD,KAAK,EAAE,IAAI,CAAC1D,OAAO;cACnBY,OAAO,EAAE;gBACPO,MAAM,EAANA,MAAM;gBACNC,MAAM,EAANA;;aAEH,CAAC;UAAA;YAAA,OAAAoC,SAAA,CAAAxB,MAAA,WAAAwB,SAAA,CAAAvB,IAAA;UAAA;YAAAuB,SAAA,CAAA9B,IAAA;YAAA8B,SAAA,CAAAtB,EAAA,GAAAsB,SAAA;YAAA,MAEI,IAAI,CAACrB,sBAAsB,CAAAqB,SAAA,CAAAtB,EAAM,CAAC;UAAA;UAAA;YAAA,OAAAsB,SAAA,CAAApB,IAAA;;SAAAkB,QAAA;KAE3C;IAAA,SAAAV,+BAAAe,GAAA,EAAAC,GAAA;MAAA,OAAAP,+BAAA,CAAArG,KAAA,OAAAJ,SAAA;;IAAA,OAAAgG,8BAAA;;;;;;;;;;EAEDlH,MAAA,CAOgBmH,8BAA8B;;EAAA;IAAA,IAAAgB,+BAAA,gBAAA/C,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAApC,SAAA8C,SACRhB,YAA0B,EAC1BL,OAAgB;MAAA,OAAA1B,mBAAA,GAAAQ,IAAA,UAAAwC,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAAtC,IAAA,GAAAsC,SAAA,CAAArC,IAAA;UAAA;YAAA,IAEX,IAAI,CAACtE,eAAe,CAACjC,mBAAmB,CAAC8E,SAAS,CAAC;cAAA8D,SAAA,CAAArC,IAAA;cAAA;;YAAA,MAChD/C,oBAAoB,CAACI,YAAY;UAAA;YAAAgF,SAAA,CAAAtC,IAAA;YAAAsC,SAAA,CAAArC,IAAA;YAAA,OAG1B,IAAI,CAAC8B,yBAAyB,CACzCpI,sBAAsB,CAAC4I,oBAAoB,EAC3C;cACEnB,YAAY,EAAZA,YAAY;cACZL,OAAO,EAAPA;aACD,CACF;UAAA;YAAA,OAAAuB,SAAA,CAAAhC,MAAA,WAAAgC,SAAA,CAAA/B,IAAA;UAAA;YAAA+B,SAAA,CAAAtC,IAAA;YAAAsC,SAAA,CAAA9B,EAAA,GAAA8B,SAAA;YAAA,MAEK,IAAI,CAAC7B,sBAAsB,CAAA6B,SAAA,CAAA9B,EAAM,CAAC;UAAA;UAAA;YAAA,OAAA8B,SAAA,CAAA5B,IAAA;;SAAA0B,QAAA;KAE3C;IAAA,SAAAjB,+BAAAqB,GAAA,EAAAC,GAAA;MAAA,OAAAN,+BAAA,CAAA7G,KAAA,OAAAJ,SAAA;;IAAA,OAAAiG,8BAAA;;;;;;;;;;EAEDnH,MAAA,CAOgB+H,yBAAyB;;EAAA;IAAA,IAAAW,0BAAA,gBAAAtD,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAA/B,SAAAqD,SACRlD,MAA6B,EAC7BC,MAA+B;MAAA,IAAAkD,QAAA,EAAA9H,IAAA;MAAA,OAAAuE,mBAAA,GAAAQ,IAAA,UAAAgD,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAA9C,IAAA,GAAA8C,SAAA,CAAA7C,IAAA;UAAA;YAAA6C,SAAA,CAAA9C,IAAA;YAAA8C,SAAA,CAAA7C,IAAA;YAAA,OAGN8C,KAAK,CAAC,wCAAwC,EAAE;cACrEtD,MAAM,EAAE,MAAM;cACduD,OAAO,EAAE;gBACP,cAAc,EAAE;eACjB;cACDC,IAAI,EAAE9G,IAAI,CAACM,SAAS,CAAC;gBACnByG,OAAO,EAAE,KAAK;gBACdC,EAAE,EAAE,CAAC;gBACL1D,MAAM,WAASA,MAAQ;gBACvBC,MAAM,EAAEA,MAAM,IAAI;eACnB;aACF,CAAC;UAAA;YAXIkD,QAAQ,GAAAE,SAAA,CAAAvC,IAAA;YAAAuC,SAAA,CAAA7C,IAAA;YAAA,OAYK2C,QAAQ,CAACQ,IAAI,EAAE;UAAA;YAA5BtI,IAAI,GAAAgI,SAAA,CAAAvC,IAAA;YAAA,KACNzF,IAAI,CAACyB,KAAK;cAAAuG,SAAA,CAAA7C,IAAA;cAAA;;YAAA,MACN,IAAItD,mBAAmB,CAAC7B,IAAI,CAACyB,KAAK,CAACM,OAAO,EAAE/B,IAAI,CAACyB,KAAK,CAACO,IAAI,CAAC;UAAA;YAAA,IAE/DhC,IAAI,CAACuI,MAAM;cAAAP,SAAA,CAAA7C,IAAA;cAAA;;YAAA,MACR/C,oBAAoB,CAACK,QAAQ;UAAA;YAAA,OAAAuF,SAAA,CAAAxC,MAAA,WAE9BxF,IAAI,CAACuI,MAAM;UAAA;YAAAP,SAAA,CAAA9C,IAAA;YAAA8C,SAAA,CAAAtC,EAAA,GAAAsC,SAAA;YAAA,MAEZ,IAAI,CAACrC,sBAAsB,CAAAqC,SAAA,CAAAtC,EAAM,CAAC;UAAA;UAAA;YAAA,OAAAsC,SAAA,CAAApC,IAAA;;SAAAiC,QAAA;KAE3C;IAAA,SAAAZ,0BAAAuB,GAAA,EAAAC,IAAA;MAAA,OAAAb,0BAAA,CAAApH,KAAA,OAAAJ,SAAA;;IAAA,OAAA6G,yBAAA;;;;;;;;;EAED/H,MAAA,CAMUyG,sBAAsB,GAAtB,SAAAA,uBAAuBlE,KAAe;IAC9C,IAAIiH,aAAkC;IACtC,IAAIjH,KAAK,YAAYI,mBAAmB,EAAE;MACxC6G,aAAa,GAAG,IAAI7G,mBAAmB,CACrCJ,KAAK,CAACM,OAAO,IAAI,eAAe,EAChCN,KAAK,CAACO,IAAI,IAAI,IAAI,EAClBP,KAAK,CAACzB,IAAI,CACX;KACF,MAAM,IAAIyB,KAAK,YAAYG,KAAK,EAAE;MACjC8G,aAAa,GAAG,IAAI7G,mBAAmB,CACrCJ,KAAK,CAACM,OAAO,IAAI,eAAe,EAChC,IAAI,EACJN,KAAK,CACN;KACF,MAAM;MACLiH,aAAa,GAAG,IAAI7G,mBAAmB,CAAC,eAAe,EAAE,IAAI,EAAEJ,KAAK,CAAC;;IAEvE,OAAOiH,aAAa;;;;;;;EAGtBxJ,MAAA,CAKQoE,cAAc,GAAd,SAAAA;IACN,IAAI,CAACqF,MAAM,CAACC,QAAQ,EAAE;MACpBD,MAAM,CAACC,QAAQ,GAAG,IAAI;KACvB,MAAM;MACL,IACED,MAAM,CAACC,QAAQ,CAACC,SAAS,IACzB5I,KAAK,CAAC6I,OAAO,CAACH,MAAM,CAACC,QAAQ,CAACC,SAAS,CAAC,EACxC;QACAF,MAAM,CAACC,QAAQ,CAACC,SAAS,CAACnJ,IAAI,CAAC,IAAI,CAAC;OACrC,MAAM;QACLiJ,MAAM,CAACC,QAAQ,CAACC,SAAS,GAAG,CAACF,MAAM,CAACC,QAAQ,EAAE,IAAI,CAAC;;;GAGxD;EAAA,OAAAxF,cAAA;AAAA,EAjTiC1C,0BAA0B;;ACd9D;;;;;AAKA,IAAaqI,sBAAuB,0BAAAC,eAAA;EAOlC,SAAAD;;;IACE9G,KAAA,GAAA+G,eAAA,CAAA9G,IAAA,MAAO;;;;IAHOD,KAAA,iBAAgB,GAAY,IAAI;IAK9CA,KAAA,CAAK2E,uBAAuB,EAAAqC,qBAAA,OAAAA,qBAAA,CACzBnK,qCAAqC,CAACoK,mBAAmB,IAAG;MAC3D5D,eAAe,EAAE,KAAK;MACtBC,OAAO;QAAA,IAAA4D,QAAA,GAAA7E,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAE,SAAAC,QACPG,MAA+B;UAAA,IAAAwE,UAAA,EAAAb,MAAA,EAAAc,WAAA;UAAA,OAAA9E,mBAAA,GAAAQ,IAAA,UAAAC,SAAAC,QAAA;YAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;cAAA;gBAAA,KAE3BlD,KAAA,CAAKwB,iBAAiB,EAAE;kBAAAwB,QAAA,CAAAE,IAAA;kBAAA;;gBAAAF,QAAA,CAAAC,IAAA;gBAAAD,QAAA,CAAAE,IAAA;gBAAA,OAEXlD,KAAA,CAAKmC,OAAO,CAEvB;kBACAO,MAAM,EAAE7F,qCAAqC,CAACwK,YAAY;kBAC1D1E,MAAM,EAAEA,MAAM,IAAI;iBACnB,CAAC;cAAA;gBAAA,OAAAK,QAAA,CAAAO,MAAA,WAAAP,QAAA,CAAAQ,IAAA;cAAA;gBAAAR,QAAA,CAAAC,IAAA;gBAAAD,QAAA,CAAAS,EAAA,GAAAT,QAAA;gBAEFhD,KAAA,CAAKhB,eAAe,CAACrC,mBAAmB,CAAC8E,SAAS,EAAE,EAAE,CAAC;;cACvD;gBAAA,KAGAzB,KAAA,CAAK0B,yBAAyB,EAAE;kBAAAsB,QAAA,CAAAE,IAAA;kBAAA;;gBAAAF,QAAA,CAAAC,IAAA;gBAAAD,QAAA,CAAAE,IAAA;gBAAA,OAEPlD,KAAA,CAAKgF,yBAAyB,CAErDpI,sBAAsB,CAAC0K,oBAAoB,EAAE;kBAC7C3F,YAAY,EAAE3B,KAAA,CAAKpB,eAAe,CAChCjC,mBAAmB,CAACgF,YAAY;iBAEnC,CAAC;cAAA;gBANIwF,UAAU,GAAAnE,QAAA,CAAAQ,IAAA;gBAQhBxD,KAAA,CAAKb,YAAY,EAAE;gBACnBa,KAAA,CAAKhB,eAAe,CAClBrC,mBAAmB,CAAC8E,SAAS,EAC7B0F,UAAU,CAACI,OAAO,CAAC9F,SAAS,CAC7B;gBAAC,IAEG0F,UAAU,CAACI,OAAO,CAAC9F,SAAS;kBAAAuB,QAAA,CAAAE,IAAA;kBAAA;;gBAAA,MACzB/C,oBAAoB,CAACC,aAAa;cAAA;gBAAA4C,QAAA,CAAAE,IAAA;gBAAA,OAG7BlD,KAAA,CAAKmC,OAAO,CAEvB;kBACAO,MAAM,EAAE7F,qCAAqC,CAACwK,YAAY;kBAC1D1E,MAAM,EAAEA,MAAM,IAAI;iBACnB,CAAC;cAAA;gBAAA,OAAAK,QAAA,CAAAO,MAAA,WAAAP,QAAA,CAAAQ,IAAA;cAAA;gBAAAR,QAAA,CAAAC,IAAA;gBAAAD,QAAA,CAAAwE,EAAA,GAAAxE,QAAA;gBAEFhD,KAAA,CAAKb,YAAY,EAAE;;cACnB;gBAAA6D,QAAA,CAAAC,IAAA;gBAAAD,QAAA,CAAAE,IAAA;gBAAA,OAImBlD,KAAA,CAAKgF,yBAAyB,CAEjDpI,sBAAsB,CAAC6K,cAAc,EAAE;kBACvCvF,KAAK,EAAElC,KAAA,CAAKkC,KAAK;kBACjBwF,QAAQ,EAAE1H,KAAA,CAAK0H;iBAChB,CAAC;cAAA;gBALIpB,MAAM,GAAAtD,QAAA,CAAAQ,IAAA;gBAAA,MAOR,CAAC8C,MAAM,CAAC3E,YAAY,IAAI,CAAC2E,MAAM,CAACqB,UAAU;kBAAA3E,QAAA,CAAAE,IAAA;kBAAA;;gBAAA,MACtC/C,oBAAoB,CAACC,aAAa;cAAA;gBAG1CJ,KAAA,CAAKhB,eAAe,CAClBrC,mBAAmB,CAACgF,YAAY,EAChC2E,MAAM,CAAC3E,YAAY,CACpB;gBACD3B,KAAA,CAAKhB,eAAe,CAClBrC,mBAAmB,CAACgL,UAAU,EAC9BrB,MAAM,CAACqB,UAAU,CAClB;gBACD3H,KAAA,CAAKhB,eAAe,CAClBrC,mBAAmB,CAACiL,iBAAiB,EACrCtB,MAAM,CAACsB,iBAAiB,CACzB;gBACD5H,KAAA,CAAKhB,eAAe,CAClBrC,mBAAmB,CAACkL,UAAU,EAC9BvB,MAAM,CAACuB,UAAU,CAClB;gBACD7H,KAAA,CAAKlC,IAAI,CAACpB,cAAc,CAACoL,IAAI,EAAE;kBAC7BD,UAAU,EAAEvB,MAAM,CAACuB,UAAU;kBAC7BF,UAAU,EAAErB,MAAM,CAACqB,UAAU;kBAC7BC,iBAAiB,EAAEtB,MAAM,CAACsB;iBAC3B,CAAC;gBAAC5E,QAAA,CAAAE,IAAA;gBAAA,OACsBlD,KAAA,CAAKgF,yBAAyB,CAErDpI,sBAAsB,CAAC0K,oBAAoB,EAAE;kBAC7C3F,YAAY,EAAE2E,MAAM,CAAC3E;iBACtB,CAAC;cAAA;gBAJIwF,WAAU,GAAAnE,QAAA,CAAAQ,IAAA;gBAMhBxD,KAAA,CAAKhB,eAAe,CAClBrC,mBAAmB,CAAC8E,SAAS,EAC7B0F,WAAU,CAACI,OAAO,CAAC9F,SAAS,CAC7B;gBAAC,IAEG0F,WAAU,CAACI,OAAO,CAAC9F,SAAS;kBAAAuB,QAAA,CAAAE,IAAA;kBAAA;;gBAAA,MACzB/C,oBAAoB,CAACC,aAAa;cAAA;gBAE1CJ,KAAA,CAAKhB,eAAe,CAACrC,mBAAmB,CAACgF,YAAY,EAAE,EAAE,CAAC;gBAC1D3B,KAAA,CAAKhB,eAAe,CAACrC,mBAAmB,CAACgL,UAAU,EAAE,EAAE,CAAC;gBACxD3H,KAAA,CAAKhB,eAAe,CAACrC,mBAAmB,CAACiL,iBAAiB,EAAE,EAAE,CAAC;gBAC/D5H,KAAA,CAAKhB,eAAe,CAACrC,mBAAmB,CAACkL,UAAU,EAAE,EAAE,CAAC;gBAAC7E,QAAA,CAAAE,IAAA;gBAAA,OAE5ClD,KAAA,CAAKmC,OAAO,CAAC;kBACxBO,MAAM,EAAE7F,qCAAqC,CAACwK,YAAY;kBAC1D1E,MAAM,EAAEA,MAAM,IAAI;iBACnB,CAAC;cAAA;gBAAA,OAAAK,QAAA,CAAAO,MAAA,WAAAP,QAAA,CAAAQ,IAAA;cAAA;gBAAAR,QAAA,CAAAC,IAAA;gBAAAD,QAAA,CAAA+E,EAAA,GAAA/E,QAAA;gBAAA,MAEIhD,KAAA,CAAK0D,sBAAsB,CAAAV,QAAA,CAAA+E,EAAM,CAAC;cAAA;cAAA;gBAAA,OAAA/E,QAAA,CAAAW,IAAA;;aAAAnB,OAAA;SAE3C;QAAA,SAAAc,QAAAM,EAAA;UAAA,OAAAsD,QAAA,CAAA3I,KAAA,OAAAJ,SAAA;;QAAA,OAAAmF,OAAA;;KACF,EAAA0D,qBAAA,CACAnK,qCAAqC,CAACwK,YAAY,IAAG;MACpDhE,eAAe,EAAE,IAAI;MACrBC,OAAO;QAAA,IAAA0E,SAAA,GAAA3F,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAE,SAAAwB,SACPpB,MAA+B;UAAA,OAAAL,mBAAA,GAAAQ,IAAA,UAAAmB,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAAjB,IAAA,GAAAiB,SAAA,CAAAhB,IAAA;cAAA;gBAAAgB,SAAA,CAAAjB,IAAA;gBAAAiB,SAAA,CAAAT,EAAA,GAAAzD,KAAA;gBAAAkE,SAAA,CAAAhB,IAAA;gBAAA,OAIrBlD,KAAA,CAAK6D,qCAAqC,CAC9ChH,qCAAqC,CAACwK,YAAY,EAClD1E,MAAM,GAAI3E,KAAK,CAAC6I,OAAO,CAAClE,MAAM,CAAC,GAAGA,MAAM,GAAG,CAACA,MAAM,CAAC,GAAI,EAAE,CAC1D;cAAA;gBAAAuB,SAAA,CAAAsD,EAAA,GAAAtD,SAAA,CAAAV,IAAA;gBAAA,OAAAU,SAAA,CAAAX,MAAA,WAAAW,SAAA,CAAAT,EAAA,CAJSgB,WAAW,CAAAxE,IAAA,CAAAiE,SAAA,CAAAT,EAAA,EAAAS,SAAA,CAAAsD,EAAA;cAAA;gBAAAtD,SAAA,CAAAjB,IAAA;gBAAAiB,SAAA,CAAA6D,EAAA,GAAA7D,SAAA;gBAAA,MAOjBlE,KAAA,CAAK0D,sBAAsB,CAAAQ,SAAA,CAAA6D,EAAM,CAAC;cAAA;cAAA;gBAAA,OAAA7D,SAAA,CAAAP,IAAA;;aAAAI,QAAA;SAE3C;QAAA,SAAAT,QAAAgB,GAAA;UAAA,OAAA0D,SAAA,CAAAzJ,KAAA,OAAAJ,SAAA;;QAAA,OAAAmF,OAAA;;KACF,EAAA0D,qBAAA,CACAnK,qCAAqC,CAACoL,mBAAmB,IAAG;MAC3D5E,eAAe,EAAE,IAAI;MACrBC,OAAO;QAAA,IAAA4E,SAAA,GAAA7F,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAE,SAAAsC,SACPlC,MAA+B;UAAA,OAAAL,mBAAA,GAAAQ,IAAA,UAAAgC,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAA9B,IAAA,GAAA8B,SAAA,CAAA7B,IAAA;cAAA;gBAAA6B,SAAA,CAAA7B,IAAA;gBAAA,OAElBlD,KAAA,CAAK6D,qCAAqC,CACrDhH,qCAAqC,CAACoL,mBAAmB,EACzDtF,MAAM,GAAI3E,KAAK,CAAC6I,OAAO,CAAClE,MAAM,CAAC,GAAGA,MAAM,GAAG,CAACA,MAAM,CAAC,GAAI,EAAE,CAC1D;cAAA;gBAAA,OAAAoC,SAAA,CAAAxB,MAAA,WAAAwB,SAAA,CAAAvB,IAAA;cAAA;cAAA;gBAAA,OAAAuB,SAAA,CAAApB,IAAA;;aAAAkB,QAAA;SACF;QAAA,SAAAvB,QAAAiB,GAAA;UAAA,OAAA2D,SAAA,CAAA3J,KAAA,OAAAJ,SAAA;;QAAA,OAAAmF,OAAA;;KACF,EAAA0D,qBAAA,CACAnK,qCAAqC,CAACsL,aAAa,IAAG;MACrD9E,eAAe,EAAE,IAAI;MACrBC,OAAO;QAAA,IAAA8E,SAAA,GAAA/F,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAE,SAAA8C,SACP1C,MAAwC;UAAA,OAAAL,mBAAA,GAAAQ,IAAA,UAAAwC,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAAtC,IAAA,GAAAsC,SAAA,CAAArC,IAAA;cAAA;gBAAAqC,SAAA,CAAArC,IAAA;gBAAA,OAE3BlD,KAAA,CAAK6D,qCAAqC,CACrDhH,qCAAqC,CAACsL,aAAa,EACnDxF,MAAM,GAAI3E,KAAK,CAAC6I,OAAO,CAAClE,MAAM,CAAC,GAAGA,MAAM,GAAG,CAACA,MAAM,CAAC,GAAI,EAAE,CAC1D;cAAA;gBAAA,OAAA4C,SAAA,CAAAhC,MAAA,WAAAgC,SAAA,CAAA/B,IAAA;cAAA;cAAA;gBAAA,OAAA+B,SAAA,CAAA5B,IAAA;;aAAA0B,QAAA;SACF;QAAA,SAAA/B,QAAAkB,GAAA;UAAA,OAAA4D,SAAA,CAAA7J,KAAA,OAAAJ,SAAA;;QAAA,OAAAmF,OAAA;;KACF,EAAA0D,qBAAA,CACAnK,qCAAqC,CAACwL,cAAc,IAAG;MACtDhF,eAAe,EAAE,IAAI;MACrBC,OAAO;QAAA,IAAAgF,SAAA,GAAAjG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAE,SAAAqD;UAAA,IAAAU,MAAA;UAAA,OAAAhE,mBAAA,GAAAQ,IAAA,UAAAgD,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAA9C,IAAA,GAAA8C,SAAA,CAAA7C,IAAA;cAAA;gBAAA6C,SAAA,CAAA9C,IAAA;gBAAA8C,SAAA,CAAA7C,IAAA;gBAAA,OAEgBlD,KAAA,CAAKgF,yBAAyB,CAEjDpI,sBAAsB,CAACuG,UAAU,EAAE;kBACnCoF,YAAY,EAAEvI,KAAA,CAAKpB,eAAe,CAACjC,mBAAmB,CAAC8E,SAAS;iBACjE,CAAC;cAAA;gBAJI6E,MAAM,GAAAP,SAAA,CAAAvC,IAAA;gBAKZxD,KAAA,CAAKlC,IAAI,CACPpB,cAAc,CAACyG,UAAU,EACzBhD,oBAAoB,CAACE,YAAY,CAClC;gBACDL,KAAA,CAAKb,YAAY,EAAE;gBACnBa,KAAA,CAAKyE,WAAW,CAAC,EAAE,CAAC;gBAAC,OAAAsB,SAAA,CAAAxC,MAAA,WACd+C,MAAM;cAAA;gBAAAP,SAAA,CAAA9C,IAAA;gBAAA8C,SAAA,CAAAtC,EAAA,GAAAsC,SAAA;gBAAA,MAEP/F,KAAA,CAAK0D,sBAAsB,CAAAqC,SAAA,CAAAtC,EAAM,CAAC;cAAA;cAAA;gBAAA,OAAAsC,SAAA,CAAApC,IAAA;;aAAAiC,QAAA;SAE3C;QAAA,SAAAtC;UAAA,OAAAgF,SAAA,CAAA/J,KAAA,OAAAJ,SAAA;;QAAA,OAAAmF,OAAA;;KACF,EAAA0D,qBAAA,EACD;IAEFN,MAAM,CAAC8B,gBAAgB,CAAC,MAAM,EAAE;MAC9BxI,KAAA,CAAKlC,IAAI,CAACpB,cAAc,CAAC+L,OAAO,EAAEzI,KAAA,CAAK4B,QAAQ,EAAE,CAAC;MAClD5B,KAAA,CAAK0I,cAAc,EAAE;MACrB1I,KAAA,CAAK2I,cAAc,EAAE;KACtB,CAAC;IAAC,OAAA3I,KAAA;;;;;;;EAGLrB,cAAA,CAAAmI,sBAAA,EAAAC,eAAA;EAAA,IAAA9J,MAAA,GAAA6J,sBAAA,CAAA5J,SAAA;EAAAD,MAAA,CAKcyL,cAAc;;EAAA;IAAA,IAAAE,eAAA,gBAAAvG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAApB,SAAAsG;MAAA,IAAAlH,YAAA,EAAAF,SAAA,EAAAqH,mBAAA,EAAA3B,UAAA,EAAAnF,QAAA;MAAA,OAAAM,mBAAA,GAAAQ,IAAA,UAAAiG,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAA/F,IAAA,GAAA+F,SAAA,CAAA9F,IAAA;UAAA;YACAvB,YAAY,GAAG,IAAI,CAAC/C,eAAe,CAACjC,mBAAmB,CAACgF,YAAY,CAAC;YACrEF,SAAS,GAAG,IAAI,CAAC7C,eAAe,CAACjC,mBAAmB,CAAC8E,SAAS,CAAC;YAAA,MACjEE,YAAY,IAAI,CAACF,SAAS;cAAAuH,SAAA,CAAA9F,IAAA;cAAA;;YAAA8F,SAAA,CAAA/F,IAAA;YAAA+F,SAAA,CAAA9F,IAAA;YAAA,OAED,IAAI,CAAC8B,yBAAyB,CAErDpI,sBAAsB,CAAC0K,oBAAoB,EAAE;cAC7C3F,YAAY,EAAZA;aACD,CAAC;UAAA;YAJIwF,UAAU,GAAA6B,SAAA,CAAAxF,IAAA;YAMhB,IAAI,CAACrE,YAAY,EAAE;YACnB,IAAI,CAACH,eAAe,CAClBrC,mBAAmB,CAAC8E,SAAS,EAC7B0F,UAAU,CAACI,OAAO,CAAC9F,SAAS,CAC7B;YAAC,IAEG0F,UAAU,CAACI,OAAO,CAAC9F,SAAS;cAAAuH,SAAA,CAAA9F,IAAA;cAAA;;YAAA,MACzB/C,oBAAoB,CAACC,aAAa;UAAA;YAGpC4B,QAAQ,GAAG,CACf,EAAA8G,mBAAA,GAAA3B,UAAU,CAACI,OAAO,cAAAuB,mBAAA,GAAlBA,mBAAA,CAAoBG,UAAU,cAAAH,mBAAA,GAA9BA,mBAAA,UAA0C,qBAA1CA,mBAAA,CAA4C9G,QAAQ,KAAI,EAAE,EAC1DkH,GAAG,CAAC,UAAAC,OAAO;cAAA,OACXA,OAAO,CAACC,QAAQ,CAAC,GAAG,CAAC,GAAGD,OAAO,CAACrH,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,GAAGqH,OAAO;cAC9D;YACD,IAAI,CAAC1E,WAAW,CAACzC,QAAQ,CAAC;YAACgH,SAAA,CAAA9F,IAAA;YAAA;UAAA;YAAA8F,SAAA,CAAA/F,IAAA;YAAA+F,SAAA,CAAAvF,EAAA,GAAAuF,SAAA;YAE3B,IAAI,CAACvE,WAAW,CAAC,EAAE,CAAC;YACpB,IAAI,CAACtF,YAAY,EAAE;UAAC;UAAA;YAAA,OAAA6J,SAAA,CAAArF,IAAA;;SAAAkF,QAAA;KAGzB;IAAA,SAAAH;MAAA,OAAAE,eAAA,CAAArK,KAAA,OAAAJ,SAAA;;IAAA,OAAAuK,cAAA;;;;;;;;EAEDzL,MAAA,CAKc0L,cAAc;;EAAA;IAAA,IAAAU,eAAA,gBAAAhH,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAApB,SAAA+G;MAAA,IAAA3H,YAAA,EAAAF,SAAA;MAAA,OAAAa,mBAAA,GAAAQ,IAAA,UAAAyG,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAAvG,IAAA,GAAAuG,SAAA,CAAAtG,IAAA;UAAA;YACAvB,YAAY,GAAG,IAAI,CAAC/C,eAAe,CAACjC,mBAAmB,CAACgF,YAAY,CAAC;YACrEF,SAAS,GAAG,IAAI,CAAC7C,eAAe,CAACjC,mBAAmB,CAAC8E,SAAS,CAAC;YAAA,MACjEA,SAAS,IAAI,CAACE,YAAY;cAAA6H,SAAA,CAAAtG,IAAA;cAAA;;YAAAsG,SAAA,CAAAvG,IAAA;YAAAuG,SAAA,CAAAtG,IAAA;YAAA,OAEpB,IAAI,CAACf,OAAO,CAAW;cAC3BO,MAAM,EAAE7F,qCAAqC,CAACoK;aAC/C,CAAC;UAAA;YAAAuC,SAAA,CAAAtG,IAAA;YAAA;UAAA;YAAAsG,SAAA,CAAAvG,IAAA;YAAAuG,SAAA,CAAA/F,EAAA,GAAA+F,SAAA;YAEF,IAAI,CAAC/E,WAAW,CAAC,EAAE,CAAC;YACpB,IAAI,CAACtF,YAAY,EAAE;UAAC;UAAA;YAAA,OAAAqK,SAAA,CAAA7F,IAAA;;SAAA2F,QAAA;KAGzB;IAAA,SAAAX;MAAA,OAAAU,eAAA,CAAA9K,KAAA,OAAAJ,SAAA;;IAAA,OAAAwK,cAAA;;EAAA,OAAA7B,sBAAA;AAAA,EAvPyC3F,cAAc;;ACT1D;;;;AAIA,IAAasI,iBAAiB;EAO5B,SAAAA,kBAAAhH,IAAA;QAAcP,KAAK,GAAAO,IAAA,CAALP,KAAK;IACjB,IAAI,CAACwH,QAAQ,GAAG,IAAI,CAACC,eAAe,EAAE;IACtC,IAAI,CAAC1H,QAAQ,CAACC,KAAK,CAAC;IACpB,IAAI,CAACwH,QAAQ,CAACvM,EAAE,CAACT,cAAc,CAACoL,IAAI,EAAE,IAAI,CAAC8B,aAAa,CAAC;;;;;;EAG3D,IAAA3M,MAAA,GAAAwM,iBAAA,CAAAvM,SAAA;EAAAD,MAAA,CAIOqE,WAAW,GAAX,SAAAA;IACL,OAAO,IAAI,CAACoI,QAAQ,CAACpI,WAAW,EAAE;;;;;;EAGpCrE,MAAA,CAIOuE,iBAAiB,GAAjB,SAAAA;IACL,OAAO,IAAI,CAACkI,QAAQ,CAAClI,iBAAiB,EAAE;;;;;;;;EAG1CvE,MAAA,CAMawL,OAAO;;EAAA;IAAA,IAAAoB,QAAA,gBAAAxH,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAb,SAAAC;MAAA,OAAAF,mBAAA,GAAAQ,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAAF,QAAA,CAAAE,IAAA;YAAA,OACQ,IAAI,CAACwG,QAAQ,CAACvH,OAAO,CAAC;cACjCO,MAAM,EAAE7F,qCAAqC,CAACoK;aAC/C,CAAC;UAAA;YAAA,OAAAjE,QAAA,CAAAO,MAAA,WAAAP,QAAA,CAAAQ,IAAA;UAAA;UAAA;YAAA,OAAAR,QAAA,CAAAW,IAAA;;SAAAnB,OAAA;KACH;IAAA,SAAAiG;MAAA,OAAAoB,QAAA,CAAAtL,KAAA,OAAAJ,SAAA;;IAAA,OAAAsK,OAAA;;;;;;;;;EAEDxL,MAAA,CAMakG,UAAU;;EAAA;IAAA,IAAA2G,WAAA,gBAAAzH,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAhB,SAAAwB;MAAA,OAAAzB,mBAAA,GAAAQ,IAAA,UAAAmB,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAAjB,IAAA,GAAAiB,SAAA,CAAAhB,IAAA;UAAA;YAAAgB,SAAA,CAAAhB,IAAA;YAAA,OACQ,IAAI,CAACwG,QAAQ,CAACvH,OAAO,CAAC;cACjCO,MAAM,EAAE7F,qCAAqC,CAACwL;aAC/C,CAAC;UAAA;YAAA,OAAAnE,SAAA,CAAAX,MAAA,WAAAW,SAAA,CAAAV,IAAA;UAAA;UAAA;YAAA,OAAAU,SAAA,CAAAP,IAAA;;SAAAI,QAAA;KACH;IAAA,SAAAZ;MAAA,OAAA2G,WAAA,CAAAvL,KAAA,OAAAJ,SAAA;;IAAA,OAAAgF,UAAA;;;;;;;;;;EAEDlG,MAAA,CAOOgF,QAAQ,GAAR,SAAAA,SAASC,KAAa;IAC3B,IAAI,CAACwH,QAAQ,CAACzH,QAAQ,CAACC,KAAK,CAAC;;;;;;;;;;;;EAG/BjF,MAAA,CAUa8M,eAAe;;EAAA;IAAA,IAAAC,gBAAA,gBAAA3H,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAArB,SAAAsC,SAAsBlC,MAI5B;MAAA,OAAAL,mBAAA,GAAAQ,IAAA,UAAAgC,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAA9B,IAAA,GAAA8B,SAAA,CAAA7B,IAAA;UAAA;YAAA6B,SAAA,CAAA7B,IAAA;YAAA,OACc,IAAI,CAACwG,QAAQ,CAACvH,OAAO,CAAW;cAC3CO,MAAM,EAAE7F,qCAAqC,CAACoL,mBAAmB;cACjEtF,MAAM,EAAE,CAACA,MAAM;aAChB,CAAC;UAAA;YAAA,OAAAoC,SAAA,CAAAxB,MAAA,WAAAwB,SAAA,CAAAvB,IAAA;UAAA;UAAA;YAAA,OAAAuB,SAAA,CAAApB,IAAA;;SAAAkB,QAAA;KACH;IAAA,SAAAkF,gBAAAnG,EAAA;MAAA,OAAAoG,gBAAA,CAAAzL,KAAA,OAAAJ,SAAA;;IAAA,OAAA4L,eAAA;;;;;;;;;;EAED9M,MAAA,CAOagN,WAAW;;EAAA;IAAA,IAAAC,YAAA,gBAAA7H,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAjB,SAAA8C,SAAkBvF,OAAe;MAAA,OAAAwC,mBAAA,GAAAQ,IAAA,UAAAwC,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAAtC,IAAA,GAAAsC,SAAA,CAAArC,IAAA;UAAA;YAAAqC,SAAA,CAAArC,IAAA;YAAA,OACzB,IAAI,CAACwG,QAAQ,CAACvH,OAAO,CAAS;cACzCO,MAAM,EAAE7F,qCAAqC,CAACsL,aAAa;cAC3DxF,MAAM,EAAE,CAAC7C,OAAO,EAAE,IAAI,CAAC4J,QAAQ,CAAC3H,UAAU,EAAE;aAC7C,CAAC;UAAA;YAAA,OAAAwD,SAAA,CAAAhC,MAAA,WAAAgC,SAAA,CAAA/B,IAAA;UAAA;UAAA;YAAA,OAAA+B,SAAA,CAAA5B,IAAA;;SAAA0B,QAAA;KACH;IAAA,SAAA4E,YAAA3F,GAAA;MAAA,OAAA4F,YAAA,CAAA3L,KAAA,OAAAJ,SAAA;;IAAA,OAAA8L,WAAA;;;;;;;;;;EAEDhN,MAAA,CAOOE,EAAE,GAAF,SAAAA,GAAGC,KAAoB,EAAEC,QAAkB;IAChD,IAAI,CAACqM,QAAQ,CAACvM,EAAE,CAACC,KAAK,EAAEC,QAAQ,CAAC;IACjC,OAAO,IAAI;;;;;;;;;EAGbJ,MAAA,CAOOS,cAAc,GAAd,SAAAA,eAAeN,KAAoB,EAAEC,QAAkB;IAC5D,IAAI,CAACqM,QAAQ,CAAChM,cAAc,CAACN,KAAK,EAAEC,QAAQ,CAAC;IAC7C,OAAO,IAAI;;;;;;EAGbJ,MAAA,CAIQ0M,eAAe,GAAf,SAAAA;;IACN,IAAID,QAAQ,IAAAS,gBAAA,GAAGzD,MAAM,CAACC,QAAQ,cAAAwD,gBAAA,GAAfA,gBAAA,CAAiBvD,SAAS,qBAA1BuD,gBAAA,CAA4BC,IAAI,CAC7C,UAACV,QAA0C;MAAA,OACzCA,QAAQ,YAAY5C,sBAAsB,IAAI4C,QAAQ,CAACW,gBAAgB;MAC1E;IACD,IACE,CAACX,QAAQ,IACThD,MAAM,CAACC,QAAQ,YAAYG,sBAAsB,IACjDJ,MAAM,CAACC,QAAQ,CAAC0D,gBAAgB,EAChC;MACAX,QAAQ,GAAGhD,MAAM,CAACC,QAAQ;;IAE5B,IAAI,CAAC+C,QAAQ,EAAE;MACbA,QAAQ,GAAG,IAAI5C,sBAAsB,EAAE;;IAEzC,OAAO4C,QAAQ;;;;;;;;EAGjBzM,MAAA,CAMQ2M,aAAa,GAAb,SAAAA,cAAAU,KAAA;;QACNzC,UAAU,GAAAyC,KAAA,CAAVzC,UAAU;MACVD,iBAAiB,GAAA0C,KAAA,CAAjB1C,iBAAiB;IAEjB,IAAM2C,MAAM,IAAAC,gBAAA,GAAG9D,MAAM,CAAC+D,QAAQ,qBAAfD,gBAAA,CAAiBD,MAAM;IACtC,IAAMG,WAAW,0DAAwD7C,UAAY;IACrF,IACE0C,MAAM,IACNA,MAAM,CAACI,gBAAgB,IACvBJ,MAAM,CAACK,QAAQ,IACfL,MAAM,CAACK,QAAQ,KAAK,SAAS,EAC7B;MACAL,MAAM,CAACI,gBAAgB,CAAC/C,iBAAiB,CAAC;MAC1C,IAAI2C,MAAM,CAACM,KAAK,EAAE;QAChBnE,MAAM,CAAC+D,QAAQ,CAACF,MAAM,CAACM,KAAK,EAAE;;KAEjC,MAAM;MACLnE,MAAM,CAACoE,IAAI,CAACJ,WAAW,EAAE,QAAQ,CAAC;;GAErC;EAAA,OAAAjB,iBAAA;AAAA;;ACzLH;;;;AAIA,AAAO,IAAMsB,QAAQ,GAAG,SAAXA,QAAQA;;EACnB,IAAI7I,KAAK,GAAW,EAAE;EACtB,IAAM8I,QAAQ,GAAGC,QAAQ,CAACC,gBAAgB,CAAC,eAAe,CAAC;EAC3D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,CAACpK,MAAM,EAAEuK,CAAC,EAAE,EAAE;IACxC,IAAMC,OAAO,GAAGJ,QAAQ,CAACG,CAAC,CAAC;IAC3B,IAAMrM,KAAK,GAAGsM,OAAO,CAACC,YAAY,CAAC,aAAa,CAAC;IACjD,IAAMC,GAAG,GAAGF,OAAO,CAACC,YAAY,CAAC,KAAK,CAAC;IACvC,IAAME,aAAa,GAAGD,GAAG,IAAIA,GAAG,CAAClC,QAAQ,CAAC,qBAAqB,CAAC;IAChE,IAAItK,KAAK,IAAIyM,aAAa,EAAE;MAC1BrJ,KAAK,GAAGpD,KAAK;;;EAGjB,KAAA0M,gBAAA,GAAI9E,MAAM,CAAC+E,QAAQ,aAAfD,gBAAA,CAAiBtJ,KAAK,EAAE;IAC1BA,KAAK,GAAGwE,MAAM,CAAC+E,QAAQ,CAACvJ,KAAK;;EAE/B,OAAOA,KAAK;AACd,CAAC;;ACND,SAASwJ,IAAIA;;EACX,IACE,GAAAF,gBAAA,GAAC9E,MAAM,CAAC+E,QAAQ,aAAfD,gBAAA,CAAiBG,SAAS,KAC3B,EAAEjF,MAAM,CAAC+E,QAAQ,CAACE,SAAS,YAAYlC,iBAAiB,CAAC,EACzD;IACA/C,MAAM,CAAC+E,QAAQ,GAAAG,QAAA,KACTlF,MAAM,CAAC+E,QAAQ,IAAI,EAAE;MACzBE,SAAS,EAAE,IAAIlC,iBAAiB,CAAC;QAC/BvH,KAAK,EAAE6I,QAAQ;OAChB;MACF;;AAEL;AAEA;AACAW,IAAI,EAAE"}