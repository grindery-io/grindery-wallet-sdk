{"version":3,"file":"grindery-wallet-sdk.umd.production.min.js","sources":["../src/provider/ProviderError.ts","../src/provider/GrinderyWalletProvider.ts","../src/provider/Provider.ts","../src/provider/ProviderLocalStorage.ts","../src/provider/ProviderEventEmitter.ts","../src/sdk/GrinderyWalletSDK.ts","../src/index.ts"],"sourcesContent":["/**\n * @summary Error class for GrinderyWalletProvider\n * @since 0.1.0\n * @extends Error\n */\nexport class ProviderError extends Error {\n  name: string = 'GrinderyWalletProviderError';\n  code?: number;\n  data?: unknown;\n\n  constructor(message: string, code?: number, data?: unknown) {\n    super(message);\n    this.code = code;\n    this.data = data;\n  }\n}\n","import { Provider } from './Provider';\nimport { ProviderError } from './ProviderError';\nimport {\n  ProviderInterface,\n  ProviderPairingResult,\n  ProviderRequestPairingResult,\n  RequestArgumentsParams,\n} from './types';\n\n/**\n * @summary The Grindery Wallet Ethereum Injected Provider Class.\n * @extends Provider\n * @implements ProviderInterface\n */\nexport class GrinderyWalletProvider extends Provider\n  implements ProviderInterface {\n  /**\n   * @summary Indicates that the provider is a Grindery Wallet.\n   */\n  public readonly isGrinderyWallet: boolean = true;\n\n  constructor() {\n    super();\n\n    this.registerProviderMethods({\n      eth_requestAccounts: {\n        sessionRequired: false,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          if (this.isWalletConnected()) {\n            try {\n              const accounts = await this.request<string[]>({\n                method: 'eth_accounts',\n                params: params || [],\n              });\n              this.accounts = accounts;\n              this.emit('accountsChanged', { accounts });\n              return accounts;\n            } catch (error) {\n              this.setStorageValue('sessionId', '');\n              // skip failed request and continue with pairing\n            }\n          }\n          if (this.isWalletConnectionPending()) {\n            try {\n              this.emit('restorePairing', {\n                connectUrl: this.getStorageValue('connectUrl'),\n                connectUrlBrowser: this.getStorageValue('connectUrlBrowser'),\n              });\n\n              const pairResult = await this.sendGrinderyRpcApiRequest<\n                ProviderPairingResult\n              >('checkout_waitForPairingResult', {\n                pairingToken: this.getStorageValue('pairingToken'),\n              });\n\n              this.clearStorage();\n              this.setStorageValue('sessionId', pairResult.session.sessionId);\n\n              if (!pairResult.session.sessionId) {\n                throw new ProviderError('Pairing failed', 4900);\n              }\n\n              const accounts =\n                pairResult.session?.namespaces?.[`eip155`]?.accounts || [];\n              this.accounts = accounts;\n              this.emit('accountsChanged', { accounts });\n              return [];\n            } catch (error) {\n              this.clearStorage();\n              // skip failed request and continue with pairing\n            }\n          }\n          try {\n            const result = await this.sendGrinderyRpcApiRequest<\n              ProviderRequestPairingResult\n            >('checkout_requestPairing', { appId: this.appId });\n\n            if (!result.pairingToken || !result.connectUrl) {\n              throw new ProviderError('Pairing failed', 4900);\n            }\n\n            this.setStorageValue('pairingToken', result.pairingToken);\n            this.setStorageValue('connectUrl', result.connectUrl);\n            this.setStorageValue('connectUrlBrowser', result.connectUrlBrowser);\n            this.emit('pairing', {\n              connectUrl: result.connectUrl,\n              connectUrlBrowser: result.connectUrlBrowser,\n            });\n            const pairResult = await this.sendGrinderyRpcApiRequest<\n              ProviderPairingResult\n            >('checkout_waitForPairingResult', {\n              pairingToken: result.pairingToken,\n            });\n\n            this.setStorageValue('sessionId', pairResult.session.sessionId);\n\n            if (!pairResult.session.sessionId) {\n              throw new ProviderError('Pairing failed', 4900);\n            }\n            this.setStorageValue('pairingToken', '');\n            this.setStorageValue('connectUrl', '');\n            this.setStorageValue('connectUrlBrowser', '');\n            const accounts =\n              pairResult.session?.namespaces?.[`eip155`]?.accounts || [];\n            this.accounts = accounts;\n            this.emit('accountsChanged', { accounts });\n            return accounts;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      eth_accounts: {\n        sessionRequired: true,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          try {\n            const accounts = await this.sendAndWaitGrinderyRpcProviderRequest<\n              string[]\n            >(\n              'eth_accounts',\n              params ? (Array.isArray(params) ? params : [params]) : []\n            );\n            this.accounts = accounts;\n            this.emit('accountsChanged', { accounts });\n            return accounts;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      eth_sendTransaction: {\n        sessionRequired: true,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest<string[]>(\n            'eth_sendTransaction',\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n      personal_sign: {\n        sessionRequired: true,\n        execute: async (\n          params?: Partial<RequestArgumentsParams>\n        ): Promise<string> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest(\n            'personal_sign',\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n    });\n  }\n}\n","import { ProviderError } from './ProviderError';\nimport { ProviderLocalStorage } from './ProviderLocalStorage';\nimport {\n  GrinderyRpcMethodName,\n  GrinderyRpcProviderRequestMethodName,\n  ProviderMethods,\n  ProviderRequestResult,\n  RequestArguments,\n  RequestArgumentsParams,\n} from './types';\n\n/**\n * @summary The provider class\n * @since 0.1.0\n * @extends ProviderLocalStorage\n */\nexport class Provider extends ProviderLocalStorage {\n  constructor() {\n    super();\n\n    this.injectProvider();\n\n    window.addEventListener('load', () => {\n      this.emit('connect', { chainId: this.getChain() });\n      this.restoreSession();\n    });\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return !!this.chainId;\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return this.isConnected() && !!this.getStorageValue('sessionId');\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet pairing is in progress (pending).\n   */\n  public isWalletConnectionPending(): boolean {\n    return this.isConnected() && !!this.getStorageValue('pairingToken');\n  }\n\n  /**\n   * @summary Gets the connected chain ID in hex format\n   * @public\n   * @returns {string} The chain ID in hex format\n   */\n  public getChain(): string {\n    return `0x${parseFloat(this.chainId.split(':')[1]).toString(16)}`;\n  }\n\n  /**\n   * @summary Gets the connected user's wallet address\n   * @public\n   * @returns {string} The ethereum wallet address\n   */\n  public getAddress(): string {\n    return this.accounts[0]?.split(':')[2] || '';\n  }\n\n  /**\n   * @summary Sends a request to the provider\n   * @public\n   * @param {RequestArguments} args Request arguments\n   * @param {string} args.method The method name\n   * @param {RequestArgumentsParams} args.params The method parameters\n   * @returns {T} The result of the request\n   */\n  public async request<T>({ method, params }: RequestArguments): Promise<T> {\n    if (!this.chainId) {\n      this.emit('disconnect', new ProviderError('Disconnected', 4900));\n      throw new ProviderError('Disconnected', 4900);\n    }\n    if (!this.methods[method]) {\n      throw new ProviderError('Unsupported Method', 4200);\n    }\n\n    try {\n      if (this.methods[method].sessionRequired && !this.isWalletConnected()) {\n        throw new ProviderError('Unauthorized', 4900);\n      }\n\n      return (await this.methods[method].execute(params)) as T;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary The application ID.\n   * @protected\n   */\n  protected appId: string = window.location.href;\n\n  /**\n   * @summary The chain ID in CAIP-2 format; e.g. \"eip155:1\".\n   * @protected\n   */\n  protected chainId: string = 'eip155:137';\n\n  /**\n   * @summary The list of supported provider methods.\n   * @protected\n   */\n  protected methods: ProviderMethods = {};\n\n  /**\n   * @summary The user's wallet addresses list.\n   * @protected\n   */\n  protected accounts: string[] = [];\n\n  /**\n   * @summary Registers the provider methods.\n   * @protected\n   * @param {ProviderMethods} methods A map of supported provider methods.\n   * @returns {void}\n   */\n  protected registerProviderMethods(methods: ProviderMethods): void {\n    this.methods = methods;\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API and waits for the result.\n   * @protected\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  protected async sendAndWaitGrinderyRpcProviderRequest<T>(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[],\n    timeout?: number\n  ): Promise<T> {\n    const request = await this.sendGrinderyRpcProviderRequest(method, params);\n    return await this.waitGrinderyRpcProviderRequest(\n      request.requestToken,\n      timeout\n    );\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API.\n   * @protected\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @returns {ProviderRequestResult} The request token to use in the `waitGrinderyRpcProviderRequest` method\n   */\n  protected async sendGrinderyRpcProviderRequest(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[]\n  ): Promise<ProviderRequestResult> {\n    if (!this.getStorageValue('sessionId')) {\n      throw new ProviderError('Unauthorized', 4900);\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<ProviderRequestResult>(\n        'checkout_request',\n        {\n          sessionId: this.getStorageValue('sessionId'),\n          scope: this.chainId,\n          request: {\n            method,\n            params,\n          },\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Waits for the result of the provider request.\n   * @protected\n   * @param {string} requestToken A token to identify provider request. Recieved in the results of `sendGrinderyRpcProviderRequest` method.\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  protected async waitGrinderyRpcProviderRequest<T>(\n    requestToken: string,\n    timeout?: number\n  ): Promise<T> {\n    if (!this.getStorageValue('sessionId')) {\n      throw new ProviderError('Unauthorized', 4900);\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<T>(\n        'checkout_waitForRequestResult',\n        {\n          requestToken,\n          timeout,\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a request to the Grindery Walletconnect RPC API.\n   * @protected\n   * @param {GrinderyRpcMethodName} method Request method name\n   * @param {RequestArgumentsParams} params Request parameters\n   * @returns {T} The result of the request\n   */\n  protected async sendGrinderyRpcApiRequest<T>(\n    method: GrinderyRpcMethodName,\n    params?: RequestArgumentsParams\n  ): Promise<T> {\n    try {\n      const response = await fetch('https://walletconnect-api.grindery.com', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method,\n          params: params || [],\n        }),\n      });\n      const data = await response.json();\n      if (data.error) {\n        throw new ProviderError(data.error.message, data.error.code);\n      }\n      if (!data.result) {\n        throw new ProviderError('No result', 4900);\n      }\n      return data.result;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Creates a provider error from an unknown error\n   * @protected\n   * @param {unknown} error Optional. Error object.\n   * @returns {ProviderError} The provider error\n   */\n  protected createProviderRpcError(error?: unknown): ProviderError {\n    let errorResponse: ProviderError;\n    if (error instanceof ProviderError) {\n      errorResponse = new ProviderError(error.message || 'Unknown error');\n      errorResponse.code = error.code || 4900;\n      errorResponse.data = error.data;\n    } else if (error instanceof Error) {\n      errorResponse = new ProviderError(error.message || 'Unknown error');\n      errorResponse.code = 4900;\n    } else {\n      errorResponse = new ProviderError('Unknown error');\n      errorResponse.code = 4900;\n    }\n    return errorResponse;\n  }\n\n  /**\n   * @summary Restores the session if session Id is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restoreSession(): Promise<void> {\n    const sessionId = this.getStorageValue('sessionId');\n    if (sessionId) {\n      try {\n        await this.request<string[]>({\n          method: 'eth_requestAccounts',\n        });\n      } catch (error) {\n        this.accounts = [];\n        this.clearStorage();\n      }\n    }\n  }\n\n  /**\n   * @summary Injects the provider into the window object\n   * @private\n   * @returns {void}\n   */\n  private injectProvider(): void {\n    if (!window.ethereum) {\n      window.ethereum = this;\n    } else {\n      if (\n        window.ethereum.providers &&\n        Array.isArray(window.ethereum.providers)\n      ) {\n        window.ethereum.providers.push(this);\n      } else {\n        window.ethereum.providers = [window.ethereum, this];\n      }\n    }\n  }\n}\n","import { ProviderEventEmitter } from './ProviderEventEmitter';\nimport { ProviderStorage, ProviderStorageKey } from './types';\n\nconst LOCALSTORAGE_KEY = 'GrinderyWalletProvider';\n\n/**\n * @summary A local storage class for the provider\n * @since 0.1.0\n * @extends ProviderEventEmitter\n */\nexport class ProviderLocalStorage extends ProviderEventEmitter {\n  /**\n   * @summary Gets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @returns {string} The value of the storage by the key\n   */\n  protected getStorageValue(key: ProviderStorageKey): string {\n    const value = this.getStorage()[key] || '';\n    return value;\n  }\n\n  /**\n   * @summary Sets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @param {string} value The value to set\n   * @returns {void}\n   */\n  protected setStorageValue(key: ProviderStorageKey, value: string): void {\n    const storage = this.getStorage();\n    storage[key] = value;\n    this.saveStorage(storage);\n  }\n\n  /**\n   * @summary Clears the storage\n   * @protected\n   * @returns {void}\n   */\n  protected clearStorage(): void {\n    this.saveStorage({});\n  }\n\n  /**\n   * @summary Gets the provider storage\n   * @returns {ProviderStorage} The provider storage\n   */\n  private getStorage(): ProviderStorage {\n    try {\n      return JSON.parse(\n        localStorage.getItem(LOCALSTORAGE_KEY) || '{}'\n      ) as ProviderStorage;\n    } catch (error) {\n      localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify({}));\n      throw new Error('Error parsing storage');\n    }\n  }\n\n  /**\n   * @summary Saves the provider storage\n   * @param {ProviderStorage} storage Provider storage object\n   */\n  private saveStorage(storage: ProviderStorage): void {\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(storage));\n  }\n}\n","/**\n * @summary A class for emitting provider events\n * @since 0.1.0\n */\nexport class ProviderEventEmitter {\n  /**\n   * @summary A map of events and their listeners\n   */\n  private events: Map<string, Array<Function>>;\n\n  constructor() {\n    this.events = new Map();\n  }\n\n  /**\n   * @summary Adds a listener to the provider event\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {ProviderEventEmitter} The instance of the class itself\n   */\n  on(event: string, callback: Function) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event)!.push(callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the provider event\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {ProviderEventEmitter} The instance of the class itself\n   */\n  removeListener(event: string, callback: Function) {\n    if (this.events.has(event)) {\n      const callbacks = this.events.get(event)!.filter(cb => cb !== callback);\n      this.events.set(event, callbacks);\n    }\n    return this;\n  }\n\n  /**\n   * @summary Emits an event\n   * @param {string} event Event name\n   * @param data Event data\n   * @returns {ProviderEventEmitter} The instance of the class itself\n   */\n  protected emit(event: string, ...data: any[]) {\n    if (this.events.has(event)) {\n      console.log('[GrinderyWalletProvider] > Event:', event, data);\n      this.events.get(event)!.forEach(callback => {\n        callback(...data);\n      });\n    }\n    return this;\n  }\n}\n","import { GrinderyWalletProvider } from '../provider/GrinderyWalletProvider';\n\n/**\n * @summary The Grindery Wallet SDK class\n * @since 0.1.0\n */\nexport class GrinderyWalletSDK {\n  /**\n   * @summary The provider instance\n   * @public\n   */\n  public provider: GrinderyWalletProvider;\n\n  constructor() {\n    this.provider = this.getWeb3Provider();\n  }\n\n  /**\n   * @summary Gets the Grindery Wallet ethereum provider\n   * @returns {GrinderyWalletProvider} The Grindery Wallet ethereum provider\n   */\n  private getWeb3Provider(): GrinderyWalletProvider {\n    let provider = window.ethereum?.providers?.find(\n      (provider: GrinderyWalletProvider | unknown) =>\n        provider instanceof GrinderyWalletProvider && provider.isGrinderyWallet\n    );\n    if (\n      !provider &&\n      window.ethereum instanceof GrinderyWalletProvider &&\n      window.ethereum.isGrinderyWallet\n    ) {\n      provider = window.ethereum;\n    }\n    if (!provider) {\n      provider = new GrinderyWalletProvider();\n    }\n    return provider;\n  }\n}\n","import { GrinderyWalletSDK } from './sdk/GrinderyWalletSDK';\n\ndeclare global {\n  interface Window {\n    Telegram?: any;\n    ethereum?: any;\n    Grindery?: {\n      WalletSDK?: GrinderyWalletSDK;\n    };\n  }\n}\n\nfunction init() {\n  if (\n    !window.Grindery?.WalletSDK ||\n    !(window.Grindery.WalletSDK instanceof GrinderyWalletSDK)\n  ) {\n    window.Grindery = {\n      ...(window.Grindery || {}),\n      WalletSDK: new GrinderyWalletSDK(),\n    };\n  }\n}\n\n// Initialize the SDK when the page is loaded\ninit();\n"],"names":["ProviderError","_Error","message","code","data","_this","call","_inheritsLoose","_wrapNativeSuper","Error","GrinderyWalletProvider","_Provider","_execute4","_execute3","_execute2","_execute","registerProviderMethods","eth_requestAccounts","sessionRequired","execute","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","accounts","_pairResult$session","pairResult","_accounts","_pairResult$session2","result","_pairResult","_accounts2","wrap","_context","prev","next","isWalletConnected","request","method","sent","emit","abrupt","t0","setStorageValue","isWalletConnectionPending","connectUrl","getStorageValue","connectUrlBrowser","sendGrinderyRpcApiRequest","pairingToken","clearStorage","session","sessionId","namespaces","t1","appId","t2","createProviderRpcError","stop","_x","apply","arguments","eth_accounts","_callee2","_context2","sendAndWaitGrinderyRpcProviderRequest","Array","isArray","_x2","eth_sendTransaction","_callee3","_context3","_x3","personal_sign","_callee4","_context4","_x4","_ProviderLocalStorage","Provider","window","location","href","injectProvider","addEventListener","chainId","getChain","restoreSession","_proto","prototype","isConnected","this","parseFloat","split","toString","getAddress","_this$accounts$","_request","_ref","methods","_sendAndWaitGrinderyRpcProviderRequest","timeout","sendGrinderyRpcProviderRequest","waitGrinderyRpcProviderRequest","requestToken","_sendGrinderyRpcProviderRequest","scope","_x5","_x6","_waitGrinderyRpcProviderRequest","_x7","_x8","_sendGrinderyRpcApiRequest","_callee5","response","_context5","fetch","headers","Content-Type","body","JSON","stringify","jsonrpc","id","json","error","_x9","_x10","errorResponse","_restoreSession","_callee6","_context6","ethereum","providers","push","_ProviderEventEmitter","ProviderLocalStorage","key","getStorage","value","storage","saveStorage","parse","localStorage","getItem","setItem","ProviderEventEmitter","events","Map","on","event","callback","has","set","get","removeListener","callbacks","filter","cb","_len","_key","console","log","forEach","GrinderyWalletSDK","provider","getWeb3Provider","_window$ethereum","find","isGrinderyWallet","_window$Grindery","Grindery","WalletSDK","_extends"],"mappings":"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"}