{"version":3,"file":"grindery-wallet-sdk.umd.production.min.js","sources":["../src/provider/ProviderError.ts","../src/provider/GrinderyWalletProvider.ts","../src/provider/Provider.ts","../src/provider/ProviderLocalStorage.ts","../src/provider/ProviderEventEmitter.ts","../src/sdk/GrinderyWalletSDK.ts","../src/index.ts"],"sourcesContent":["export class ProviderError extends Error {\n  name: string = 'GrinderyWalletProviderError';\n  code?: number;\n  data?: unknown;\n\n  constructor(message: string, code?: number, data?: unknown) {\n    super(message);\n    this.code = code;\n    this.data = data;\n  }\n}\n","import { Provider } from './Provider';\nimport { ProviderError } from './ProviderError';\nimport {\n  ProviderInterface,\n  ProviderPairingResult,\n  ProviderRequestPairingResult,\n  RequestArgumentsParams,\n} from './types';\n\n/**\n * @summary The Grindery Wallet Ethereum Injected Provider Class.\n * @extends Provider\n * @implements ProviderInterface\n */\nexport class GrinderyWalletProvider extends Provider\n  implements ProviderInterface {\n  /**\n   * @summary Indicates that the provider is a Grindery Wallet.\n   */\n  public readonly isGrinderyWallet: boolean = true;\n\n  constructor() {\n    super();\n\n    this.registerProviderMethods({\n      /**\n       * @summary Connect a dApp to the Grindery Wallet.\n       * @since 0.1.0\n       * @returns {Promise<string[]>} The list of user wallets' addresses.\n       */\n      eth_requestAccounts: {\n        sessionRequired: false,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          if (this.isWalletConnected()) {\n            try {\n              return await this.request<string[]>({\n                method: 'eth_accounts',\n                params: params || [],\n              });\n            } catch (error) {\n              this.setStorageValue('sessionId', '');\n              // skip failed request and continue with pairing\n            }\n          }\n          if (this.isWalletConnectionPending()) {\n            try {\n              this.emit('restorePairing', {\n                connectUrl: this.getStorageValue('connectUrl'),\n                connectUrlBrowser: this.getStorageValue('connectUrlBrowser'),\n              });\n\n              const pairResult = await this.sendGrinderyRpcApiRequest<\n                ProviderPairingResult\n              >('checkout_waitForPairingResult', {\n                pairingToken: this.getStorageValue('pairingToken'),\n              });\n\n              this.setStorageValue('sessionId', pairResult.session.sessionId);\n              this.setStorageValue('pairingToken', '');\n              this.setStorageValue('connectUrl', '');\n              this.setStorageValue('connectUrlBrowser', '');\n\n              if (!pairResult.session.sessionId) {\n                throw new ProviderError('Pairing failed', 4900);\n              }\n\n              return [];\n            } catch (error) {\n              this.setStorageValue('sessionId', '');\n              this.setStorageValue('pairingToken', '');\n              this.setStorageValue('connectUrl', '');\n              this.setStorageValue('connectUrlBrowser', '');\n              // skip failed request and continue with pairing\n            }\n          }\n          try {\n            const result = await this.sendGrinderyRpcApiRequest<\n              ProviderRequestPairingResult\n            >('checkout_requestPairing', { appId: this.appId });\n\n            if (!result.pairingToken || !result.connectUrl) {\n              throw new ProviderError('Pairing failed', 4900);\n            }\n\n            this.setStorageValue('pairingToken', result.pairingToken);\n            this.setStorageValue('connectUrl', result.connectUrl);\n            this.setStorageValue('connectUrlBrowser', result.connectUrlBrowser);\n            this.emit('pairing', {\n              connectUrl: result.connectUrl,\n              connectUrlBrowser: result.connectUrlBrowser,\n            });\n            const pairResult = await this.sendGrinderyRpcApiRequest<\n              ProviderPairingResult\n            >('checkout_waitForPairingResult', {\n              pairingToken: result.pairingToken,\n            });\n\n            this.setStorageValue('sessionId', pairResult.session.sessionId);\n\n            if (!pairResult.session.sessionId) {\n              throw new ProviderError('Pairing failed', 4900);\n            }\n            this.setStorageValue('pairingToken', '');\n            this.setStorageValue('connectUrl', '');\n            this.setStorageValue('connectUrlBrowser', '');\n            if (pairResult.session.namespaces[`eip155`].accounts.length > 0) {\n              return pairResult.session.namespaces[`eip155`].accounts;\n            }\n            return await this.sendGrinderyRpcApiRequest<string[]>(\n              'checkout_request',\n              {\n                sessionId: pairResult.session.sessionId,\n                scope: this.chainId,\n                request: {\n                  method: 'eth_accounts',\n                  params: [],\n                },\n              }\n            );\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n\n      /**\n       * @summary Get a list of user wallets' addresses.\n       * @since 0.1.0\n       * @returns {Promise<string[]>} The list of user wallets' addresses.\n       */\n      eth_accounts: {\n        sessionRequired: true,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          try {\n            const { requestToken } = await this.sendGrinderyRpcProviderRequest(\n              'eth_accounts',\n              params ? (Array.isArray(params) ? params : [params]) : []\n            );\n            if (!requestToken) {\n              throw new ProviderError('No request token', 4900);\n            }\n            return await this.waitGrinderyRpcProviderRequest<string[]>(\n              requestToken\n            );\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      eth_sendTransaction: {\n        sessionRequired: true,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          try {\n            const { requestToken } = await this.sendGrinderyRpcProviderRequest(\n              'eth_sendTransaction',\n              params ? (Array.isArray(params) ? params : [params]) : []\n            );\n            if (!requestToken) {\n              throw new ProviderError('No request token', 4900);\n            }\n            return await this.waitGrinderyRpcProviderRequest<string[]>(\n              requestToken\n            );\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      personal_sign: {\n        sessionRequired: true,\n        execute: async (\n          params?: Partial<RequestArgumentsParams>\n        ): Promise<string> => {\n          try {\n            const { requestToken } = await this.sendGrinderyRpcProviderRequest(\n              'personal_sign',\n              params ? (Array.isArray(params) ? params : [params]) : []\n            );\n            if (!requestToken) {\n              throw new ProviderError('No request token', 4900);\n            }\n            return await this.waitGrinderyRpcProviderRequest(requestToken);\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n    });\n  }\n}\n","import { ProviderError } from './ProviderError';\nimport { ProviderLocalStorage } from './ProviderLocalStorage';\nimport {\n  GrinderyRpcMethodName,\n  GrinderyRpcProviderRequestMethodName,\n  ProviderMethods,\n  ProviderRequestResult,\n  RequestArguments,\n  RequestArgumentsParams,\n} from './types';\n\nexport class Provider extends ProviderLocalStorage {\n  constructor() {\n    super();\n\n    this.injectProvider();\n  }\n\n  /**\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return !!this.chainId;\n  }\n\n  /**\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return this.isConnected() && !!this.getStorageValue('sessionId');\n  }\n\n  /**\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet pairing is in progress (pending).\n   */\n  public isWalletConnectionPending(): boolean {\n    return this.isConnected() && !!this.getStorageValue('pairingToken');\n  }\n\n  public async request<T>({ method, params }: RequestArguments): Promise<T> {\n    if (method !== 'wallet_ping' && !this.chainId) {\n      throw new ProviderError('Disconnected', 4900);\n    }\n    if (!this.methods[method]) {\n      throw new ProviderError('Unsupported Method', 4200);\n    }\n\n    try {\n      if (this.methods[method].sessionRequired && !this.isWalletConnected()) {\n        throw new ProviderError('Unauthorized', 4900);\n      }\n\n      return (await this.methods[method].execute(params)) as T;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary The application ID.\n   */\n  protected appId: string = window.location.href;\n\n  /**\n   * @summary The chain ID in CAIP-2 format; e.g. \"eip155:1\".\n   */\n  protected chainId: string = 'eip155:137';\n\n  /**\n   * @summary The list of supported provider methods.\n   */\n  protected methods: ProviderMethods = {};\n\n  protected registerProviderMethods(methods: ProviderMethods): void {\n    this.methods = methods;\n  }\n\n  protected async sendGrinderyRpcProviderRequest(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[]\n  ): Promise<ProviderRequestResult> {\n    if (!this.getStorageValue('sessionId')) {\n      throw new ProviderError('Unauthorized', 4900);\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<ProviderRequestResult>(\n        'checkout_request',\n        {\n          sessionId: this.getStorageValue('sessionId'),\n          scope: this.chainId,\n          request: {\n            method,\n            params,\n          },\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  protected async waitGrinderyRpcProviderRequest<T>(\n    requestToken: string,\n    timeout?: number\n  ): Promise<T> {\n    if (!this.getStorageValue('sessionId')) {\n      throw new ProviderError('Unauthorized', 4900);\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<T>(\n        'checkout_waitForRequestResult',\n        {\n          requestToken,\n          timeout,\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  protected async sendGrinderyRpcApiRequest<T>(\n    method: GrinderyRpcMethodName,\n    params?: RequestArgumentsParams\n  ): Promise<T> {\n    try {\n      const response = await fetch('https://walletconnect-api.grindery.com', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method,\n          params: params || [],\n        }),\n      });\n      const data = await response.json();\n      if (data.error) {\n        throw new ProviderError(data.error.message, data.error.code);\n      }\n      if (!data.result) {\n        throw new ProviderError('No result', 4900);\n      }\n      return data.result;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  protected createProviderRpcError(error: unknown): ProviderError {\n    let errorResponse: ProviderError;\n    if (error instanceof ProviderError) {\n      errorResponse = new ProviderError(error.message || 'Unknown error');\n      errorResponse.code = error.code || 4900;\n      errorResponse.data = error.data;\n    } else if (error instanceof Error) {\n      errorResponse = new ProviderError(error.message || 'Unknown error');\n      errorResponse.code = 4900;\n    } else {\n      errorResponse = new ProviderError('Unknown error');\n      errorResponse.code = 4900;\n    }\n    return errorResponse;\n  }\n\n  private injectProvider(): void {\n    if (!window.ethereum) {\n      window.ethereum = this;\n    } else {\n      if (\n        window.ethereum.providers &&\n        Array.isArray(window.ethereum.providers)\n      ) {\n        window.ethereum.providers.push(this);\n      } else {\n        window.ethereum.providers = [window.ethereum, this];\n      }\n    }\n\n    addEventListener('load', () => {\n      this.emit('connect', { chainId: this.chainId });\n    });\n  }\n}\n","import { ProviderEventEmitter } from './ProviderEventEmitter';\nimport { ProviderStorage, ProviderStorageKey } from './types';\n\nconst LOCALSTORAGE_KEY = 'GrinderyWalletProvider';\n\n/**\n * @summary A local storage class for the provider\n * @since 0.1.0\n * @extends ProviderEventEmitter\n */\nexport class ProviderLocalStorage extends ProviderEventEmitter {\n  /**\n   * @summary Gets the value of the storage by the key\n   * @param {ProviderStorageKey} key Provider storage key\n   * @returns {string} The value of the storage by the key\n   */\n  protected getStorageValue(key: ProviderStorageKey): string {\n    const value = this.getStorage()[key] || '';\n    return value;\n  }\n\n  /**\n   * @summary Sets the value of the storage by the key\n   * @param {ProviderStorageKey} key Provider storage key\n   * @param {string} value The value to set\n   */\n  protected setStorageValue(key: ProviderStorageKey, value: string): void {\n    const storage = this.getStorage();\n    storage[key] = value;\n    this.saveStorage(storage);\n  }\n\n  private getStorage(): ProviderStorage {\n    try {\n      return JSON.parse(\n        localStorage.getItem(LOCALSTORAGE_KEY) || '{}'\n      ) as ProviderStorage;\n    } catch (error) {\n      localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify({}));\n      throw new Error('Error parsing storage');\n    }\n  }\n\n  private saveStorage(storage: ProviderStorage): void {\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(storage));\n  }\n}\n","/**\n * @summary A class for emitting provider events\n * @since 0.1.0\n */\nexport class ProviderEventEmitter {\n  /**\n   * @summary A map of events and their listeners\n   */\n  private events: Map<string, Array<Function>>;\n\n  constructor() {\n    this.events = new Map();\n  }\n\n  /**\n   * @summary Adds a listener to the provider event\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {ProviderEventEmitter} The instance of the class itself\n   */\n  on(event: string, callback: Function) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event)!.push(callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the provider event\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {ProviderEventEmitter} The instance of the class itself\n   */\n  removeListener(event: string, callback: Function) {\n    if (this.events.has(event)) {\n      const callbacks = this.events.get(event)!.filter(cb => cb !== callback);\n      this.events.set(event, callbacks);\n    }\n    return this;\n  }\n\n  /**\n   * @summary Emits an event\n   * @param {string} event Event name\n   * @param data Event data\n   * @returns {ProviderEventEmitter} The instance of the class itself\n   */\n  protected emit(event: string, ...data: any[]) {\n    if (this.events.has(event)) {\n      console.log('[GrinderyWalletProvider] > Event:', event, data);\n      this.events.get(event)!.forEach(callback => {\n        callback(...data);\n      });\n    }\n    return this;\n  }\n}\n","import { GrinderyWalletProvider } from '../provider/GrinderyWalletProvider';\n\nexport class GrinderyWalletSDK {\n  public provider: GrinderyWalletProvider;\n\n  constructor() {\n    this.provider = this.getWeb3Provider();\n  }\n\n  private getWeb3Provider(): GrinderyWalletProvider {\n    let provider = window.ethereum?.providers?.find(\n      (provider: GrinderyWalletProvider | unknown) =>\n        provider instanceof GrinderyWalletProvider && provider.isGrinderyWallet\n    );\n    if (\n      !provider &&\n      window.ethereum instanceof GrinderyWalletProvider &&\n      window.ethereum.isGrinderyWallet\n    ) {\n      provider = window.ethereum;\n    }\n    if (!provider) {\n      provider = new GrinderyWalletProvider();\n    }\n    return provider;\n  }\n}\n","import { GrinderyWalletSDK } from './sdk/GrinderyWalletSDK';\n\ndeclare global {\n  interface Window {\n    Telegram?: any;\n    ethereum?: any;\n    Grindery?: {\n      WalletSDK?: GrinderyWalletSDK;\n    };\n  }\n}\n\nfunction init() {\n  if (\n    !window.Grindery?.WalletSDK ||\n    !(window.Grindery.WalletSDK instanceof GrinderyWalletSDK)\n  ) {\n    window.Grindery = {\n      ...(window.Grindery || {}),\n      WalletSDK: new GrinderyWalletSDK(),\n    };\n  }\n}\n\n// Initialize the SDK when the page is loaded\ninit();\n"],"names":["ProviderError","_Error","message","code","data","_this","call","_inheritsLoose","_wrapNativeSuper","Error","GrinderyWalletProvider","_Provider","_execute4","_execute3","_execute2","_execute","registerProviderMethods","eth_requestAccounts","sessionRequired","execute","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","pairResult","result","_pairResult","wrap","_context","prev","next","isWalletConnected","request","method","abrupt","sent","t0","setStorageValue","isWalletConnectionPending","emit","connectUrl","getStorageValue","connectUrlBrowser","sendGrinderyRpcApiRequest","pairingToken","session","sessionId","t1","appId","namespaces","accounts","length","scope","chainId","t2","createProviderRpcError","stop","_x","apply","arguments","eth_accounts","_callee2","requestToken","_context2","sendGrinderyRpcProviderRequest","Array","isArray","waitGrinderyRpcProviderRequest","_x2","eth_sendTransaction","_callee3","_context3","_x3","personal_sign","_callee4","_context4","_x4","_ProviderLocalStorage","Provider","window","location","href","injectProvider","_proto","prototype","isConnected","this","_request","_ref","methods","_sendGrinderyRpcProviderRequest","_waitGrinderyRpcProviderRequest","timeout","_x5","_sendGrinderyRpcApiRequest","response","fetch","headers","Content-Type","body","JSON","stringify","jsonrpc","id","json","error","_x6","_x7","errorResponse","ethereum","providers","push","addEventListener","_this2","_ProviderEventEmitter","ProviderLocalStorage","key","getStorage","value","storage","saveStorage","parse","localStorage","getItem","setItem","ProviderEventEmitter","events","Map","on","event","callback","has","set","get","removeListener","callbacks","filter","cb","_len","_key","console","log","forEach","GrinderyWalletSDK","provider","getWeb3Provider","_window$ethereum","find","isGrinderyWallet","_window$Grindery","Grindery","WalletSDK","_extends"],"mappings":"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"}