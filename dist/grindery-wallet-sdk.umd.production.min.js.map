{"version":3,"file":"grindery-wallet-sdk.umd.production.min.js","sources":["../src/enums.ts","../src/provider/WalletProviderLocalStorage.ts","../src/provider/WalletProviderEventEmitter.ts","../src/provider/WalletProviderError.ts","../src/provider/GrinderyWalletProvider.ts","../src/provider/WalletProvider.ts","../src/sdk/GrinderyWalletSDK.ts","../src/index.ts"],"sourcesContent":["export enum ProviderEvents {\n  accountsChanged = 'accountsChanged',\n  pair = 'pair',\n  connect = 'connect',\n  disconnect = 'disconnect',\n  chainChanged = 'chainChanged',\n  message = 'message',\n}\n\nexport enum ProviderStorageKeys {\n  pairingToken = 'pairingToken',\n  sessionId = 'sessionId',\n  connectUrl = 'connectUrl',\n  connectUrlBrowser = 'connectUrlBrowser',\n  shortToken = 'shortToken',\n}\n\nexport enum GrinderyRpcMethodNames {\n  checkout_requestPairing = 'checkout_requestPairing',\n  checkout_waitForPairingResult = 'checkout_waitForPairingResult',\n  checkout_request = 'checkout_request',\n  checkout_waitForRequestResult = 'checkout_waitForRequestResult',\n}\n\nexport enum GrinderyRpcProviderRequestMethodNames {\n  eth_requestAccounts = 'eth_requestAccounts',\n  eth_accounts = 'eth_accounts',\n  personal_sign = 'personal_sign',\n  eth_sendTransaction = 'eth_sendTransaction',\n}\n","import { ProviderStorage, ProviderStorageKey } from '../types';\nimport { WalletProviderEventEmitter } from './WalletProviderEventEmitter';\n\nconst LOCALSTORAGE_KEY = 'GrinderyWalletProvider';\n\n/**\n * @summary A local storage class for the provider\n * @since 0.1.0\n * @extends WalletProviderEventEmitter\n */\nexport class WalletProviderLocalStorage extends WalletProviderEventEmitter {\n  /**\n   * @summary Gets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @returns {string} The value of the storage by the key\n   */\n  protected getStorageValue(key: ProviderStorageKey): string {\n    const value = this.getStorage()[key] || '';\n    return value;\n  }\n\n  /**\n   * @summary Sets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @param {string} value The value to set\n   * @returns {void}\n   */\n  protected setStorageValue(key: ProviderStorageKey, value: string): void {\n    const storage = this.getStorage();\n    storage[key] = value;\n    this.saveStorage(storage);\n  }\n\n  /**\n   * @summary Clears the storage\n   * @protected\n   * @returns {void}\n   */\n  protected clearStorage(): void {\n    this.saveStorage({});\n  }\n\n  /**\n   * @summary Gets the provider storage\n   * @returns {ProviderStorage} The provider storage\n   */\n  private getStorage(): ProviderStorage {\n    try {\n      return JSON.parse(\n        localStorage.getItem(LOCALSTORAGE_KEY) || '{}'\n      ) as ProviderStorage;\n    } catch (error) {\n      localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify({}));\n      throw new Error('Error parsing storage');\n    }\n  }\n\n  /**\n   * @summary Saves the provider storage\n   * @param {ProviderStorage} storage Provider storage object\n   */\n  private saveStorage(storage: ProviderStorage): void {\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(storage));\n  }\n}\n","import { ProviderEvent } from '../types';\n\n/**\n * @summary A class for emitting provider events\n * @since 0.1.0\n */\nexport class WalletProviderEventEmitter {\n  /**\n   * @summary A map of events and their listeners\n   * @public\n   */\n  public events: Map<ProviderEvent, Array<Function>>;\n\n  constructor() {\n    this.events = new Map();\n  }\n\n  /**\n   * @summary Adds a listener to the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public on(event: ProviderEvent, callback: Function) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event)!.push(callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public removeListener(event: ProviderEvent, callback: Function) {\n    if (this.events.has(event)) {\n      const callbacks = this.events.get(event)!.filter(cb => cb !== callback);\n      this.events.set(event, callbacks);\n    }\n    return this;\n  }\n\n  /**\n   * @summary Emits an event\n   * @public\n   * @param {string} event Event name\n   * @param data Event data\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  protected emit(event: ProviderEvent, ...data: any[]) {\n    if (this.events.has(event)) {\n      console.log('[Grindery.WalletSDK] > Event:', event, data[0]);\n      this.events.get(event)!.forEach(callback => {\n        callback(...data);\n      });\n    }\n    return this;\n  }\n}\n","/**\n * @summary Error class for WalletProvider\n * @since 0.1.0\n * @extends Error\n */\nexport class WalletProviderError extends Error {\n  name: string = 'GrinderyWalletProviderError';\n  code?: number;\n  data?: unknown;\n\n  constructor(message: string, code?: number, data?: unknown) {\n    super(message);\n    this.code = code;\n    this.data = data;\n  }\n}\n\nexport const WalletProviderErrors = {\n  PairingFailed: new WalletProviderError('Pairing failed', 4900),\n  Disconnected: new WalletProviderError('Disconnected', 4900),\n  UnsupportedMethod: new WalletProviderError('Unsupported Method', 4200),\n  Unauthorized: new WalletProviderError('Unauthorized', 4900),\n  NoResult: new WalletProviderError('No result', 4900),\n};\n","import {\n  GrinderyRpcMethodNames,\n  GrinderyRpcProviderRequestMethodNames,\n  ProviderEvents,\n  ProviderStorageKeys,\n} from '../enums';\nimport {\n  GrinderyRpcApiRequestResults,\n  GrinderyRpcProviderRequestResults,\n  ProviderInterface,\n  RequestArgumentsParams,\n} from '../types';\nimport { WalletProvider } from './WalletProvider';\nimport { WalletProviderErrors } from './WalletProviderError';\n\n/**\n * @summary The Grindery Wallet Ethereum Injected Provider Class.\n * @extends WalletProvider\n * @implements ProviderInterface\n */\nexport class GrinderyWalletProvider extends WalletProvider\n  implements ProviderInterface {\n  /**\n   * @summary Indicates that the provider is a Grindery Wallet.\n   */\n  public readonly isGrinderyWallet: boolean = true;\n\n  constructor() {\n    super();\n\n    this.registerProviderMethods({\n      [GrinderyRpcProviderRequestMethodNames.eth_requestAccounts]: {\n        sessionRequired: false,\n        execute: async (\n          params?: RequestArgumentsParams\n        ): Promise<GrinderyRpcProviderRequestResults.eth_requestAccounts> => {\n          if (this.isWalletConnected()) {\n            try {\n              return await this.request<\n                GrinderyRpcProviderRequestResults.eth_accounts\n              >({\n                method: GrinderyRpcProviderRequestMethodNames.eth_accounts,\n                params: params || [],\n              });\n            } catch (error) {\n              this.setStorageValue(ProviderStorageKeys.sessionId, '');\n              // skip failed request and continue with pairing\n            }\n          }\n          if (this.isWalletConnectionPending()) {\n            try {\n              const pairResult = await this.sendGrinderyRpcApiRequest<\n                GrinderyRpcApiRequestResults.checkout_waitForPairingResult\n              >(GrinderyRpcMethodNames.checkout_waitForPairingResult, {\n                pairingToken: this.getStorageValue(\n                  ProviderStorageKeys.pairingToken\n                ),\n              });\n\n              this.clearStorage();\n              this.setStorageValue(\n                ProviderStorageKeys.sessionId,\n                pairResult.session.sessionId\n              );\n\n              if (!pairResult.session.sessionId) {\n                throw WalletProviderErrors.PairingFailed;\n              }\n\n              return await this.request<\n                GrinderyRpcProviderRequestResults.eth_accounts\n              >({\n                method: GrinderyRpcProviderRequestMethodNames.eth_accounts,\n                params: params || [],\n              });\n            } catch (error) {\n              this.clearStorage();\n              // skip failed request and continue with pairing\n            }\n          }\n          try {\n            const result = await this.sendGrinderyRpcApiRequest<\n              GrinderyRpcApiRequestResults.checkout_requestPairing\n            >(GrinderyRpcMethodNames.checkout_requestPairing, {\n              appId: this.appId,\n            });\n\n            if (!result.pairingToken || !result.connectUrl) {\n              throw WalletProviderErrors.PairingFailed;\n            }\n\n            this.setStorageValue(\n              ProviderStorageKeys.pairingToken,\n              result.pairingToken\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.connectUrl,\n              result.connectUrl\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.connectUrlBrowser,\n              result.connectUrlBrowser\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.shortToken,\n              result.shortToken\n            );\n            this.emit(ProviderEvents.pair, {\n              shortToken: result.shortToken,\n              connectUrl: result.connectUrl,\n              connectUrlBrowser: result.connectUrlBrowser,\n            });\n            const pairResult = await this.sendGrinderyRpcApiRequest<\n              GrinderyRpcApiRequestResults.checkout_waitForPairingResult\n            >(GrinderyRpcMethodNames.checkout_waitForPairingResult, {\n              pairingToken: result.pairingToken,\n            });\n\n            this.setStorageValue(\n              ProviderStorageKeys.sessionId,\n              pairResult.session.sessionId\n            );\n\n            if (!pairResult.session.sessionId) {\n              throw WalletProviderErrors.PairingFailed;\n            }\n            this.setStorageValue(ProviderStorageKeys.pairingToken, '');\n            this.setStorageValue(ProviderStorageKeys.connectUrl, '');\n            this.setStorageValue(ProviderStorageKeys.connectUrlBrowser, '');\n            this.setStorageValue(ProviderStorageKeys.shortToken, '');\n\n            return await this.request({\n              method: GrinderyRpcProviderRequestMethodNames.eth_accounts,\n              params: params || [],\n            });\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.eth_accounts]: {\n        sessionRequired: true,\n        execute: async (\n          params?: RequestArgumentsParams\n        ): Promise<GrinderyRpcProviderRequestResults.eth_accounts> => {\n          try {\n            return this.setAccounts(\n              await this.sendAndWaitGrinderyRpcProviderRequest(\n                GrinderyRpcProviderRequestMethodNames.eth_accounts,\n                params ? (Array.isArray(params) ? params : [params]) : []\n              )\n            );\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.eth_sendTransaction]: {\n        sessionRequired: true,\n        execute: async (\n          params?: RequestArgumentsParams\n        ): Promise<GrinderyRpcProviderRequestResults.eth_sendTransaction> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest(\n            GrinderyRpcProviderRequestMethodNames.eth_sendTransaction,\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.personal_sign]: {\n        sessionRequired: true,\n        execute: async (\n          params?: Partial<RequestArgumentsParams>\n        ): Promise<GrinderyRpcProviderRequestResults.personal_sign> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest(\n            GrinderyRpcProviderRequestMethodNames.personal_sign,\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n    });\n\n    window.addEventListener('load', () => {\n      this.emit(ProviderEvents.connect, this.getChain());\n      this.restorePairing();\n      this.restoreSession();\n    });\n  }\n\n  /**\n   * @summary Restores the pairing process if pairing token is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restorePairing(): Promise<void> {\n    const pairingToken = this.getStorageValue(ProviderStorageKeys.pairingToken);\n    const sessionId = this.getStorageValue(ProviderStorageKeys.sessionId);\n    if (pairingToken && !sessionId) {\n      try {\n        const pairResult = await this.sendGrinderyRpcApiRequest<\n          GrinderyRpcApiRequestResults.checkout_waitForPairingResult\n        >(GrinderyRpcMethodNames.checkout_waitForPairingResult, {\n          pairingToken,\n        });\n\n        this.clearStorage();\n        this.setStorageValue(\n          ProviderStorageKeys.sessionId,\n          pairResult.session.sessionId\n        );\n\n        if (!pairResult.session.sessionId) {\n          throw WalletProviderErrors.PairingFailed;\n        }\n\n        const accounts = (\n          pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n        ).map(account =>\n          account.includes(':') ? account.split(':')[2] || '' : account\n        );\n        this.setAccounts(accounts);\n      } catch (error) {\n        this.setAccounts([]);\n        this.clearStorage();\n      }\n    }\n  }\n\n  /**\n   * @summary Restores the session if session Id is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restoreSession(): Promise<void> {\n    const pairingToken = this.getStorageValue(ProviderStorageKeys.pairingToken);\n    const sessionId = this.getStorageValue(ProviderStorageKeys.sessionId);\n    if (sessionId && !pairingToken) {\n      try {\n        await this.request<string[]>({\n          method: GrinderyRpcProviderRequestMethodNames.eth_requestAccounts,\n        });\n      } catch (error) {\n        this.setAccounts([]);\n        this.clearStorage();\n      }\n    }\n  }\n}\n","import { WalletProviderLocalStorage } from './WalletProviderLocalStorage';\nimport {\n  Address,\n  ChainId,\n  GrinderyRpcApiRequestResults,\n  GrinderyRpcMethodName,\n  GrinderyRpcProviderRequestMethodName,\n  ProviderMethods,\n  ProviderRequestResult,\n  RequestArguments,\n  RequestArgumentsParams,\n  RequestToken,\n} from '../types';\nimport {\n  WalletProviderError,\n  WalletProviderErrors,\n} from './WalletProviderError';\nimport {\n  GrinderyRpcMethodNames,\n  ProviderEvents,\n  ProviderStorageKeys,\n} from '../enums';\n\n/**\n * @summary The base wallet provider class\n * @since 0.1.0\n * @extends WalletProviderLocalStorage\n */\nexport class WalletProvider extends WalletProviderLocalStorage {\n  constructor() {\n    super();\n\n    this.injectProvider();\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return !!this.chainId;\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return (\n      this.isConnected() &&\n      !!this.getStorageValue(ProviderStorageKeys.sessionId)\n    );\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet pairing is in progress (pending).\n   */\n  public isWalletConnectionPending(): boolean {\n    return (\n      this.isConnected() &&\n      !!this.getStorageValue(ProviderStorageKeys.pairingToken) &&\n      !this.getStorageValue(ProviderStorageKeys.sessionId)\n    );\n  }\n\n  /**\n   * @summary Gets the connected chain ID in hex format\n   * @public\n   * @returns {ChainId} The chain ID in hex format\n   */\n  public getChain(): ChainId {\n    return `0x${parseFloat(this.chainId.split(':')[1]).toString(16)}`;\n  }\n\n  /**\n   * @summary Gets the connected user's wallet address\n   * @public\n   * @returns {Address} The ethereum wallet address\n   */\n  public getAddress(): Address {\n    return this.accounts[0] || '';\n  }\n\n  /**\n   * @summary Sends a request to the provider\n   * @public\n   * @param {RequestArguments} args Request arguments\n   * @param {string} args.method The method name\n   * @param {RequestArgumentsParams} args.params The method parameters\n   * @returns {T} The result of the request\n   */\n  public async request<T>({ method, params }: RequestArguments): Promise<T> {\n    if (!this.chainId) {\n      this.emit(ProviderEvents.disconnect, WalletProviderErrors.Disconnected);\n      throw WalletProviderErrors.Disconnected;\n    }\n    if (!this.methods[method]) {\n      throw WalletProviderErrors.UnsupportedMethod;\n    }\n\n    try {\n      if (this.methods[method]?.sessionRequired && !this.isWalletConnected()) {\n        throw WalletProviderErrors.Unauthorized;\n      }\n\n      return (await this.methods[method]?.execute(params)) as T;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API and waits for the result.\n   * @public\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  public async sendAndWaitGrinderyRpcProviderRequest<T>(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[],\n    timeout?: number\n  ): Promise<T> {\n    const request = await this.sendGrinderyRpcProviderRequest(method, params);\n    return await this.waitGrinderyRpcProviderRequest(\n      request.requestToken,\n      timeout\n    );\n  }\n\n  /**\n   * @summary The application ID.\n   * @protected\n   */\n  protected appId: string = document.title || 'Grindery Wallet Provider';\n\n  /**\n   * @summary The chain ID in CAIP-2 format; e.g. \"eip155:1\".\n   * @protected\n   */\n  protected chainId: ChainId = 'eip155:137';\n\n  /**\n   * @summary The list of supported provider methods.\n   * @protected\n   */\n  protected methods: Partial<ProviderMethods> = {};\n\n  /**\n   * @summary The user's wallet addresses list.\n   * @protected\n   */\n  protected accounts: Address[] = [];\n\n  protected setAccounts(accounts: Address[]): Address[] {\n    if (JSON.stringify(accounts) !== JSON.stringify(this.accounts)) {\n      this.emit(ProviderEvents.accountsChanged, accounts);\n    }\n    this.accounts = accounts;\n    return this.accounts;\n  }\n\n  /**\n   * @summary Registers the provider methods.\n   * @protected\n   * @param {ProviderMethods} methods A map of supported provider methods.\n   * @returns {void}\n   */\n  protected registerProviderMethods(methods: Partial<ProviderMethods>): void {\n    this.methods = methods;\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API.\n   * @protected\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @returns {ProviderRequestResult} The request token to use in the `waitGrinderyRpcProviderRequest` method\n   */\n  protected async sendGrinderyRpcProviderRequest(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[]\n  ): Promise<ProviderRequestResult> {\n    if (!this.getStorageValue(ProviderStorageKeys.sessionId)) {\n      throw WalletProviderErrors.Unauthorized;\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<\n        GrinderyRpcApiRequestResults.checkout_request\n      >(GrinderyRpcMethodNames.checkout_request, {\n        sessionId: this.getStorageValue(ProviderStorageKeys.sessionId),\n        scope: this.chainId,\n        request: {\n          method,\n          params,\n        },\n      });\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Waits for the result of the provider request.\n   * @protected\n   * @param {RequestToken} requestToken A token to identify provider request. Recieved in the results of `sendGrinderyRpcProviderRequest` method.\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  protected async waitGrinderyRpcProviderRequest<T>(\n    requestToken: RequestToken,\n    timeout?: number\n  ): Promise<T> {\n    if (!this.getStorageValue(ProviderStorageKeys.sessionId)) {\n      throw WalletProviderErrors.Unauthorized;\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<T>(\n        GrinderyRpcMethodNames.checkout_waitForRequestResult,\n        {\n          requestToken,\n          timeout,\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a request to the Grindery Walletconnect RPC API.\n   * @protected\n   * @param {GrinderyRpcMethodName} method Request method name\n   * @param {RequestArgumentsParams} params Request parameters\n   * @returns {T} The result of the request\n   */\n  protected async sendGrinderyRpcApiRequest<T>(\n    method: GrinderyRpcMethodName,\n    params?: RequestArgumentsParams\n  ): Promise<T> {\n    try {\n      const response = await fetch('https://walletconnect-api.grindery.com', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method,\n          params: params || [],\n        }),\n      });\n      const data = await response.json();\n      if (data.error) {\n        throw new WalletProviderError(data.error.message, data.error.code);\n      }\n      if (!data.result) {\n        throw WalletProviderErrors.NoResult;\n      }\n      return data.result;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Creates a provider error from an unknown error\n   * @protected\n   * @param {unknown} error Optional. Error object.\n   * @returns {WalletProviderError} The provider error\n   */\n  protected createProviderRpcError(error?: unknown): WalletProviderError {\n    let errorResponse: WalletProviderError;\n    if (error instanceof WalletProviderError) {\n      errorResponse = new WalletProviderError(\n        error.message || 'Unknown error',\n        error.code || 4900,\n        error.data\n      );\n    } else if (error instanceof Error) {\n      errorResponse = new WalletProviderError(\n        error.message || 'Unknown error',\n        4900,\n        error\n      );\n    } else {\n      errorResponse = new WalletProviderError('Unknown error', 4900, error);\n    }\n    return errorResponse;\n  }\n\n  /**\n   * @summary Injects the provider into the window object\n   * @private\n   * @returns {void}\n   */\n  private injectProvider(): void {\n    if (!window.ethereum) {\n      window.ethereum = this;\n    } else {\n      if (\n        window.ethereum.providers &&\n        Array.isArray(window.ethereum.providers)\n      ) {\n        window.ethereum.providers.push(this);\n      } else {\n        window.ethereum.providers = [window.ethereum, this];\n      }\n    }\n  }\n}\n","import {\n  GrinderyRpcProviderRequestMethodNames,\n  ProviderEvents,\n} from '../enums';\nimport { GrinderyRpcApiRequestResults, ProviderEvent } from '../types';\nimport { GrinderyWalletProvider } from '../provider/GrinderyWalletProvider';\n\n/**\n * @summary The Grindery Wallet SDK class\n * @since 0.1.0\n */\nexport class GrinderyWalletSDK {\n  /**\n   * @summary The provider instance\n   * @public\n   */\n  public provider: GrinderyWalletProvider;\n\n  constructor() {\n    this.provider = this.getWeb3Provider();\n    this.provider.on(ProviderEvents.pair, this.handlePairing);\n  }\n\n  /**\n   * @summary Checks if the provider is connected to the server\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return this.provider.isConnected();\n  }\n\n  /**\n   * @summary Checks if the provider is connected to the server and the Grindery Wallet\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return this.provider.isWalletConnected();\n  }\n\n  /**\n   * @summary Initiate connection to the Grindery Wallet\n   * @public\n   * @returns {Promise<string[]>} The array of ethereum addresses\n   * @since 0.1.0\n   */\n  public async connect(): Promise<string[]> {\n    return await this.provider.request({\n      method: GrinderyRpcProviderRequestMethodNames.eth_requestAccounts,\n    });\n  }\n\n  /**\n   * @summary Sends a transaction request to the Grindery Wallet\n   * @public\n   * @since 0.1.0\n   * @param {object} params The transaction parameters\n   * @param {string} params.to The recipient address\n   * @param {string} [params.value] The amount to send in wei\n   * @param {string} [params.data] The data to send\n   * @returns {Promise<string[]>} Array with transaction hash string\n   */\n  public async sendTransaction(params: {\n    to: string;\n    value?: string;\n    data?: string;\n  }): Promise<string[]> {\n    return await this.provider.request<string[]>({\n      method: GrinderyRpcProviderRequestMethodNames.eth_sendTransaction,\n      params: [params],\n    });\n  }\n\n  /**\n   * @summary Sends a personal signature request to the Grindery Wallet\n   * @public\n   * @since 0.1.0\n   * @param {string} message The message to sign\n   * @returns {Promise<string>} Signature string\n   */\n  public async signMessage(message: string): Promise<string> {\n    return await this.provider.request<string>({\n      method: GrinderyRpcProviderRequestMethodNames.personal_sign,\n      params: [message, this.provider.getAddress()],\n    });\n  }\n\n  /**\n   * @summary Adds a listener to the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public on(event: ProviderEvent, callback: Function) {\n    this.provider.on(event, callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public removeListener(event: ProviderEvent, callback: Function) {\n    this.provider.removeListener(event, callback);\n    return this;\n  }\n\n  /**\n   * @summary Gets the Grindery Wallet ethereum provider\n   * @returns {GrinderyWalletProvider} The Grindery Wallet ethereum provider\n   */\n  private getWeb3Provider(): GrinderyWalletProvider {\n    let provider = window.ethereum?.providers?.find(\n      (provider: GrinderyWalletProvider | unknown) =>\n        provider instanceof GrinderyWalletProvider && provider.isGrinderyWallet\n    );\n    if (\n      !provider &&\n      window.ethereum instanceof GrinderyWalletProvider &&\n      window.ethereum.isGrinderyWallet\n    ) {\n      provider = window.ethereum;\n    }\n    if (!provider) {\n      provider = new GrinderyWalletProvider();\n    }\n    return provider;\n  }\n\n  /**\n   * @summary Handles the pairing request, by opening the Grindery Wallet\n   * @private\n   * @param ProviderRequestPairingResult\n   * @returns {void}\n   */\n  private handlePairing({\n    shortToken,\n    connectUrlBrowser,\n  }: GrinderyRpcApiRequestResults.checkout_requestPairing): void {\n    const WebApp = window.Telegram?.WebApp;\n    const redirectUrl = `https://walletconnect.grindery.com/connect/wc?uri=${shortToken}`;\n    if (\n      WebApp &&\n      WebApp.openTelegramLink &&\n      WebApp.platform &&\n      WebApp.platform !== 'unknown'\n    ) {\n      WebApp.openTelegramLink(connectUrlBrowser);\n      if (WebApp.close) {\n        window.Telegram.WebApp.close();\n      }\n    } else {\n      window.open(redirectUrl, '_blank');\n    }\n  }\n}\n","import { GrinderyWalletSDK } from './sdk/GrinderyWalletSDK';\n\ndeclare global {\n  interface Window {\n    Telegram?: any;\n    ethereum?: any;\n    Grindery?: {\n      WalletSDK?: GrinderyWalletSDK;\n    };\n  }\n}\n\nfunction init() {\n  if (\n    !window.Grindery?.WalletSDK ||\n    !(window.Grindery.WalletSDK instanceof GrinderyWalletSDK)\n  ) {\n    window.Grindery = {\n      ...(window.Grindery || {}),\n      WalletSDK: new GrinderyWalletSDK(),\n    };\n  }\n}\n\n// Initialize the SDK when the page is loaded\ninit();\n"],"names":["ProviderEvents","ProviderStorageKeys","GrinderyRpcMethodNames","GrinderyRpcProviderRequestMethodNames","WalletProviderLocalStorage","_WalletProviderEventE","apply","arguments","_inheritsLoose","_proto","prototype","getStorageValue","key","this","getStorage","setStorageValue","value","storage","saveStorage","clearStorage","JSON","parse","localStorage","getItem","error","setItem","stringify","Error","WalletProviderEventEmitter","events","Map","on","event","callback","has","set","get","push","removeListener","callbacks","filter","cb","emit","data","Array","_len","_key","console","log","forEach","WalletProviderError","_Error","message","code","_this","call","_wrapNativeSuper","WalletProviderErrors","PairingFailed","Disconnected","UnsupportedMethod","Unauthorized","NoResult","GrinderyWalletProvider","_WalletProvider","_execute4","_execute3","_execute2","_execute","registerProviderMethods","_this$registerProvide","eth_requestAccounts","sessionRequired","execute","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","pairResult","result","_pairResult","wrap","_context","prev","next","isWalletConnected","request","method","eth_accounts","abrupt","sent","t0","sessionId","isWalletConnectionPending","sendGrinderyRpcApiRequest","checkout_waitForPairingResult","pairingToken","session","t1","checkout_requestPairing","appId","connectUrl","connectUrlBrowser","shortToken","pair","t2","createProviderRpcError","stop","_x","_callee2","_context2","sendAndWaitGrinderyRpcProviderRequest","isArray","setAccounts","_x2","eth_sendTransaction","_callee3","_context3","_x3","personal_sign","_callee4","_context4","_x4","window","addEventListener","connect","getChain","restorePairing","restoreSession","_restorePairing","_callee5","_pairResult$session","accounts","_context5","namespaces","map","account","includes","split","_restoreSession","_callee6","_context6","_WalletProviderLocalS","WalletProvider","document","title","injectProvider","isConnected","chainId","parseFloat","toString","getAddress","_request","_ref","_this$methods$method","_this$methods$method2","disconnect","methods","_sendAndWaitGrinderyRpcProviderRequest","timeout","sendGrinderyRpcProviderRequest","waitGrinderyRpcProviderRequest","requestToken","accountsChanged","_sendGrinderyRpcProviderRequest","checkout_request","scope","_x5","_x6","_waitGrinderyRpcProviderRequest","checkout_waitForRequestResult","_x7","_x8","_sendGrinderyRpcApiRequest","response","fetch","headers","Content-Type","body","jsonrpc","id","json","_x9","_x10","ethereum","providers","GrinderyWalletSDK","provider","getWeb3Provider","handlePairing","_connect","sendTransaction","_sendTransaction","signMessage","_signMessage","_window$ethereum","find","isGrinderyWallet","WebApp","_window$Telegram","Telegram","redirectUrl","openTelegramLink","platform","close","open","_window$Grindery","Grindery","WalletSDK","_extends"],"mappings":"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"}