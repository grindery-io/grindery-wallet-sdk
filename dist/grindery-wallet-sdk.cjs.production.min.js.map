{"version":3,"file":"grindery-wallet-sdk.cjs.production.min.js","sources":["../src/classes/LocalStorage.ts","../src/classes/EventEmitter.ts","../src/classes/ProviderError.ts","../src/classes/GrinderyWalletProvider.ts","../src/classes/ProviderBase.ts","../src/classes/GrinderyWalletSDK.ts","../src/index.ts"],"sourcesContent":["import { EventEmitter } from './EventEmitter';\nimport { ProviderStorage, ProviderStorageKey } from '../types';\n\nconst LOCALSTORAGE_KEY = 'GrinderyWalletProvider';\n\n/**\n * @summary A local storage class for the provider\n * @since 0.1.0\n * @extends EventEmitter\n */\nexport class ProviderLocalStorage extends EventEmitter {\n  /**\n   * @summary Gets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @returns {string} The value of the storage by the key\n   */\n  protected getStorageValue(key: ProviderStorageKey): string {\n    const value = this.getStorage()[key] || '';\n    return value;\n  }\n\n  /**\n   * @summary Sets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @param {string} value The value to set\n   * @returns {void}\n   */\n  protected setStorageValue(key: ProviderStorageKey, value: string): void {\n    const storage = this.getStorage();\n    storage[key] = value;\n    this.saveStorage(storage);\n  }\n\n  /**\n   * @summary Clears the storage\n   * @protected\n   * @returns {void}\n   */\n  protected clearStorage(): void {\n    this.saveStorage({});\n  }\n\n  /**\n   * @summary Gets the provider storage\n   * @returns {ProviderStorage} The provider storage\n   */\n  private getStorage(): ProviderStorage {\n    try {\n      return JSON.parse(\n        localStorage.getItem(LOCALSTORAGE_KEY) || '{}'\n      ) as ProviderStorage;\n    } catch (error) {\n      localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify({}));\n      throw new Error('Error parsing storage');\n    }\n  }\n\n  /**\n   * @summary Saves the provider storage\n   * @param {ProviderStorage} storage Provider storage object\n   */\n  private saveStorage(storage: ProviderStorage): void {\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(storage));\n  }\n}\n","/**\n * @summary A class for emitting provider events\n * @since 0.1.0\n */\nexport class EventEmitter {\n  /**\n   * @summary A map of events and their listeners\n   * @public\n   */\n  public events: Map<string, Array<Function>>;\n\n  constructor() {\n    this.events = new Map();\n  }\n\n  /**\n   * @summary Adds a listener to the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public on(event: string, callback: Function) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event)!.push(callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public removeListener(event: string, callback: Function) {\n    if (this.events.has(event)) {\n      const callbacks = this.events.get(event)!.filter(cb => cb !== callback);\n      this.events.set(event, callbacks);\n    }\n    return this;\n  }\n\n  /**\n   * @summary Emits an event\n   * @public\n   * @param {string} event Event name\n   * @param data Event data\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  protected emit(event: string, ...data: any[]) {\n    if (this.events.has(event)) {\n      console.log('[Grindery.WalletSDK] > Event:', event, data);\n      this.events.get(event)!.forEach(callback => {\n        callback(...data);\n      });\n    }\n    return this;\n  }\n}\n","/**\n * @summary Error class for GrinderyWalletProvider\n * @since 0.1.0\n * @extends Error\n */\nexport class ProviderError extends Error {\n  name: string = 'GrinderyWalletProviderError';\n  code?: number;\n  data?: unknown;\n\n  constructor(message: string, code?: number, data?: unknown) {\n    super(message);\n    this.code = code;\n    this.data = data;\n  }\n}\n","import {\n  ProviderInterface,\n  ProviderPairingResult,\n  ProviderRequestPairingResult,\n  RequestArgumentsParams,\n} from '../types';\nimport { ProviderBase } from './ProviderBase';\nimport { ProviderError } from './ProviderError';\n\n/**\n * @summary The Grindery Wallet Ethereum Injected Provider Class.\n * @extends ProviderBase\n * @implements ProviderInterface\n */\nexport class GrinderyWalletProvider extends ProviderBase\n  implements ProviderInterface {\n  /**\n   * @summary Indicates that the provider is a Grindery Wallet.\n   */\n  public readonly isGrinderyWallet: boolean = true;\n\n  constructor() {\n    super();\n\n    this.registerProviderMethods({\n      eth_requestAccounts: {\n        sessionRequired: false,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          if (this.isWalletConnected()) {\n            try {\n              const accounts = await this.request<string[]>({\n                method: 'eth_accounts',\n                params: params || [],\n              });\n              this.accounts = accounts;\n              this.emit('accountsChanged', { accounts });\n              return accounts;\n            } catch (error) {\n              this.setStorageValue('sessionId', '');\n              // skip failed request and continue with pairing\n            }\n          }\n          if (this.isWalletConnectionPending()) {\n            try {\n              this.emit('restorePairing', {\n                connectUrl: this.getStorageValue('connectUrl'),\n                connectUrlBrowser: this.getStorageValue('connectUrlBrowser'),\n              });\n\n              const pairResult = await this.sendGrinderyRpcApiRequest<\n                ProviderPairingResult\n              >('checkout_waitForPairingResult', {\n                pairingToken: this.getStorageValue('pairingToken'),\n              });\n\n              this.clearStorage();\n              this.setStorageValue('sessionId', pairResult.session.sessionId);\n\n              if (!pairResult.session.sessionId) {\n                throw new ProviderError('Pairing failed', 4900);\n              }\n\n              const accounts = (\n                pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n              ).map(account =>\n                account.includes(':') ? account.split(':')[2] || '' : account\n              );\n              this.accounts = accounts;\n              this.emit('accountsChanged', { accounts });\n              return [];\n            } catch (error) {\n              this.clearStorage();\n              // skip failed request and continue with pairing\n            }\n          }\n          try {\n            const result = await this.sendGrinderyRpcApiRequest<\n              ProviderRequestPairingResult\n            >('checkout_requestPairing', { appId: this.appId });\n\n            if (!result.pairingToken || !result.connectUrl) {\n              throw new ProviderError('Pairing failed', 4900);\n            }\n\n            this.setStorageValue('pairingToken', result.pairingToken);\n            this.setStorageValue('connectUrl', result.connectUrl);\n            this.setStorageValue('connectUrlBrowser', result.connectUrlBrowser);\n            this.emit('pairing', {\n              connectUrl: result.connectUrl,\n              connectUrlBrowser: result.connectUrlBrowser,\n            });\n            const pairResult = await this.sendGrinderyRpcApiRequest<\n              ProviderPairingResult\n            >('checkout_waitForPairingResult', {\n              pairingToken: result.pairingToken,\n            });\n\n            this.setStorageValue('sessionId', pairResult.session.sessionId);\n\n            if (!pairResult.session.sessionId) {\n              throw new ProviderError('Pairing failed', 4900);\n            }\n            this.setStorageValue('pairingToken', '');\n            this.setStorageValue('connectUrl', '');\n            this.setStorageValue('connectUrlBrowser', '');\n            const accounts = (\n              pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n            ).map(account =>\n              account.includes(':') ? account.split(':')[2] || '' : account\n            );\n            this.accounts = accounts;\n            this.emit('accountsChanged', { accounts });\n            return accounts;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      eth_accounts: {\n        sessionRequired: true,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          try {\n            const accounts = await this.sendAndWaitGrinderyRpcProviderRequest<\n              string[]\n            >(\n              'eth_accounts',\n              params ? (Array.isArray(params) ? params : [params]) : []\n            );\n            this.accounts = accounts;\n            this.emit('accountsChanged', { accounts });\n            return accounts;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      eth_sendTransaction: {\n        sessionRequired: true,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest<string[]>(\n            'eth_sendTransaction',\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n      personal_sign: {\n        sessionRequired: true,\n        execute: async (\n          params?: Partial<RequestArgumentsParams>\n        ): Promise<string> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest(\n            'personal_sign',\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n    });\n\n    window.addEventListener('load', () => {\n      this.emit('connect', { chainId: this.getChain() });\n      this.restorePairing();\n      this.restoreSession();\n    });\n  }\n\n  /**\n   * @summary Restores the pairing process if pairing token is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restorePairing(): Promise<void> {\n    const pairingToken = this.getStorageValue('pairingToken');\n    const sessionId = this.getStorageValue('sessionId');\n    if (pairingToken && !sessionId) {\n      try {\n        this.emit('restorePairing', {\n          connectUrl: this.getStorageValue('connectUrl'),\n          connectUrlBrowser: this.getStorageValue('connectUrlBrowser'),\n        });\n\n        const pairResult = await this.sendGrinderyRpcApiRequest<\n          ProviderPairingResult\n        >('checkout_waitForPairingResult', {\n          pairingToken,\n        });\n\n        this.clearStorage();\n        this.setStorageValue('sessionId', pairResult.session.sessionId);\n\n        if (!pairResult.session.sessionId) {\n          throw new ProviderError('Pairing failed', 4900);\n        }\n\n        const accounts = (\n          pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n        ).map(account =>\n          account.includes(':') ? account.split(':')[2] || '' : account\n        );\n        this.accounts = accounts;\n        this.emit('accountsChanged', { accounts });\n      } catch (error) {\n        this.accounts = [];\n        this.clearStorage();\n      }\n    }\n  }\n\n  /**\n   * @summary Restores the session if session Id is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restoreSession(): Promise<void> {\n    const pairingToken = this.getStorageValue('pairingToken');\n    const sessionId = this.getStorageValue('sessionId');\n    if (sessionId && !pairingToken) {\n      try {\n        await this.request<string[]>({\n          method: 'eth_requestAccounts',\n        });\n      } catch (error) {\n        this.accounts = [];\n        this.clearStorage();\n      }\n    }\n  }\n}\n","import { ProviderLocalStorage } from './LocalStorage';\nimport {\n  GrinderyRpcMethodName,\n  GrinderyRpcProviderRequestMethodName,\n  ProviderMethods,\n  ProviderRequestResult,\n  RequestArguments,\n  RequestArgumentsParams,\n} from '../types';\nimport { ProviderError } from './ProviderError';\n\n/**\n * @summary The provider base class\n * @since 0.1.0\n * @extends ProviderLocalStorage\n */\nexport class ProviderBase extends ProviderLocalStorage {\n  constructor() {\n    super();\n\n    this.injectProvider();\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return !!this.chainId;\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return this.isConnected() && !!this.getStorageValue('sessionId');\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet pairing is in progress (pending).\n   */\n  public isWalletConnectionPending(): boolean {\n    return this.isConnected() && !!this.getStorageValue('pairingToken');\n  }\n\n  /**\n   * @summary Gets the connected chain ID in hex format\n   * @public\n   * @returns {string} The chain ID in hex format\n   */\n  public getChain(): string {\n    return `0x${parseFloat(this.chainId.split(':')[1]).toString(16)}`;\n  }\n\n  /**\n   * @summary Gets the connected user's wallet address\n   * @public\n   * @returns {string} The ethereum wallet address\n   */\n  public getAddress(): string {\n    return this.accounts[0] || '';\n  }\n\n  /**\n   * @summary Sends a request to the provider\n   * @public\n   * @param {RequestArguments} args Request arguments\n   * @param {string} args.method The method name\n   * @param {RequestArgumentsParams} args.params The method parameters\n   * @returns {T} The result of the request\n   */\n  public async request<T>({ method, params }: RequestArguments): Promise<T> {\n    if (!this.chainId) {\n      this.emit('disconnect', new ProviderError('Disconnected', 4900));\n      throw new ProviderError('Disconnected', 4900);\n    }\n    if (!this.methods[method]) {\n      throw new ProviderError('Unsupported Method', 4200);\n    }\n\n    try {\n      if (this.methods[method].sessionRequired && !this.isWalletConnected()) {\n        throw new ProviderError('Unauthorized', 4900);\n      }\n\n      return (await this.methods[method].execute(params)) as T;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API and waits for the result.\n   * @public\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  public async sendAndWaitGrinderyRpcProviderRequest<T>(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[],\n    timeout?: number\n  ): Promise<T> {\n    const request = await this.sendGrinderyRpcProviderRequest(method, params);\n    return await this.waitGrinderyRpcProviderRequest(\n      request.requestToken,\n      timeout\n    );\n  }\n\n  /**\n   * @summary The application ID.\n   * @protected\n   */\n  protected appId: string = document.title || 'Grindery Wallet Provider';\n\n  /**\n   * @summary The chain ID in CAIP-2 format; e.g. \"eip155:1\".\n   * @protected\n   */\n  protected chainId: string = 'eip155:137';\n\n  /**\n   * @summary The list of supported provider methods.\n   * @protected\n   */\n  protected methods: ProviderMethods = {};\n\n  /**\n   * @summary The user's wallet addresses list.\n   * @protected\n   */\n  protected accounts: string[] = [];\n\n  /**\n   * @summary Registers the provider methods.\n   * @protected\n   * @param {ProviderMethods} methods A map of supported provider methods.\n   * @returns {void}\n   */\n  protected registerProviderMethods(methods: ProviderMethods): void {\n    this.methods = methods;\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API.\n   * @protected\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @returns {ProviderRequestResult} The request token to use in the `waitGrinderyRpcProviderRequest` method\n   */\n  protected async sendGrinderyRpcProviderRequest(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[]\n  ): Promise<ProviderRequestResult> {\n    if (!this.getStorageValue('sessionId')) {\n      throw new ProviderError('Unauthorized', 4900);\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<ProviderRequestResult>(\n        'checkout_request',\n        {\n          sessionId: this.getStorageValue('sessionId'),\n          scope: this.chainId,\n          request: {\n            method,\n            params,\n          },\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Waits for the result of the provider request.\n   * @protected\n   * @param {string} requestToken A token to identify provider request. Recieved in the results of `sendGrinderyRpcProviderRequest` method.\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  protected async waitGrinderyRpcProviderRequest<T>(\n    requestToken: string,\n    timeout?: number\n  ): Promise<T> {\n    if (!this.getStorageValue('sessionId')) {\n      throw new ProviderError('Unauthorized', 4900);\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<T>(\n        'checkout_waitForRequestResult',\n        {\n          requestToken,\n          timeout,\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a request to the Grindery Walletconnect RPC API.\n   * @protected\n   * @param {GrinderyRpcMethodName} method Request method name\n   * @param {RequestArgumentsParams} params Request parameters\n   * @returns {T} The result of the request\n   */\n  protected async sendGrinderyRpcApiRequest<T>(\n    method: GrinderyRpcMethodName,\n    params?: RequestArgumentsParams\n  ): Promise<T> {\n    try {\n      const response = await fetch('https://walletconnect-api.grindery.com', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method,\n          params: params || [],\n        }),\n      });\n      const data = await response.json();\n      if (data.error) {\n        throw new ProviderError(data.error.message, data.error.code);\n      }\n      if (!data.result) {\n        throw new ProviderError('No result', 4900);\n      }\n      return data.result;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Creates a provider error from an unknown error\n   * @protected\n   * @param {unknown} error Optional. Error object.\n   * @returns {ProviderError} The provider error\n   */\n  protected createProviderRpcError(error?: unknown): ProviderError {\n    let errorResponse: ProviderError;\n    if (error instanceof ProviderError) {\n      errorResponse = new ProviderError(error.message || 'Unknown error');\n      errorResponse.code = error.code || 4900;\n      errorResponse.data = error.data;\n    } else if (error instanceof Error) {\n      errorResponse = new ProviderError(error.message || 'Unknown error');\n      errorResponse.code = 4900;\n    } else {\n      errorResponse = new ProviderError('Unknown error');\n      errorResponse.code = 4900;\n    }\n    return errorResponse;\n  }\n\n  /**\n   * @summary Injects the provider into the window object\n   * @private\n   * @returns {void}\n   */\n  private injectProvider(): void {\n    if (!window.ethereum) {\n      window.ethereum = this;\n    } else {\n      if (\n        window.ethereum.providers &&\n        Array.isArray(window.ethereum.providers)\n      ) {\n        window.ethereum.providers.push(this);\n      } else {\n        window.ethereum.providers = [window.ethereum, this];\n      }\n    }\n  }\n}\n","import { GrinderyWalletProvider } from './GrinderyWalletProvider';\n\n/**\n * @summary The Grindery Wallet SDK class\n * @since 0.1.0\n */\nexport class GrinderyWalletSDK {\n  /**\n   * @summary The provider instance\n   * @public\n   */\n  public provider: GrinderyWalletProvider;\n\n  constructor() {\n    this.provider = this.getWeb3Provider();\n  }\n\n  /**\n   * @summary Checks if the provider is connected to the server\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return this.provider.isConnected();\n  }\n\n  /**\n   * @summary Checks if the provider is connected to the server and the Grindery Wallet\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return this.provider.isWalletConnected();\n  }\n\n  /**\n   * @summary Initiate connection to the Grindery Wallet\n   * @public\n   * @returns {Promise<string[]>} The array of ethereum addresses\n   * @since 0.1.0\n   */\n  public async connect(): Promise<string[]> {\n    this.provider.on(\n      'connect',\n      ({ connectUrlBrowser }: { connectUrlBrowser: string }) => {\n        const WebApp = window.Telegram?.WebApp;\n        if (\n          WebApp &&\n          WebApp.openTelegramLink &&\n          WebApp.platform &&\n          WebApp.platform !== 'unknown'\n        ) {\n          WebApp.openTelegramLink(connectUrlBrowser);\n          if (WebApp.close) {\n            window.Telegram.WebApp.close();\n          }\n        } else {\n          window.open(connectUrlBrowser, '_blank');\n        }\n      }\n    );\n    return await this.provider.request({ method: 'eth_requestAccounts' });\n  }\n\n  /**\n   * @summary Sends a transaction request to the Grindery Wallet\n   * @public\n   * @since 0.1.0\n   * @param {object} params The transaction parameters\n   * @param {string} params.to The recipient address\n   * @param {string} [params.value] The amount to send in wei\n   * @param {string} [params.data] The data to send\n   * @returns {Promise<string[]>} Array with transaction hash string\n   */\n  public async sendTransaction(params: {\n    to: string;\n    value?: string;\n    data?: string;\n  }): Promise<string[]> {\n    return await this.provider.request<string[]>({\n      method: 'eth_sendTransaction',\n      params: [params],\n    });\n  }\n\n  /**\n   * @summary Sends a personal signature request to the Grindery Wallet\n   * @public\n   * @since 0.1.0\n   * @param {string} message The message to sign\n   * @returns {Promise<string>} Signature string\n   */\n  public async signMessage(message: string): Promise<string> {\n    return await this.provider.request<string>({\n      method: 'personal_sign',\n      params: [message, this.provider.getAddress()],\n    });\n  }\n\n  /**\n   * @summary Adds a listener to the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public on(event: string, callback: Function) {\n    this.provider.on(event, callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public removeListener(event: string, callback: Function) {\n    this.provider.removeListener(event, callback);\n    return this;\n  }\n\n  /**\n   * @summary Gets the Grindery Wallet ethereum provider\n   * @returns {GrinderyWalletProvider} The Grindery Wallet ethereum provider\n   */\n  private getWeb3Provider(): GrinderyWalletProvider {\n    let provider = window.ethereum?.providers?.find(\n      (provider: GrinderyWalletProvider | unknown) =>\n        provider instanceof GrinderyWalletProvider && provider.isGrinderyWallet\n    );\n    if (\n      !provider &&\n      window.ethereum instanceof GrinderyWalletProvider &&\n      window.ethereum.isGrinderyWallet\n    ) {\n      provider = window.ethereum;\n    }\n    if (!provider) {\n      provider = new GrinderyWalletProvider();\n    }\n    return provider;\n  }\n}\n","import { GrinderyWalletSDK } from './classes/GrinderyWalletSDK';\n\ndeclare global {\n  interface Window {\n    Telegram?: any;\n    ethereum?: any;\n    Grindery?: {\n      WalletSDK?: GrinderyWalletSDK;\n    };\n  }\n}\n\nfunction init() {\n  if (\n    !window.Grindery?.WalletSDK ||\n    !(window.Grindery.WalletSDK instanceof GrinderyWalletSDK)\n  ) {\n    window.Grindery = {\n      ...(window.Grindery || {}),\n      WalletSDK: new GrinderyWalletSDK(),\n    };\n  }\n}\n\n// Initialize the SDK when the page is loaded\ninit();\n"],"names":["ProviderLocalStorage","_EventEmitter","apply","arguments","_inheritsLoose","_proto","prototype","getStorageValue","key","this","getStorage","setStorageValue","value","storage","saveStorage","clearStorage","JSON","parse","localStorage","getItem","error","setItem","stringify","Error","EventEmitter","events","Map","on","event","callback","has","set","get","push","removeListener","callbacks","filter","cb","emit","data","Array","_len","_key","console","log","forEach","ProviderError","_Error","message","code","_this","call","_wrapNativeSuper","GrinderyWalletProvider","_ProviderBase","_execute4","_execute3","_execute2","_execute","registerProviderMethods","eth_requestAccounts","sessionRequired","execute","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","accounts","_pairResult$session","pairResult","_accounts","_pairResult$session2","result","_pairResult","_accounts2","wrap","_context","prev","next","isWalletConnected","request","method","sent","abrupt","t0","isWalletConnectionPending","connectUrl","connectUrlBrowser","sendGrinderyRpcApiRequest","pairingToken","session","sessionId","namespaces","map","account","includes","split","t1","appId","t2","createProviderRpcError","stop","_x","eth_accounts","_callee2","_context2","sendAndWaitGrinderyRpcProviderRequest","isArray","_x2","eth_sendTransaction","_callee3","_context3","_x3","personal_sign","_callee4","_context4","_x4","window","addEventListener","chainId","getChain","restorePairing","restoreSession","_restorePairing","_callee5","_pairResult$session3","_context5","_restoreSession","_callee6","_context6","_ProviderLocalStorage","ProviderBase","document","title","injectProvider","isConnected","parseFloat","toString","getAddress","_request","_ref","methods","_sendAndWaitGrinderyRpcProviderRequest","timeout","sendGrinderyRpcProviderRequest","waitGrinderyRpcProviderRequest","requestToken","_sendGrinderyRpcProviderRequest","scope","_x5","_x6","_waitGrinderyRpcProviderRequest","_x7","_x8","_sendGrinderyRpcApiRequest","response","fetch","headers","Content-Type","body","jsonrpc","id","json","_x9","_x10","errorResponse","ethereum","providers","GrinderyWalletSDK","provider","getWeb3Provider","connect","_connect","WebApp","_window$Telegram","Telegram","openTelegramLink","platform","close","open","sendTransaction","_sendTransaction","signMessage","_signMessage","_window$ethereum","find","isGrinderyWallet","_window$Grindery","Grindery","WalletSDK","_extends"],"mappings":"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"}