{"version":3,"file":"grindery-wallet-sdk.cjs.production.min.js","sources":["../src/provider/ProviderError.ts","../src/provider/GrinderyWalletProvider.ts","../src/provider/Provider.ts","../src/provider/ProviderLocalStorage.ts","../src/provider/ProviderEventEmitter.ts","../src/sdk/GrinderyWalletSDK.ts","../src/index.ts"],"sourcesContent":["/**\n * @summary Error class for GrinderyWalletProvider\n * @since 0.1.0\n * @extends Error\n */\nexport class ProviderError extends Error {\n  name: string = 'GrinderyWalletProviderError';\n  code?: number;\n  data?: unknown;\n\n  constructor(message: string, code?: number, data?: unknown) {\n    super(message);\n    this.code = code;\n    this.data = data;\n  }\n}\n","import { Provider } from './Provider';\nimport { ProviderError } from './ProviderError';\nimport {\n  ProviderInterface,\n  ProviderPairingResult,\n  ProviderRequestPairingResult,\n  RequestArgumentsParams,\n} from './types';\n\n/**\n * @summary The Grindery Wallet Ethereum Injected Provider Class.\n * @extends Provider\n * @implements ProviderInterface\n */\nexport class GrinderyWalletProvider extends Provider\n  implements ProviderInterface {\n  /**\n   * @summary Indicates that the provider is a Grindery Wallet.\n   */\n  public readonly isGrinderyWallet: boolean = true;\n\n  constructor() {\n    super();\n\n    this.registerProviderMethods({\n      eth_requestAccounts: {\n        sessionRequired: false,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          if (this.isWalletConnected()) {\n            try {\n              const accounts = await this.request<string[]>({\n                method: 'eth_accounts',\n                params: params || [],\n              });\n              this.accounts = accounts;\n              this.emit('accountsChanged', { accounts });\n              return accounts;\n            } catch (error) {\n              this.setStorageValue('sessionId', '');\n              // skip failed request and continue with pairing\n            }\n          }\n          if (this.isWalletConnectionPending()) {\n            try {\n              this.emit('restorePairing', {\n                connectUrl: this.getStorageValue('connectUrl'),\n                connectUrlBrowser: this.getStorageValue('connectUrlBrowser'),\n              });\n\n              const pairResult = await this.sendGrinderyRpcApiRequest<\n                ProviderPairingResult\n              >('checkout_waitForPairingResult', {\n                pairingToken: this.getStorageValue('pairingToken'),\n              });\n\n              this.clearStorage();\n              this.setStorageValue('sessionId', pairResult.session.sessionId);\n\n              if (!pairResult.session.sessionId) {\n                throw new ProviderError('Pairing failed', 4900);\n              }\n\n              const accounts =\n                pairResult.session?.namespaces?.[`eip155`]?.accounts || [];\n              this.accounts = accounts;\n              this.emit('accountsChanged', { accounts });\n              return [];\n            } catch (error) {\n              this.clearStorage();\n              // skip failed request and continue with pairing\n            }\n          }\n          try {\n            const result = await this.sendGrinderyRpcApiRequest<\n              ProviderRequestPairingResult\n            >('checkout_requestPairing', { appId: this.appId });\n\n            if (!result.pairingToken || !result.connectUrl) {\n              throw new ProviderError('Pairing failed', 4900);\n            }\n\n            this.setStorageValue('pairingToken', result.pairingToken);\n            this.setStorageValue('connectUrl', result.connectUrl);\n            this.setStorageValue('connectUrlBrowser', result.connectUrlBrowser);\n            this.emit('pairing', {\n              connectUrl: result.connectUrl,\n              connectUrlBrowser: result.connectUrlBrowser,\n            });\n            const pairResult = await this.sendGrinderyRpcApiRequest<\n              ProviderPairingResult\n            >('checkout_waitForPairingResult', {\n              pairingToken: result.pairingToken,\n            });\n\n            this.setStorageValue('sessionId', pairResult.session.sessionId);\n\n            if (!pairResult.session.sessionId) {\n              throw new ProviderError('Pairing failed', 4900);\n            }\n            this.setStorageValue('pairingToken', '');\n            this.setStorageValue('connectUrl', '');\n            this.setStorageValue('connectUrlBrowser', '');\n            const accounts =\n              pairResult.session?.namespaces?.[`eip155`]?.accounts || [];\n            this.accounts = accounts;\n            this.emit('accountsChanged', { accounts });\n            return accounts;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      eth_accounts: {\n        sessionRequired: true,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          try {\n            const { requestToken } = await this.sendGrinderyRpcProviderRequest(\n              'eth_accounts',\n              params ? (Array.isArray(params) ? params : [params]) : []\n            );\n            if (!requestToken) {\n              throw new ProviderError('No request token', 4900);\n            }\n            const accounts = await this.waitGrinderyRpcProviderRequest<\n              string[]\n            >(requestToken);\n            this.accounts = accounts;\n            this.emit('accountsChanged', { accounts });\n            return accounts;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      eth_sendTransaction: {\n        sessionRequired: true,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          try {\n            const { requestToken } = await this.sendGrinderyRpcProviderRequest(\n              'eth_sendTransaction',\n              params ? (Array.isArray(params) ? params : [params]) : []\n            );\n            if (!requestToken) {\n              throw new ProviderError('No request token', 4900);\n            }\n            return await this.waitGrinderyRpcProviderRequest<string[]>(\n              requestToken\n            );\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      personal_sign: {\n        sessionRequired: true,\n        execute: async (\n          params?: Partial<RequestArgumentsParams>\n        ): Promise<string> => {\n          try {\n            const { requestToken } = await this.sendGrinderyRpcProviderRequest(\n              'personal_sign',\n              params ? (Array.isArray(params) ? params : [params]) : []\n            );\n            if (!requestToken) {\n              throw new ProviderError('No request token', 4900);\n            }\n            return await this.waitGrinderyRpcProviderRequest(requestToken);\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n    });\n  }\n}\n","import { ProviderError } from './ProviderError';\nimport { ProviderLocalStorage } from './ProviderLocalStorage';\nimport {\n  GrinderyRpcMethodName,\n  GrinderyRpcProviderRequestMethodName,\n  ProviderMethods,\n  ProviderRequestResult,\n  RequestArguments,\n  RequestArgumentsParams,\n} from './types';\n\n/**\n * @summary The provider class\n * @since 0.1.0\n * @extends ProviderLocalStorage\n */\nexport class Provider extends ProviderLocalStorage {\n  constructor() {\n    super();\n\n    this.injectProvider();\n\n    window.addEventListener('load', () => {\n      this.emit('connect', { chainId: this.getChain() });\n      this.restoreSession();\n    });\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return !!this.chainId;\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return this.isConnected() && !!this.getStorageValue('sessionId');\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet pairing is in progress (pending).\n   */\n  public isWalletConnectionPending(): boolean {\n    return this.isConnected() && !!this.getStorageValue('pairingToken');\n  }\n\n  /**\n   * @summary Gets the connected chain ID in hex format\n   * @public\n   * @returns {string} The chain ID in hex format\n   */\n  public getChain(): string {\n    return `0x${parseFloat(this.chainId.split(':')[1]).toString(16)}`;\n  }\n\n  /**\n   * @summary Gets the connected user's wallet address\n   * @public\n   * @returns {string} The ethereum wallet address\n   */\n  public getAddress(): string {\n    return this.accounts[0]?.split(':')[2] || '';\n  }\n\n  /**\n   * @summary Sends a request to the provider\n   * @public\n   * @param {RequestArguments} args Request arguments\n   * @param {string} args.method The method name\n   * @param {RequestArgumentsParams} args.params The method parameters\n   * @returns {T} The result of the request\n   */\n  public async request<T>({ method, params }: RequestArguments): Promise<T> {\n    if (!this.chainId) {\n      this.emit('disconnect', new ProviderError('Disconnected', 4900));\n      throw new ProviderError('Disconnected', 4900);\n    }\n    if (!this.methods[method]) {\n      throw new ProviderError('Unsupported Method', 4200);\n    }\n\n    try {\n      if (this.methods[method].sessionRequired && !this.isWalletConnected()) {\n        throw new ProviderError('Unauthorized', 4900);\n      }\n\n      return (await this.methods[method].execute(params)) as T;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary The application ID.\n   * @protected\n   */\n  protected appId: string = window.location.href;\n\n  /**\n   * @summary The chain ID in CAIP-2 format; e.g. \"eip155:1\".\n   * @protected\n   */\n  protected chainId: string = 'eip155:137';\n\n  /**\n   * @summary The list of supported provider methods.\n   * @protected\n   */\n  protected methods: ProviderMethods = {};\n\n  /**\n   * @summary The user's wallet addresses list.\n   * @protected\n   */\n  protected accounts: string[] = [];\n\n  /**\n   * @summary Registers the provider methods.\n   * @protected\n   * @param {ProviderMethods} methods A map of supported provider methods.\n   * @returns {void}\n   */\n  protected registerProviderMethods(methods: ProviderMethods): void {\n    this.methods = methods;\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API.\n   * @protected\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @returns {ProviderRequestResult} The request token to use in the `waitGrinderyRpcProviderRequest` method\n   */\n  protected async sendGrinderyRpcProviderRequest(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[]\n  ): Promise<ProviderRequestResult> {\n    if (!this.getStorageValue('sessionId')) {\n      throw new ProviderError('Unauthorized', 4900);\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<ProviderRequestResult>(\n        'checkout_request',\n        {\n          sessionId: this.getStorageValue('sessionId'),\n          scope: this.chainId,\n          request: {\n            method,\n            params,\n          },\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Waits for the result of the provider request.\n   * @protected\n   * @param {string} requestToken A token to identify provider request. Recieved in the results of `sendGrinderyRpcProviderRequest` method.\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  protected async waitGrinderyRpcProviderRequest<T>(\n    requestToken: string,\n    timeout?: number\n  ): Promise<T> {\n    if (!this.getStorageValue('sessionId')) {\n      throw new ProviderError('Unauthorized', 4900);\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<T>(\n        'checkout_waitForRequestResult',\n        {\n          requestToken,\n          timeout,\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a request to the Grindery Walletconnect RPC API.\n   * @protected\n   * @param {GrinderyRpcMethodName} method Request method name\n   * @param {RequestArgumentsParams} params Request parameters\n   * @returns {T} The result of the request\n   */\n  protected async sendGrinderyRpcApiRequest<T>(\n    method: GrinderyRpcMethodName,\n    params?: RequestArgumentsParams\n  ): Promise<T> {\n    try {\n      const response = await fetch('https://walletconnect-api.grindery.com', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method,\n          params: params || [],\n        }),\n      });\n      const data = await response.json();\n      if (data.error) {\n        throw new ProviderError(data.error.message, data.error.code);\n      }\n      if (!data.result) {\n        throw new ProviderError('No result', 4900);\n      }\n      return data.result;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Creates a provider error from an unknown error\n   * @protected\n   * @param {unknown} error Optional. Error object.\n   * @returns {ProviderError} The provider error\n   */\n  protected createProviderRpcError(error?: unknown): ProviderError {\n    let errorResponse: ProviderError;\n    if (error instanceof ProviderError) {\n      errorResponse = new ProviderError(error.message || 'Unknown error');\n      errorResponse.code = error.code || 4900;\n      errorResponse.data = error.data;\n    } else if (error instanceof Error) {\n      errorResponse = new ProviderError(error.message || 'Unknown error');\n      errorResponse.code = 4900;\n    } else {\n      errorResponse = new ProviderError('Unknown error');\n      errorResponse.code = 4900;\n    }\n    return errorResponse;\n  }\n\n  /**\n   * @summary Restores the session if session Id is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restoreSession(): Promise<void> {\n    const sessionId = this.getStorageValue('sessionId');\n    if (sessionId) {\n      try {\n        await this.request<string[]>({\n          method: 'eth_requestAccounts',\n        });\n      } catch (error) {\n        this.accounts = [];\n        this.clearStorage();\n      }\n    }\n  }\n\n  /**\n   * @summary Injects the provider into the window object\n   * @private\n   * @returns {void}\n   */\n  private injectProvider(): void {\n    if (!window.ethereum) {\n      window.ethereum = this;\n    } else {\n      if (\n        window.ethereum.providers &&\n        Array.isArray(window.ethereum.providers)\n      ) {\n        window.ethereum.providers.push(this);\n      } else {\n        window.ethereum.providers = [window.ethereum, this];\n      }\n    }\n  }\n}\n","import { ProviderEventEmitter } from './ProviderEventEmitter';\nimport { ProviderStorage, ProviderStorageKey } from './types';\n\nconst LOCALSTORAGE_KEY = 'GrinderyWalletProvider';\n\n/**\n * @summary A local storage class for the provider\n * @since 0.1.0\n * @extends ProviderEventEmitter\n */\nexport class ProviderLocalStorage extends ProviderEventEmitter {\n  /**\n   * @summary Gets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @returns {string} The value of the storage by the key\n   */\n  protected getStorageValue(key: ProviderStorageKey): string {\n    const value = this.getStorage()[key] || '';\n    return value;\n  }\n\n  /**\n   * @summary Sets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @param {string} value The value to set\n   * @returns {void}\n   */\n  protected setStorageValue(key: ProviderStorageKey, value: string): void {\n    const storage = this.getStorage();\n    storage[key] = value;\n    this.saveStorage(storage);\n  }\n\n  /**\n   * @summary Clears the storage\n   * @protected\n   * @returns {void}\n   */\n  protected clearStorage(): void {\n    this.saveStorage({});\n  }\n\n  /**\n   * @summary Gets the provider storage\n   * @returns {ProviderStorage} The provider storage\n   */\n  private getStorage(): ProviderStorage {\n    try {\n      return JSON.parse(\n        localStorage.getItem(LOCALSTORAGE_KEY) || '{}'\n      ) as ProviderStorage;\n    } catch (error) {\n      localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify({}));\n      throw new Error('Error parsing storage');\n    }\n  }\n\n  /**\n   * @summary Saves the provider storage\n   * @param {ProviderStorage} storage Provider storage object\n   */\n  private saveStorage(storage: ProviderStorage): void {\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(storage));\n  }\n}\n","/**\n * @summary A class for emitting provider events\n * @since 0.1.0\n */\nexport class ProviderEventEmitter {\n  /**\n   * @summary A map of events and their listeners\n   */\n  private events: Map<string, Array<Function>>;\n\n  constructor() {\n    this.events = new Map();\n  }\n\n  /**\n   * @summary Adds a listener to the provider event\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {ProviderEventEmitter} The instance of the class itself\n   */\n  on(event: string, callback: Function) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event)!.push(callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the provider event\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {ProviderEventEmitter} The instance of the class itself\n   */\n  removeListener(event: string, callback: Function) {\n    if (this.events.has(event)) {\n      const callbacks = this.events.get(event)!.filter(cb => cb !== callback);\n      this.events.set(event, callbacks);\n    }\n    return this;\n  }\n\n  /**\n   * @summary Emits an event\n   * @param {string} event Event name\n   * @param data Event data\n   * @returns {ProviderEventEmitter} The instance of the class itself\n   */\n  protected emit(event: string, ...data: any[]) {\n    if (this.events.has(event)) {\n      console.log('[GrinderyWalletProvider] > Event:', event, data);\n      this.events.get(event)!.forEach(callback => {\n        callback(...data);\n      });\n    }\n    return this;\n  }\n}\n","import { GrinderyWalletProvider } from '../provider/GrinderyWalletProvider';\n\n/**\n * @summary The Grindery Wallet SDK class\n * @since 0.1.0\n */\nexport class GrinderyWalletSDK {\n  /**\n   * @summary The provider instance\n   * @public\n   */\n  public provider: GrinderyWalletProvider;\n\n  constructor() {\n    this.provider = this.getWeb3Provider();\n  }\n\n  /**\n   * @summary Gets the Grindery Wallet ethereum provider\n   * @returns {GrinderyWalletProvider} The Grindery Wallet ethereum provider\n   */\n  private getWeb3Provider(): GrinderyWalletProvider {\n    let provider = window.ethereum?.providers?.find(\n      (provider: GrinderyWalletProvider | unknown) =>\n        provider instanceof GrinderyWalletProvider && provider.isGrinderyWallet\n    );\n    if (\n      !provider &&\n      window.ethereum instanceof GrinderyWalletProvider &&\n      window.ethereum.isGrinderyWallet\n    ) {\n      provider = window.ethereum;\n    }\n    if (!provider) {\n      provider = new GrinderyWalletProvider();\n    }\n    return provider;\n  }\n}\n","import { GrinderyWalletSDK } from './sdk/GrinderyWalletSDK';\n\ndeclare global {\n  interface Window {\n    Telegram?: any;\n    ethereum?: any;\n    Grindery?: {\n      WalletSDK?: GrinderyWalletSDK;\n    };\n  }\n}\n\nfunction init() {\n  if (\n    !window.Grindery?.WalletSDK ||\n    !(window.Grindery.WalletSDK instanceof GrinderyWalletSDK)\n  ) {\n    window.Grindery = {\n      ...(window.Grindery || {}),\n      WalletSDK: new GrinderyWalletSDK(),\n    };\n  }\n}\n\n// Initialize the SDK when the page is loaded\ninit();\n"],"names":["ProviderError","_Error","message","code","data","_this","call","_inheritsLoose","_wrapNativeSuper","Error","GrinderyWalletProvider","_Provider","_execute4","_execute3","_execute2","_execute","registerProviderMethods","eth_requestAccounts","sessionRequired","execute","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","accounts","_pairResult$session","pairResult","_accounts","_pairResult$session2","result","_pairResult","_accounts2","wrap","_context","prev","next","isWalletConnected","request","method","sent","emit","abrupt","t0","setStorageValue","isWalletConnectionPending","connectUrl","getStorageValue","connectUrlBrowser","sendGrinderyRpcApiRequest","pairingToken","clearStorage","session","sessionId","namespaces","t1","appId","t2","createProviderRpcError","stop","_x","apply","arguments","eth_accounts","_callee2","requestToken","_context2","sendGrinderyRpcProviderRequest","Array","isArray","waitGrinderyRpcProviderRequest","_x2","eth_sendTransaction","_callee3","_context3","_x3","personal_sign","_callee4","_context4","_x4","_ProviderLocalStorage","Provider","window","location","href","injectProvider","addEventListener","chainId","getChain","restoreSession","_proto","prototype","isConnected","this","parseFloat","split","toString","getAddress","_this$accounts$","_request","_ref","methods","_sendGrinderyRpcProviderRequest","scope","_waitGrinderyRpcProviderRequest","timeout","_x5","_sendGrinderyRpcApiRequest","response","fetch","headers","Content-Type","body","JSON","stringify","jsonrpc","id","json","error","_x6","_x7","errorResponse","_restoreSession","_callee5","_context5","ethereum","providers","push","_ProviderEventEmitter","ProviderLocalStorage","key","getStorage","value","storage","saveStorage","parse","localStorage","getItem","setItem","ProviderEventEmitter","events","Map","on","event","callback","has","set","get","removeListener","callbacks","filter","cb","_len","_key","console","log","forEach","GrinderyWalletSDK","provider","getWeb3Provider","_window$ethereum","find","isGrinderyWallet","_window$Grindery","Grindery","WalletSDK","_extends"],"mappings":"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"}