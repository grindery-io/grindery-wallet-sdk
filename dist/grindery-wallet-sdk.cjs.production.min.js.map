{"version":3,"file":"grindery-wallet-sdk.cjs.production.min.js","sources":["../src/provider/ProviderError.ts","../src/provider/GrinderyWalletProvider.ts","../src/provider/Provider.ts","../src/provider/ProviderLocalStorage.ts","../src/provider/ProviderEventEmitter.ts","../src/sdk/GrinderyWalletSDK.ts","../src/index.ts"],"sourcesContent":["/**\n * @summary Error class for GrinderyWalletProvider\n * @since 0.1.0\n * @extends Error\n */\nexport class ProviderError extends Error {\n  name: string = 'GrinderyWalletProviderError';\n  code?: number;\n  data?: unknown;\n\n  constructor(message: string, code?: number, data?: unknown) {\n    super(message);\n    this.code = code;\n    this.data = data;\n  }\n}\n","import { Provider } from './Provider';\nimport { ProviderError } from './ProviderError';\nimport {\n  ProviderInterface,\n  ProviderPairingResult,\n  ProviderRequestPairingResult,\n  RequestArgumentsParams,\n} from './types';\n\n/**\n * @summary The Grindery Wallet Ethereum Injected Provider Class.\n * @extends Provider\n * @implements ProviderInterface\n */\nexport class GrinderyWalletProvider extends Provider\n  implements ProviderInterface {\n  /**\n   * @summary Indicates that the provider is a Grindery Wallet.\n   */\n  public readonly isGrinderyWallet: boolean = true;\n\n  constructor() {\n    super();\n\n    this.registerProviderMethods({\n      eth_requestAccounts: {\n        sessionRequired: false,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          if (this.isWalletConnected()) {\n            try {\n              const accounts = await this.request<string[]>({\n                method: 'eth_accounts',\n                params: params || [],\n              });\n              this.accounts = accounts;\n              this.emit('accountsChanged', { accounts });\n              return accounts;\n            } catch (error) {\n              this.setStorageValue('sessionId', '');\n              // skip failed request and continue with pairing\n            }\n          }\n          if (this.isWalletConnectionPending()) {\n            try {\n              this.emit('restorePairing', {\n                connectUrl: this.getStorageValue('connectUrl'),\n                connectUrlBrowser: this.getStorageValue('connectUrlBrowser'),\n              });\n\n              const pairResult = await this.sendGrinderyRpcApiRequest<\n                ProviderPairingResult\n              >('checkout_waitForPairingResult', {\n                pairingToken: this.getStorageValue('pairingToken'),\n              });\n\n              this.clearStorage();\n              this.setStorageValue('sessionId', pairResult.session.sessionId);\n\n              if (!pairResult.session.sessionId) {\n                throw new ProviderError('Pairing failed', 4900);\n              }\n\n              const accounts = (\n                pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n              ).map(account =>\n                account.includes(':') ? account.split(':')[2] || '' : account\n              );\n              this.accounts = accounts;\n              this.emit('accountsChanged', { accounts });\n              return [];\n            } catch (error) {\n              this.clearStorage();\n              // skip failed request and continue with pairing\n            }\n          }\n          try {\n            const result = await this.sendGrinderyRpcApiRequest<\n              ProviderRequestPairingResult\n            >('checkout_requestPairing', { appId: this.appId });\n\n            if (!result.pairingToken || !result.connectUrl) {\n              throw new ProviderError('Pairing failed', 4900);\n            }\n\n            this.setStorageValue('pairingToken', result.pairingToken);\n            this.setStorageValue('connectUrl', result.connectUrl);\n            this.setStorageValue('connectUrlBrowser', result.connectUrlBrowser);\n            this.emit('pairing', {\n              connectUrl: result.connectUrl,\n              connectUrlBrowser: result.connectUrlBrowser,\n            });\n            const pairResult = await this.sendGrinderyRpcApiRequest<\n              ProviderPairingResult\n            >('checkout_waitForPairingResult', {\n              pairingToken: result.pairingToken,\n            });\n\n            this.setStorageValue('sessionId', pairResult.session.sessionId);\n\n            if (!pairResult.session.sessionId) {\n              throw new ProviderError('Pairing failed', 4900);\n            }\n            this.setStorageValue('pairingToken', '');\n            this.setStorageValue('connectUrl', '');\n            this.setStorageValue('connectUrlBrowser', '');\n            const accounts = (\n              pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n            ).map(account =>\n              account.includes(':') ? account.split(':')[2] || '' : account\n            );\n            this.accounts = accounts;\n            this.emit('accountsChanged', { accounts });\n            return accounts;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      eth_accounts: {\n        sessionRequired: true,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          try {\n            const accounts = await this.sendAndWaitGrinderyRpcProviderRequest<\n              string[]\n            >(\n              'eth_accounts',\n              params ? (Array.isArray(params) ? params : [params]) : []\n            );\n            this.accounts = accounts;\n            this.emit('accountsChanged', { accounts });\n            return accounts;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      eth_sendTransaction: {\n        sessionRequired: true,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest<string[]>(\n            'eth_sendTransaction',\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n      personal_sign: {\n        sessionRequired: true,\n        execute: async (\n          params?: Partial<RequestArgumentsParams>\n        ): Promise<string> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest(\n            'personal_sign',\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n    });\n  }\n}\n","import { ProviderError } from './ProviderError';\nimport { ProviderLocalStorage } from './ProviderLocalStorage';\nimport {\n  GrinderyRpcMethodName,\n  GrinderyRpcProviderRequestMethodName,\n  ProviderMethods,\n  ProviderPairingResult,\n  ProviderRequestResult,\n  RequestArguments,\n  RequestArgumentsParams,\n} from './types';\n\n/**\n * @summary The provider class\n * @since 0.1.0\n * @extends ProviderLocalStorage\n */\nexport class Provider extends ProviderLocalStorage {\n  constructor() {\n    super();\n\n    this.injectProvider();\n\n    window.addEventListener('load', () => {\n      this.emit('connect', { chainId: this.getChain() });\n      this.restorePairing();\n      this.restoreSession();\n    });\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return !!this.chainId;\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return this.isConnected() && !!this.getStorageValue('sessionId');\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet pairing is in progress (pending).\n   */\n  public isWalletConnectionPending(): boolean {\n    return this.isConnected() && !!this.getStorageValue('pairingToken');\n  }\n\n  /**\n   * @summary Gets the connected chain ID in hex format\n   * @public\n   * @returns {string} The chain ID in hex format\n   */\n  public getChain(): string {\n    return `0x${parseFloat(this.chainId.split(':')[1]).toString(16)}`;\n  }\n\n  /**\n   * @summary Gets the connected user's wallet address\n   * @public\n   * @returns {string} The ethereum wallet address\n   */\n  public getAddress(): string {\n    return this.accounts[0] || '';\n  }\n\n  /**\n   * @summary Sends a request to the provider\n   * @public\n   * @param {RequestArguments} args Request arguments\n   * @param {string} args.method The method name\n   * @param {RequestArgumentsParams} args.params The method parameters\n   * @returns {T} The result of the request\n   */\n  public async request<T>({ method, params }: RequestArguments): Promise<T> {\n    if (!this.chainId) {\n      this.emit('disconnect', new ProviderError('Disconnected', 4900));\n      throw new ProviderError('Disconnected', 4900);\n    }\n    if (!this.methods[method]) {\n      throw new ProviderError('Unsupported Method', 4200);\n    }\n\n    try {\n      if (this.methods[method].sessionRequired && !this.isWalletConnected()) {\n        throw new ProviderError('Unauthorized', 4900);\n      }\n\n      return (await this.methods[method].execute(params)) as T;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary The application ID.\n   * @protected\n   */\n  protected appId: string = document.title || 'Grindery Wallet Provider';\n\n  /**\n   * @summary The chain ID in CAIP-2 format; e.g. \"eip155:1\".\n   * @protected\n   */\n  protected chainId: string = 'eip155:137';\n\n  /**\n   * @summary The list of supported provider methods.\n   * @protected\n   */\n  protected methods: ProviderMethods = {};\n\n  /**\n   * @summary The user's wallet addresses list.\n   * @protected\n   */\n  protected accounts: string[] = [];\n\n  /**\n   * @summary Registers the provider methods.\n   * @protected\n   * @param {ProviderMethods} methods A map of supported provider methods.\n   * @returns {void}\n   */\n  protected registerProviderMethods(methods: ProviderMethods): void {\n    this.methods = methods;\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API and waits for the result.\n   * @protected\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  protected async sendAndWaitGrinderyRpcProviderRequest<T>(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[],\n    timeout?: number\n  ): Promise<T> {\n    const request = await this.sendGrinderyRpcProviderRequest(method, params);\n    return await this.waitGrinderyRpcProviderRequest(\n      request.requestToken,\n      timeout\n    );\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API.\n   * @protected\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @returns {ProviderRequestResult} The request token to use in the `waitGrinderyRpcProviderRequest` method\n   */\n  protected async sendGrinderyRpcProviderRequest(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[]\n  ): Promise<ProviderRequestResult> {\n    if (!this.getStorageValue('sessionId')) {\n      throw new ProviderError('Unauthorized', 4900);\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<ProviderRequestResult>(\n        'checkout_request',\n        {\n          sessionId: this.getStorageValue('sessionId'),\n          scope: this.chainId,\n          request: {\n            method,\n            params,\n          },\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Waits for the result of the provider request.\n   * @protected\n   * @param {string} requestToken A token to identify provider request. Recieved in the results of `sendGrinderyRpcProviderRequest` method.\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  protected async waitGrinderyRpcProviderRequest<T>(\n    requestToken: string,\n    timeout?: number\n  ): Promise<T> {\n    if (!this.getStorageValue('sessionId')) {\n      throw new ProviderError('Unauthorized', 4900);\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<T>(\n        'checkout_waitForRequestResult',\n        {\n          requestToken,\n          timeout,\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a request to the Grindery Walletconnect RPC API.\n   * @protected\n   * @param {GrinderyRpcMethodName} method Request method name\n   * @param {RequestArgumentsParams} params Request parameters\n   * @returns {T} The result of the request\n   */\n  protected async sendGrinderyRpcApiRequest<T>(\n    method: GrinderyRpcMethodName,\n    params?: RequestArgumentsParams\n  ): Promise<T> {\n    try {\n      const response = await fetch('https://walletconnect-api.grindery.com', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method,\n          params: params || [],\n        }),\n      });\n      const data = await response.json();\n      if (data.error) {\n        throw new ProviderError(data.error.message, data.error.code);\n      }\n      if (!data.result) {\n        throw new ProviderError('No result', 4900);\n      }\n      return data.result;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Creates a provider error from an unknown error\n   * @protected\n   * @param {unknown} error Optional. Error object.\n   * @returns {ProviderError} The provider error\n   */\n  protected createProviderRpcError(error?: unknown): ProviderError {\n    let errorResponse: ProviderError;\n    if (error instanceof ProviderError) {\n      errorResponse = new ProviderError(error.message || 'Unknown error');\n      errorResponse.code = error.code || 4900;\n      errorResponse.data = error.data;\n    } else if (error instanceof Error) {\n      errorResponse = new ProviderError(error.message || 'Unknown error');\n      errorResponse.code = 4900;\n    } else {\n      errorResponse = new ProviderError('Unknown error');\n      errorResponse.code = 4900;\n    }\n    return errorResponse;\n  }\n\n  /**\n   * @summary Restores the pairing process if pairing token is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restorePairing(): Promise<void> {\n    const pairingToken = this.getStorageValue('pairingToken');\n    const sessionId = this.getStorageValue('sessionId');\n    if (pairingToken && !sessionId) {\n      try {\n        this.emit('restorePairing', {\n          connectUrl: this.getStorageValue('connectUrl'),\n          connectUrlBrowser: this.getStorageValue('connectUrlBrowser'),\n        });\n\n        const pairResult = await this.sendGrinderyRpcApiRequest<\n          ProviderPairingResult\n        >('checkout_waitForPairingResult', {\n          pairingToken,\n        });\n\n        this.clearStorage();\n        this.setStorageValue('sessionId', pairResult.session.sessionId);\n\n        if (!pairResult.session.sessionId) {\n          throw new ProviderError('Pairing failed', 4900);\n        }\n\n        const accounts = (\n          pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n        ).map(account =>\n          account.includes(':') ? account.split(':')[2] || '' : account\n        );\n        this.accounts = accounts;\n        this.emit('accountsChanged', { accounts });\n      } catch (error) {\n        this.accounts = [];\n        this.clearStorage();\n      }\n    }\n  }\n\n  /**\n   * @summary Restores the session if session Id is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restoreSession(): Promise<void> {\n    const pairingToken = this.getStorageValue('pairingToken');\n    const sessionId = this.getStorageValue('sessionId');\n    if (sessionId && !pairingToken) {\n      try {\n        await this.request<string[]>({\n          method: 'eth_requestAccounts',\n        });\n      } catch (error) {\n        this.accounts = [];\n        this.clearStorage();\n      }\n    }\n  }\n\n  /**\n   * @summary Injects the provider into the window object\n   * @private\n   * @returns {void}\n   */\n  private injectProvider(): void {\n    if (!window.ethereum) {\n      window.ethereum = this;\n    } else {\n      if (\n        window.ethereum.providers &&\n        Array.isArray(window.ethereum.providers)\n      ) {\n        window.ethereum.providers.push(this);\n      } else {\n        window.ethereum.providers = [window.ethereum, this];\n      }\n    }\n  }\n}\n","import { ProviderEventEmitter } from './ProviderEventEmitter';\nimport { ProviderStorage, ProviderStorageKey } from './types';\n\nconst LOCALSTORAGE_KEY = 'GrinderyWalletProvider';\n\n/**\n * @summary A local storage class for the provider\n * @since 0.1.0\n * @extends ProviderEventEmitter\n */\nexport class ProviderLocalStorage extends ProviderEventEmitter {\n  /**\n   * @summary Gets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @returns {string} The value of the storage by the key\n   */\n  protected getStorageValue(key: ProviderStorageKey): string {\n    const value = this.getStorage()[key] || '';\n    return value;\n  }\n\n  /**\n   * @summary Sets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @param {string} value The value to set\n   * @returns {void}\n   */\n  protected setStorageValue(key: ProviderStorageKey, value: string): void {\n    const storage = this.getStorage();\n    storage[key] = value;\n    this.saveStorage(storage);\n  }\n\n  /**\n   * @summary Clears the storage\n   * @protected\n   * @returns {void}\n   */\n  protected clearStorage(): void {\n    this.saveStorage({});\n  }\n\n  /**\n   * @summary Gets the provider storage\n   * @returns {ProviderStorage} The provider storage\n   */\n  private getStorage(): ProviderStorage {\n    try {\n      return JSON.parse(\n        localStorage.getItem(LOCALSTORAGE_KEY) || '{}'\n      ) as ProviderStorage;\n    } catch (error) {\n      localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify({}));\n      throw new Error('Error parsing storage');\n    }\n  }\n\n  /**\n   * @summary Saves the provider storage\n   * @param {ProviderStorage} storage Provider storage object\n   */\n  private saveStorage(storage: ProviderStorage): void {\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(storage));\n  }\n}\n","/**\n * @summary A class for emitting provider events\n * @since 0.1.0\n */\nexport class ProviderEventEmitter {\n  /**\n   * @summary A map of events and their listeners\n   */\n  private events: Map<string, Array<Function>>;\n\n  constructor() {\n    this.events = new Map();\n  }\n\n  /**\n   * @summary Adds a listener to the provider event\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {ProviderEventEmitter} The instance of the class itself\n   */\n  on(event: string, callback: Function) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event)!.push(callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the provider event\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {ProviderEventEmitter} The instance of the class itself\n   */\n  removeListener(event: string, callback: Function) {\n    if (this.events.has(event)) {\n      const callbacks = this.events.get(event)!.filter(cb => cb !== callback);\n      this.events.set(event, callbacks);\n    }\n    return this;\n  }\n\n  /**\n   * @summary Emits an event\n   * @param {string} event Event name\n   * @param data Event data\n   * @returns {ProviderEventEmitter} The instance of the class itself\n   */\n  protected emit(event: string, ...data: any[]) {\n    if (this.events.has(event)) {\n      console.log('[GrinderyWalletProvider] > Event:', event, data);\n      this.events.get(event)!.forEach(callback => {\n        callback(...data);\n      });\n    }\n    return this;\n  }\n}\n","import { GrinderyWalletProvider } from '../provider/GrinderyWalletProvider';\n\n/**\n * @summary The Grindery Wallet SDK class\n * @since 0.1.0\n */\nexport class GrinderyWalletSDK {\n  /**\n   * @summary The provider instance\n   * @public\n   */\n  public provider: GrinderyWalletProvider;\n\n  constructor() {\n    this.provider = this.getWeb3Provider();\n  }\n\n  /**\n   * @summary Gets the Grindery Wallet ethereum provider\n   * @returns {GrinderyWalletProvider} The Grindery Wallet ethereum provider\n   */\n  private getWeb3Provider(): GrinderyWalletProvider {\n    let provider = window.ethereum?.providers?.find(\n      (provider: GrinderyWalletProvider | unknown) =>\n        provider instanceof GrinderyWalletProvider && provider.isGrinderyWallet\n    );\n    if (\n      !provider &&\n      window.ethereum instanceof GrinderyWalletProvider &&\n      window.ethereum.isGrinderyWallet\n    ) {\n      provider = window.ethereum;\n    }\n    if (!provider) {\n      provider = new GrinderyWalletProvider();\n    }\n    return provider;\n  }\n}\n","import { GrinderyWalletSDK } from './sdk/GrinderyWalletSDK';\n\ndeclare global {\n  interface Window {\n    Telegram?: any;\n    ethereum?: any;\n    Grindery?: {\n      WalletSDK?: GrinderyWalletSDK;\n    };\n  }\n}\n\nfunction init() {\n  if (\n    !window.Grindery?.WalletSDK ||\n    !(window.Grindery.WalletSDK instanceof GrinderyWalletSDK)\n  ) {\n    window.Grindery = {\n      ...(window.Grindery || {}),\n      WalletSDK: new GrinderyWalletSDK(),\n    };\n  }\n}\n\n// Initialize the SDK when the page is loaded\ninit();\n"],"names":["ProviderError","_Error","message","code","data","_this","call","_inheritsLoose","_wrapNativeSuper","Error","GrinderyWalletProvider","_Provider","_execute4","_execute3","_execute2","_execute","registerProviderMethods","eth_requestAccounts","sessionRequired","execute","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","accounts","_pairResult$session","pairResult","_accounts","_pairResult$session2","result","_pairResult","_accounts2","wrap","_context","prev","next","isWalletConnected","request","method","sent","emit","abrupt","t0","setStorageValue","isWalletConnectionPending","connectUrl","getStorageValue","connectUrlBrowser","sendGrinderyRpcApiRequest","pairingToken","clearStorage","session","sessionId","namespaces","map","account","includes","split","t1","appId","t2","createProviderRpcError","stop","_x","apply","arguments","eth_accounts","_callee2","_context2","sendAndWaitGrinderyRpcProviderRequest","Array","isArray","_x2","eth_sendTransaction","_callee3","_context3","_x3","personal_sign","_callee4","_context4","_x4","_ProviderLocalStorage","Provider","document","title","injectProvider","window","addEventListener","chainId","getChain","restorePairing","restoreSession","_proto","prototype","isConnected","this","parseFloat","toString","getAddress","_request","_ref","methods","_sendAndWaitGrinderyRpcProviderRequest","timeout","sendGrinderyRpcProviderRequest","waitGrinderyRpcProviderRequest","requestToken","_sendGrinderyRpcProviderRequest","scope","_x5","_x6","_waitGrinderyRpcProviderRequest","_x7","_x8","_sendGrinderyRpcApiRequest","_callee5","response","_context5","fetch","headers","Content-Type","body","JSON","stringify","jsonrpc","id","json","error","_x9","_x10","errorResponse","_restorePairing","_callee6","_context6","_restoreSession","_callee7","_context7","ethereum","providers","push","_ProviderEventEmitter","ProviderLocalStorage","key","getStorage","value","storage","saveStorage","parse","localStorage","getItem","setItem","ProviderEventEmitter","events","Map","on","event","callback","has","set","get","removeListener","callbacks","filter","cb","_len","_key","console","log","forEach","GrinderyWalletSDK","provider","getWeb3Provider","_window$ethereum","find","isGrinderyWallet","_window$Grindery","Grindery","WalletSDK","_extends"],"mappings":"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"}