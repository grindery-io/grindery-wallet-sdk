{"version":3,"file":"grindery-wallet-sdk.umd.development.js","sources":["../src/enums.ts","../src/utils/uuid.ts","../src/provider/WalletProviderEventEmitter.ts","../src/provider/WalletProviderLocalStorage.ts","../src/provider/WalletProviderError.ts","../src/provider/WalletProvider.ts","../src/provider/GrinderyWalletProvider.ts","../src/sdk/GrinderyWalletSDK.ts","../src/utils/getAppId.ts","../src/index.ts"],"sourcesContent":["export enum ProviderEvents {\n  accountsChanged = 'accountsChanged',\n  pair = 'pair',\n  connect = 'connect',\n  disconnect = 'disconnect',\n  chainChanged = 'chainChanged',\n  message = 'message',\n}\n\nexport enum ProviderStorageKeys {\n  pairingToken = 'pairingToken',\n  sessionId = 'sessionId',\n  connectUrl = 'connectUrl',\n  connectUrlBrowser = 'connectUrlBrowser',\n  shortToken = 'shortToken',\n  clientId = 'clientId',\n}\n\n/**\n * @summary The Grindery RPC API method names\n */\nexport enum GrinderyRpcMethodNames {\n  requestPairing = 'requestPairing',\n  waitForPairingResult = 'waitForPairingResult',\n  request = 'request',\n  waitForRequestResult = 'waitForRequestResult',\n  'disconnect' = 'disconnect',\n}\n\n/**\n * @summary The Grindery wallet provider method names\n */\nexport enum GrinderyRpcProviderRequestMethodNames {\n  eth_requestAccounts = 'eth_requestAccounts',\n  eth_accounts = 'eth_accounts',\n  personal_sign = 'personal_sign',\n  eth_sendTransaction = 'eth_sendTransaction',\n  gws_disconnect = 'gws_disconnect',\n}\n","/**\n * @summary Generates a Version 4 (pseudorandom) UUID\n * @returns {string} The UUID\n */\nexport const uuid = (): string => {\n  let d = '';\n  while (d.length < 32)\n    d += Math.random()\n      .toString(16)\n      .substr(2);\n  const vr = ((parseInt(d.substr(16, 1), 16) & 0x3) | 0x8).toString(16);\n  return `${d.substr(0, 8)}-${d.substr(8, 4)}-4${d.substr(\n    13,\n    3\n  )}-${vr}${d.substr(17, 3)}-${d.substr(20, 12)}`;\n};\n","import { ProviderEvent } from '../types';\n\n/**\n * @summary A class for emitting provider events\n * @since 0.1.0\n */\nexport class WalletProviderEventEmitter {\n  /**\n   * @summary A map of events and their listeners\n   * @public\n   */\n  public events: Map<ProviderEvent, Array<Function>>;\n\n  constructor() {\n    this.events = new Map();\n  }\n\n  /**\n   * @summary Adds a listener to the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public on(event: ProviderEvent, callback: Function) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event)!.push(callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public removeListener(event: ProviderEvent, callback: Function) {\n    if (this.events.has(event)) {\n      const callbacks = this.events.get(event)!.filter(cb => cb !== callback);\n      this.events.set(event, callbacks);\n    }\n    return this;\n  }\n\n  /**\n   * @summary Emits an event\n   * @public\n   * @param {string} event Event name\n   * @param data Event data\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  protected emit(event: ProviderEvent, ...data: any[]) {\n    if (this.events.has(event)) {\n      console.log('[Grindery.WalletSDK] > Event:', event, data[0]);\n      this.events.get(event)!.forEach(callback => {\n        callback(...data);\n      });\n    }\n    return this;\n  }\n}\n","import { ProviderStorage, ProviderStorageKey } from '../types';\nimport { uuid } from '../utils/uuid';\nimport { WalletProviderEventEmitter } from './WalletProviderEventEmitter';\n\nconst LOCALSTORAGE_KEY = 'GrinderyWalletProvider';\n\n/**\n * @summary A local storage class for the provider\n * @since 0.1.0\n * @extends WalletProviderEventEmitter\n */\nexport class WalletProviderLocalStorage extends WalletProviderEventEmitter {\n  /**\n   * @summary Gets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @returns {string} The value of the storage by the key\n   */\n  protected getStorageValue(key: ProviderStorageKey): string {\n    const value = this.getStorage()[key] || '';\n    return value;\n  }\n\n  /**\n   * @summary Sets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @param {string} value The value to set\n   * @returns {void}\n   */\n  protected setStorageValue(key: ProviderStorageKey, value: string): string {\n    const storage = this.getStorage();\n    storage[key] = value;\n    this.saveStorage(storage);\n    return value;\n  }\n\n  /**\n   * @summary Clears the storage\n   * @protected\n   * @returns {void}\n   */\n  protected clearStorage(): void {\n    this.saveStorage({\n      clientId: this.getStorage().clientId || uuid(),\n    });\n  }\n\n  /**\n   * @summary Gets the provider storage\n   * @returns {ProviderStorage} The provider storage\n   */\n  private getStorage(): ProviderStorage {\n    try {\n      return JSON.parse(\n        localStorage.getItem(LOCALSTORAGE_KEY) || '{}'\n      ) as ProviderStorage;\n    } catch (error) {\n      localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify({}));\n      throw new Error('Error parsing storage');\n    }\n  }\n\n  /**\n   * @summary Saves the provider storage\n   * @param {ProviderStorage} storage Provider storage object\n   */\n  private saveStorage(storage: ProviderStorage): void {\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(storage));\n  }\n}\n","/**\n * @summary Error class for WalletProvider\n * @since 0.1.0\n * @extends Error\n */\nexport class WalletProviderError extends Error {\n  name: string = 'GrinderyWalletProviderError';\n  code?: number;\n  data?: unknown;\n\n  constructor(message: string, code?: number, data?: unknown) {\n    super(message);\n    this.code = code;\n    this.data = data;\n  }\n}\n\nexport const WalletProviderErrors = {\n  PairingFailed: new WalletProviderError('Pairing failed', 4900),\n  Disconnected: new WalletProviderError('Disconnected', 4900),\n  UnsupportedMethod: new WalletProviderError('Unsupported Method', 4200),\n  Unauthorized: new WalletProviderError('Unauthorized', 4900),\n  NoResult: new WalletProviderError('No result', 4900),\n  NoAppId: new WalletProviderError('App ID is required', 4900),\n};\n","import { WalletProviderLocalStorage } from './WalletProviderLocalStorage';\nimport {\n  Address,\n  ChainId,\n  GrinderyRpcApiRequestResults,\n  GrinderyRpcMethodName,\n  GrinderyRpcProviderRequestMethodName,\n  ProviderMethods,\n  ProviderRequestResult,\n  RequestArguments,\n  RequestArgumentsParams,\n  RequestToken,\n} from '../types';\nimport {\n  WalletProviderError,\n  WalletProviderErrors,\n} from './WalletProviderError';\nimport {\n  GrinderyRpcMethodNames,\n  ProviderEvents,\n  ProviderStorageKeys,\n} from '../enums';\nimport { uuid } from '../utils/uuid';\n\n/**\n * @summary The base wallet provider class\n * @since 0.1.0\n * @extends WalletProviderLocalStorage\n */\nexport class WalletProvider extends WalletProviderLocalStorage {\n  constructor() {\n    super();\n\n    this.injectProvider();\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return !!this.chainId;\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return (\n      this.isConnected() &&\n      !!this.getStorageValue(ProviderStorageKeys.sessionId)\n    );\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet pairing is in progress (pending).\n   */\n  public isWalletConnectionPending(): boolean {\n    return (\n      this.isConnected() &&\n      !!this.getStorageValue(ProviderStorageKeys.pairingToken) &&\n      !this.getStorageValue(ProviderStorageKeys.sessionId)\n    );\n  }\n\n  /**\n   * @summary Gets the connected chain ID in hex format\n   * @public\n   * @returns {ChainId} The chain ID in hex format\n   */\n  public getChain(): ChainId {\n    return `0x${parseFloat(this.chainId.split(':')[1]).toString(16)}`;\n  }\n\n  /**\n   * @summary Gets the connected user's wallet address\n   * @public\n   * @returns {Address} The ethereum wallet address\n   */\n  public getAddress(): Address {\n    return this.accounts[0] || '';\n  }\n\n  /**\n   * @summary Sets the application ID\n   * @public\n   * @param {string} appId The application ID\n   * @returns {string} The application ID\n   */\n  public setAppId(appId: string): string {\n    this.appId = appId;\n    return this.appId;\n  }\n\n  /**\n   * @summary Sends a request to the provider\n   * @public\n   * @param {RequestArguments} args Request arguments\n   * @param {string} args.method The method name\n   * @param {RequestArgumentsParams} args.params The method parameters\n   * @returns {T} The result of the request\n   */\n  public async request<T>({ method, params }: RequestArguments): Promise<T> {\n    /*if (!this.appId) {\n      throw WalletProviderErrors.NoAppId;\n    }*/\n    if (!this.chainId) {\n      this.emit(ProviderEvents.disconnect, WalletProviderErrors.Disconnected);\n      throw WalletProviderErrors.Disconnected;\n    }\n    if (!this.methods[method]) {\n      throw WalletProviderErrors.UnsupportedMethod;\n    }\n\n    try {\n      if (this.methods[method]?.sessionRequired && !this.isWalletConnected()) {\n        throw WalletProviderErrors.Unauthorized;\n      }\n\n      return (await this.methods[method]?.execute(params)) as T;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API and waits for the result.\n   * @public\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  public async sendAndWaitGrinderyRpcProviderRequest<T>(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[],\n    timeout?: number\n  ): Promise<T> {\n    const request = await this.sendGrinderyRpcProviderRequest(method, params);\n    return await this.waitGrinderyRpcProviderRequest(\n      request.requestToken,\n      timeout\n    );\n  }\n\n  /**\n   * @summary The application ID.\n   * @protected\n   */\n  protected appId: string = '';\n\n  /**\n   * @summary The chain ID in CAIP-2 format; e.g. \"eip155:1\".\n   * @protected\n   */\n  protected chainId: ChainId = 'eip155:137';\n\n  /**\n   * @summary Client id\n   * @protected\n   */\n  protected clientId: string =\n    this.getStorageValue('clientId') ||\n    this.setStorageValue('clientId', uuid());\n\n  /**\n   * @summary The list of supported provider methods.\n   * @protected\n   */\n  protected methods: Partial<ProviderMethods> = {};\n\n  /**\n   * @summary The user's wallet addresses list.\n   * @protected\n   */\n  protected accounts: Address[] = [];\n\n  protected setAccounts(accounts: Address[]): Address[] {\n    if (JSON.stringify(accounts) !== JSON.stringify(this.accounts)) {\n      this.emit(ProviderEvents.accountsChanged, accounts);\n    }\n    this.accounts = accounts;\n    return this.accounts;\n  }\n\n  /**\n   * @summary Registers the provider methods.\n   * @protected\n   * @param {ProviderMethods} methods A map of supported provider methods.\n   * @returns {void}\n   */\n  protected registerProviderMethods(methods: Partial<ProviderMethods>): void {\n    this.methods = methods;\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API.\n   * @protected\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @returns {ProviderRequestResult} The request token to use in the `waitGrinderyRpcProviderRequest` method\n   */\n  protected async sendGrinderyRpcProviderRequest(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[]\n  ): Promise<ProviderRequestResult> {\n    if (!this.getStorageValue(ProviderStorageKeys.sessionId)) {\n      throw WalletProviderErrors.Unauthorized;\n    }\n\n    try {\n      return await this.sendGrinderyRpcApiRequest<\n        GrinderyRpcApiRequestResults.request\n      >(GrinderyRpcMethodNames.request, {\n        sessionId: this.getStorageValue(ProviderStorageKeys.sessionId),\n        scope: this.chainId,\n        request: {\n          method,\n          params,\n        },\n      });\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Waits for the result of the provider request.\n   * @protected\n   * @param {RequestToken} requestToken A token to identify provider request. Recieved in the results of `sendGrinderyRpcProviderRequest` method.\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  protected async waitGrinderyRpcProviderRequest<T>(\n    requestToken: RequestToken,\n    timeout?: number\n  ): Promise<T> {\n    if (!this.getStorageValue(ProviderStorageKeys.sessionId)) {\n      throw WalletProviderErrors.Unauthorized;\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<T>(\n        GrinderyRpcMethodNames.waitForRequestResult,\n        {\n          requestToken,\n          timeout,\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a request to the Grindery Walletconnect RPC API.\n   * @protected\n   * @param {GrinderyRpcMethodName} method Request method name\n   * @param {RequestArgumentsParams} params Request parameters\n   * @returns {T} The result of the request\n   */\n  protected async sendGrinderyRpcApiRequest<T>(\n    method: GrinderyRpcMethodName,\n    params?: RequestArgumentsParams\n  ): Promise<T> {\n    try {\n      const response = await fetch('https://walletconnect-api.grindery.com', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method: `gws_${method}`,\n          params: params || [],\n        }),\n      });\n      const data = await response.json();\n      if (data.error) {\n        throw new WalletProviderError(data.error.message, data.error.code);\n      }\n      if (!data.result) {\n        throw WalletProviderErrors.NoResult;\n      }\n      return data.result;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Creates a provider error from an unknown error\n   * @protected\n   * @param {unknown} error Optional. Error object.\n   * @returns {WalletProviderError} The provider error\n   */\n  protected createProviderRpcError(error?: unknown): WalletProviderError {\n    let errorResponse: WalletProviderError;\n    if (error instanceof WalletProviderError) {\n      errorResponse = new WalletProviderError(\n        error.message || 'Unknown error',\n        error.code || 4900,\n        error.data\n      );\n    } else if (error instanceof Error) {\n      errorResponse = new WalletProviderError(\n        error.message || 'Unknown error',\n        4900,\n        error\n      );\n    } else {\n      errorResponse = new WalletProviderError('Unknown error', 4900, error);\n    }\n    return errorResponse;\n  }\n\n  /**\n   * @summary Injects the provider into the window object\n   * @private\n   * @returns {void}\n   */\n  private injectProvider(): void {\n    if (!window.ethereum) {\n      window.ethereum = this;\n    } else {\n      if (\n        window.ethereum.providers &&\n        Array.isArray(window.ethereum.providers)\n      ) {\n        window.ethereum.providers.push(this);\n      } else {\n        window.ethereum.providers = [window.ethereum, this];\n      }\n    }\n  }\n}\n","import {\n  GrinderyRpcMethodNames,\n  GrinderyRpcProviderRequestMethodNames,\n  ProviderEvents,\n  ProviderStorageKeys,\n} from '../enums';\nimport {\n  GrinderyRpcApiRequestResults,\n  GrinderyRpcProviderRequestResults,\n  ProviderInterface,\n  RequestArgumentsParams,\n} from '../types';\nimport { WalletProvider } from './WalletProvider';\nimport { WalletProviderErrors } from './WalletProviderError';\n\n/**\n * @summary The Grindery Wallet Ethereum Injected Provider Class.\n * @extends WalletProvider\n * @implements ProviderInterface\n */\nexport class GrinderyWalletProvider extends WalletProvider\n  implements ProviderInterface {\n  /**\n   * @summary Indicates that the provider is a Grindery Wallet.\n   */\n  public readonly isGrinderyWallet: boolean = true;\n\n  constructor() {\n    super();\n\n    this.registerProviderMethods({\n      [GrinderyRpcProviderRequestMethodNames.eth_requestAccounts]: {\n        sessionRequired: false,\n        execute: async (\n          params?: RequestArgumentsParams\n        ): Promise<GrinderyRpcProviderRequestResults.eth_requestAccounts> => {\n          if (this.isWalletConnected()) {\n            try {\n              return await this.request<\n                GrinderyRpcProviderRequestResults.eth_accounts\n              >({\n                method: GrinderyRpcProviderRequestMethodNames.eth_accounts,\n                params: params || [],\n              });\n            } catch (error) {\n              this.setStorageValue(ProviderStorageKeys.sessionId, '');\n              // skip failed request and continue with pairing\n            }\n          }\n          if (this.isWalletConnectionPending()) {\n            try {\n              const pairResult = await this.sendGrinderyRpcApiRequest<\n                GrinderyRpcApiRequestResults.waitForPairingResult\n              >(GrinderyRpcMethodNames.waitForPairingResult, {\n                pairingToken: this.getStorageValue(\n                  ProviderStorageKeys.pairingToken\n                ),\n              });\n\n              this.clearStorage();\n              this.setStorageValue(\n                ProviderStorageKeys.sessionId,\n                pairResult.session.sessionId\n              );\n\n              if (!pairResult.session.sessionId) {\n                throw WalletProviderErrors.PairingFailed;\n              }\n\n              return await this.request<\n                GrinderyRpcProviderRequestResults.eth_accounts\n              >({\n                method: GrinderyRpcProviderRequestMethodNames.eth_accounts,\n                params: params || [],\n              });\n            } catch (error) {\n              this.clearStorage();\n              // skip failed request and continue with pairing\n            }\n          }\n          try {\n            const result = await this.sendGrinderyRpcApiRequest<\n              GrinderyRpcApiRequestResults.requestPairing\n            >(GrinderyRpcMethodNames.requestPairing, {\n              appId: this.appId,\n              clientId: this.clientId,\n            });\n\n            if (!result.pairingToken || !result.connectUrl) {\n              throw WalletProviderErrors.PairingFailed;\n            }\n\n            this.setStorageValue(\n              ProviderStorageKeys.pairingToken,\n              result.pairingToken\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.connectUrl,\n              result.connectUrl\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.connectUrlBrowser,\n              result.connectUrlBrowser\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.shortToken,\n              result.shortToken\n            );\n            this.emit(ProviderEvents.pair, {\n              shortToken: result.shortToken,\n              connectUrl: result.connectUrl,\n              connectUrlBrowser: result.connectUrlBrowser,\n            });\n            const pairResult = await this.sendGrinderyRpcApiRequest<\n              GrinderyRpcApiRequestResults.waitForPairingResult\n            >(GrinderyRpcMethodNames.waitForPairingResult, {\n              pairingToken: result.pairingToken,\n            });\n\n            this.setStorageValue(\n              ProviderStorageKeys.sessionId,\n              pairResult.session.sessionId\n            );\n\n            if (!pairResult.session.sessionId) {\n              throw WalletProviderErrors.PairingFailed;\n            }\n            this.setStorageValue(ProviderStorageKeys.pairingToken, '');\n            this.setStorageValue(ProviderStorageKeys.connectUrl, '');\n            this.setStorageValue(ProviderStorageKeys.connectUrlBrowser, '');\n            this.setStorageValue(ProviderStorageKeys.shortToken, '');\n\n            return await this.request({\n              method: GrinderyRpcProviderRequestMethodNames.eth_accounts,\n              params: params || [],\n            });\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.eth_accounts]: {\n        sessionRequired: true,\n        execute: async (\n          params?: RequestArgumentsParams\n        ): Promise<GrinderyRpcProviderRequestResults.eth_accounts> => {\n          try {\n            return this.setAccounts(\n              await this.sendAndWaitGrinderyRpcProviderRequest(\n                GrinderyRpcProviderRequestMethodNames.eth_accounts,\n                params ? (Array.isArray(params) ? params : [params]) : []\n              )\n            );\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.eth_sendTransaction]: {\n        sessionRequired: true,\n        execute: async (\n          params?: RequestArgumentsParams\n        ): Promise<GrinderyRpcProviderRequestResults.eth_sendTransaction> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest(\n            GrinderyRpcProviderRequestMethodNames.eth_sendTransaction,\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.personal_sign]: {\n        sessionRequired: true,\n        execute: async (\n          params?: Partial<RequestArgumentsParams>\n        ): Promise<GrinderyRpcProviderRequestResults.personal_sign> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest(\n            GrinderyRpcProviderRequestMethodNames.personal_sign,\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.gws_disconnect]: {\n        sessionRequired: true,\n        execute: async (): Promise<GrinderyRpcApiRequestResults.disconnect> => {\n          try {\n            const result = await this.sendGrinderyRpcApiRequest<\n              GrinderyRpcApiRequestResults.disconnect\n            >(GrinderyRpcMethodNames.disconnect, {\n              sessionToken: this.getStorageValue(ProviderStorageKeys.sessionId),\n            });\n            this.emit(\n              ProviderEvents.disconnect,\n              WalletProviderErrors.Disconnected\n            );\n            this.clearStorage();\n            this.setAccounts([]);\n            return result;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n    });\n\n    window.addEventListener('load', () => {\n      this.emit(ProviderEvents.connect, this.getChain());\n      this.restorePairing();\n      this.restoreSession();\n    });\n  }\n\n  /**\n   * @summary Restores the pairing process if pairing token is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restorePairing(): Promise<void> {\n    const pairingToken = this.getStorageValue(ProviderStorageKeys.pairingToken);\n    const sessionId = this.getStorageValue(ProviderStorageKeys.sessionId);\n    if (pairingToken && !sessionId) {\n      try {\n        const pairResult = await this.sendGrinderyRpcApiRequest<\n          GrinderyRpcApiRequestResults.waitForPairingResult\n        >(GrinderyRpcMethodNames.waitForPairingResult, {\n          pairingToken,\n        });\n\n        this.clearStorage();\n        this.setStorageValue(\n          ProviderStorageKeys.sessionId,\n          pairResult.session.sessionId\n        );\n\n        if (!pairResult.session.sessionId) {\n          throw WalletProviderErrors.PairingFailed;\n        }\n\n        const accounts = (\n          pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n        ).map(account =>\n          account.includes(':') ? account.split(':')[2] || '' : account\n        );\n        this.setAccounts(accounts);\n      } catch (error) {\n        this.setAccounts([]);\n        this.clearStorage();\n      }\n    }\n  }\n\n  /**\n   * @summary Restores the session if session Id is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restoreSession(): Promise<void> {\n    const pairingToken = this.getStorageValue(ProviderStorageKeys.pairingToken);\n    const sessionId = this.getStorageValue(ProviderStorageKeys.sessionId);\n    if (sessionId && !pairingToken) {\n      try {\n        await this.request<string[]>({\n          method: GrinderyRpcProviderRequestMethodNames.eth_requestAccounts,\n        });\n      } catch (error) {\n        this.setAccounts([]);\n        this.clearStorage();\n      }\n    }\n  }\n}\n","import {\n  GrinderyRpcProviderRequestMethodNames,\n  ProviderEvents,\n} from '../enums';\nimport {\n  GrinderyRpcApiRequestResults,\n  GrinderyWalletSDKConfig,\n  ProviderEvent,\n} from '../types';\nimport { GrinderyWalletProvider } from '../provider/GrinderyWalletProvider';\n\n/**\n * @summary The Grindery Wallet SDK class\n * @since 0.1.0\n */\nexport class GrinderyWalletSDK {\n  /**\n   * @summary The provider instance\n   * @public\n   */\n  public provider: GrinderyWalletProvider;\n\n  constructor({ appId }: GrinderyWalletSDKConfig) {\n    this.provider = this.getWeb3Provider();\n    this.setAppId(appId);\n    this.provider.on(ProviderEvents.pair, this.handlePairing);\n  }\n\n  /**\n   * @summary Checks if the provider is connected to the server\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return this.provider.isConnected();\n  }\n\n  /**\n   * @summary Checks if the provider is connected to the server and the Grindery Wallet\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return this.provider.isWalletConnected();\n  }\n\n  /**\n   * @summary Initiate connection to the Grindery Wallet\n   * @public\n   * @returns {Promise<string[]>} The array of ethereum addresses\n   * @since 0.1.0\n   */\n  public async connect(): Promise<string[]> {\n    return await this.provider.request({\n      method: GrinderyRpcProviderRequestMethodNames.eth_requestAccounts,\n    });\n  }\n\n  /**\n   * @summary Disconnects Grindery Wallet\n   * @public\n   * @returns {Promise<boolean>} True if wallet is disconnected\n   * @since 0.1.0\n   */\n  public async disconnect(): Promise<boolean> {\n    return await this.provider.request({\n      method: GrinderyRpcProviderRequestMethodNames.gws_disconnect,\n    });\n  }\n\n  /**\n   * @summary Sets the app id\n   * @public\n   * @since 0.1.0\n   * @param {string} appId The app id\n   * @returns {void}\n   */\n  public setAppId(appId: string): void {\n    this.provider.setAppId(appId);\n  }\n\n  /**\n   * @summary Sends a transaction request to the Grindery Wallet\n   * @public\n   * @since 0.1.0\n   * @param {object} params The transaction parameters\n   * @param {string} params.to The recipient address\n   * @param {string} [params.value] The amount to send in wei\n   * @param {string} [params.data] The data to send\n   * @returns {Promise<string[]>} Array with transaction hash string\n   */\n  public async sendTransaction(params: {\n    to: string;\n    value?: string;\n    data?: string;\n  }): Promise<string[]> {\n    return await this.provider.request<string[]>({\n      method: GrinderyRpcProviderRequestMethodNames.eth_sendTransaction,\n      params: [params],\n    });\n  }\n\n  /**\n   * @summary Sends a personal signature request to the Grindery Wallet\n   * @public\n   * @since 0.1.0\n   * @param {string} message The message to sign\n   * @returns {Promise<string>} Signature string\n   */\n  public async signMessage(message: string): Promise<string> {\n    return await this.provider.request<string>({\n      method: GrinderyRpcProviderRequestMethodNames.personal_sign,\n      params: [message, this.provider.getAddress()],\n    });\n  }\n\n  /**\n   * @summary Adds a listener to the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public on(event: ProviderEvent, callback: Function) {\n    this.provider.on(event, callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public removeListener(event: ProviderEvent, callback: Function) {\n    this.provider.removeListener(event, callback);\n    return this;\n  }\n\n  /**\n   * @summary Gets the Grindery Wallet ethereum provider\n   * @returns {GrinderyWalletProvider} The Grindery Wallet ethereum provider\n   */\n  private getWeb3Provider(): GrinderyWalletProvider {\n    let provider = window.ethereum?.providers?.find(\n      (provider: GrinderyWalletProvider | unknown) =>\n        provider instanceof GrinderyWalletProvider && provider.isGrinderyWallet\n    );\n    if (\n      !provider &&\n      window.ethereum instanceof GrinderyWalletProvider &&\n      window.ethereum.isGrinderyWallet\n    ) {\n      provider = window.ethereum;\n    }\n    if (!provider) {\n      provider = new GrinderyWalletProvider();\n    }\n    return provider;\n  }\n\n  /**\n   * @summary Handles the pairing request, by opening the Grindery Wallet\n   * @private\n   * @param ProviderRequestPairingResult\n   * @returns {void}\n   */\n  private handlePairing({\n    shortToken,\n    connectUrlBrowser,\n  }: GrinderyRpcApiRequestResults.requestPairing): void {\n    const WebApp = window.Telegram?.WebApp;\n    const redirectUrl = `https://walletconnect.grindery.com/connect/wc?uri=${shortToken}`;\n    if (\n      WebApp &&\n      WebApp.openTelegramLink &&\n      WebApp.platform &&\n      WebApp.platform !== 'unknown'\n    ) {\n      WebApp.openTelegramLink(connectUrlBrowser);\n      if (WebApp.close) {\n        window.Telegram.WebApp.close();\n      }\n    } else {\n      window.open(redirectUrl, '_blank');\n    }\n  }\n}\n","/**\n * @summary Get the app id from the script tag or window object\n * @returns {string} The app id\n */\nexport const getAppId = (): string => {\n  let appId: string = '';\n  const elements = document.querySelectorAll('[data-app-id]');\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n    const value = element.getAttribute('data-app-id');\n    const src = element.getAttribute('src');\n    const isGrinderySrc = src && src.includes('grindery-wallet-sdk');\n    if (value && isGrinderySrc) {\n      appId = value;\n    }\n  }\n  if (window.Grindery?.appId) {\n    appId = window.Grindery.appId;\n  }\n  return appId;\n};\n","import { GrinderyWalletSDK } from './sdk/GrinderyWalletSDK';\nimport { getAppId } from './utils/getAppId';\n\ndeclare global {\n  interface Window {\n    Telegram?: any;\n    ethereum?: any;\n    Grindery?: {\n      appId?: string;\n      WalletSDK?: GrinderyWalletSDK;\n    };\n  }\n}\n\nfunction init() {\n  if (\n    !window.Grindery?.WalletSDK ||\n    !(window.Grindery.WalletSDK instanceof GrinderyWalletSDK)\n  ) {\n    window.Grindery = {\n      ...(window.Grindery || {}),\n      WalletSDK: new GrinderyWalletSDK({\n        appId: getAppId(),\n      }),\n    };\n  }\n}\n\n// Initialize the SDK\ninit();\n"],"names":["ProviderEvents","ProviderStorageKeys","GrinderyRpcMethodNames","GrinderyRpcProviderRequestMethodNames","uuid","d","length","Math","random","toString","substr","vr","parseInt","WalletProviderEventEmitter","events","Map","_proto","prototype","on","event","callback","has","set","get","push","removeListener","callbacks","filter","cb","emit","data","Array","_len","_key","arguments","console","log","forEach","apply","LOCALSTORAGE_KEY","WalletProviderLocalStorage","_WalletProviderEventE","_inheritsLoose","getStorageValue","key","value","getStorage","setStorageValue","storage","saveStorage","clearStorage","clientId","JSON","parse","localStorage","getItem","error","setItem","stringify","Error","WalletProviderError","_Error","message","code","_this","call","_wrapNativeSuper","WalletProviderErrors","PairingFailed","Disconnected","UnsupportedMethod","Unauthorized","NoResult","NoAppId","WalletProvider","_WalletProviderLocalS","injectProvider","isConnected","chainId","isWalletConnected","sessionId","isWalletConnectionPending","pairingToken","getChain","parseFloat","split","getAddress","accounts","setAppId","appId","request","_request","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","method","params","_this$methods$method","_this$methods$method2","wrap","_callee$","_context","prev","next","disconnect","methods","sessionRequired","execute","abrupt","sent","t0","createProviderRpcError","stop","_x","sendAndWaitGrinderyRpcProviderRequest","_sendAndWaitGrinderyRpcProviderRequest","_callee2","timeout","_callee2$","_context2","sendGrinderyRpcProviderRequest","waitGrinderyRpcProviderRequest","requestToken","_x2","_x3","_x4","setAccounts","accountsChanged","registerProviderMethods","_sendGrinderyRpcProviderRequest","_callee3","_callee3$","_context3","sendGrinderyRpcApiRequest","scope","_x5","_x6","_waitGrinderyRpcProviderRequest","_callee4","_callee4$","_context4","waitForRequestResult","_x7","_x8","_sendGrinderyRpcApiRequest","_callee5","response","_callee5$","_context5","fetch","headers","body","jsonrpc","id","json","result","_x9","_x10","errorResponse","window","ethereum","providers","isArray","GrinderyWalletProvider","_WalletProvider","_this$registerProvide","eth_requestAccounts","_execute","pairResult","_pairResult","eth_accounts","waitForPairingResult","session","t1","requestPairing","connectUrl","connectUrlBrowser","shortToken","pair","t2","_execute2","eth_sendTransaction","_execute3","personal_sign","_execute4","gws_disconnect","_execute5","sessionToken","addEventListener","connect","restorePairing","restoreSession","_restorePairing","_callee6","_pairResult$session","_callee6$","_context6","namespaces","map","account","includes","_restoreSession","_callee7","_callee7$","_context7","GrinderyWalletSDK","provider","getWeb3Provider","handlePairing","_connect","_disconnect","sendTransaction","_sendTransaction","signMessage","_signMessage","_window$ethereum","find","isGrinderyWallet","_ref2","WebApp","_window$Telegram","Telegram","redirectUrl","openTelegramLink","platform","close","open","getAppId","elements","document","querySelectorAll","i","element","getAttribute","src","isGrinderySrc","_window$Grindery","Grindery","init","WalletSDK","_extends"],"mappings":"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"}