{"version":3,"file":"grindery-wallet-sdk.umd.development.js","sources":["../src/enums.ts","../src/provider/WalletProviderEventEmitter.ts","../src/provider/WalletProviderLocalStorage.ts","../src/provider/WalletProviderError.ts","../src/provider/WalletProvider.ts","../src/provider/GrinderyWalletProvider.ts","../src/sdk/GrinderyWalletSDK.ts","../src/index.ts"],"sourcesContent":["export enum ProviderEvents {\n  accountsChanged = 'accountsChanged',\n  pair = 'pair',\n  connect = 'connect',\n  disconnect = 'disconnect',\n  chainChanged = 'chainChanged',\n  message = 'message',\n}\n\nexport enum ProviderStorageKeys {\n  pairingToken = 'pairingToken',\n  sessionId = 'sessionId',\n  connectUrl = 'connectUrl',\n  connectUrlBrowser = 'connectUrlBrowser',\n  shortToken = 'shortToken',\n}\n\nexport enum GrinderyRpcMethodNames {\n  checkout_requestPairing = 'checkout_requestPairing',\n  checkout_waitForPairingResult = 'checkout_waitForPairingResult',\n  checkout_request = 'checkout_request',\n  checkout_waitForRequestResult = 'checkout_waitForRequestResult',\n}\n\nexport enum GrinderyRpcProviderRequestMethodNames {\n  eth_requestAccounts = 'eth_requestAccounts',\n  eth_accounts = 'eth_accounts',\n  personal_sign = 'personal_sign',\n  eth_sendTransaction = 'eth_sendTransaction',\n}\n","import { ProviderEvent } from '../types';\n\n/**\n * @summary A class for emitting provider events\n * @since 0.1.0\n */\nexport class WalletProviderEventEmitter {\n  /**\n   * @summary A map of events and their listeners\n   * @public\n   */\n  public events: Map<ProviderEvent, Array<Function>>;\n\n  constructor() {\n    this.events = new Map();\n  }\n\n  /**\n   * @summary Adds a listener to the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public on(event: ProviderEvent, callback: Function) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event)!.push(callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public removeListener(event: ProviderEvent, callback: Function) {\n    if (this.events.has(event)) {\n      const callbacks = this.events.get(event)!.filter(cb => cb !== callback);\n      this.events.set(event, callbacks);\n    }\n    return this;\n  }\n\n  /**\n   * @summary Emits an event\n   * @public\n   * @param {string} event Event name\n   * @param data Event data\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  protected emit(event: ProviderEvent, ...data: any[]) {\n    if (this.events.has(event)) {\n      console.log('[Grindery.WalletSDK] > Event:', event, data);\n      this.events.get(event)!.forEach(callback => {\n        callback(...data);\n      });\n    }\n    return this;\n  }\n}\n","import { ProviderStorage, ProviderStorageKey } from '../types';\nimport { WalletProviderEventEmitter } from './WalletProviderEventEmitter';\n\nconst LOCALSTORAGE_KEY = 'GrinderyWalletProvider';\n\n/**\n * @summary A local storage class for the provider\n * @since 0.1.0\n * @extends WalletProviderEventEmitter\n */\nexport class WalletProviderLocalStorage extends WalletProviderEventEmitter {\n  /**\n   * @summary Gets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @returns {string} The value of the storage by the key\n   */\n  protected getStorageValue(key: ProviderStorageKey): string {\n    const value = this.getStorage()[key] || '';\n    return value;\n  }\n\n  /**\n   * @summary Sets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @param {string} value The value to set\n   * @returns {void}\n   */\n  protected setStorageValue(key: ProviderStorageKey, value: string): void {\n    const storage = this.getStorage();\n    storage[key] = value;\n    this.saveStorage(storage);\n  }\n\n  /**\n   * @summary Clears the storage\n   * @protected\n   * @returns {void}\n   */\n  protected clearStorage(): void {\n    this.saveStorage({});\n  }\n\n  /**\n   * @summary Gets the provider storage\n   * @returns {ProviderStorage} The provider storage\n   */\n  private getStorage(): ProviderStorage {\n    try {\n      return JSON.parse(\n        localStorage.getItem(LOCALSTORAGE_KEY) || '{}'\n      ) as ProviderStorage;\n    } catch (error) {\n      localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify({}));\n      throw new Error('Error parsing storage');\n    }\n  }\n\n  /**\n   * @summary Saves the provider storage\n   * @param {ProviderStorage} storage Provider storage object\n   */\n  private saveStorage(storage: ProviderStorage): void {\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(storage));\n  }\n}\n","/**\n * @summary Error class for WalletProvider\n * @since 0.1.0\n * @extends Error\n */\nexport class WalletProviderError extends Error {\n  name: string = 'GrinderyWalletProviderError';\n  code?: number;\n  data?: unknown;\n\n  constructor(message: string, code?: number, data?: unknown) {\n    super(message);\n    this.code = code;\n    this.data = data;\n  }\n}\n","import { WalletProviderLocalStorage } from './WalletProviderLocalStorage';\nimport {\n  Address,\n  ChainId,\n  GrinderyRpcMethodName,\n  GrinderyRpcProviderRequestMethodName,\n  ProviderMethods,\n  ProviderRequestResult,\n  RequestArguments,\n  RequestArgumentsParams,\n  RequestToken,\n} from '../types';\nimport { WalletProviderError } from './WalletProviderError';\nimport {\n  GrinderyRpcMethodNames,\n  ProviderEvents,\n  ProviderStorageKeys,\n} from '../enums';\n\n/**\n * @summary The base wallet provider class\n * @since 0.1.0\n * @extends WalletProviderLocalStorage\n */\nexport class WalletProvider extends WalletProviderLocalStorage {\n  constructor() {\n    super();\n\n    this.injectProvider();\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return !!this.chainId;\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return (\n      this.isConnected() &&\n      !!this.getStorageValue(ProviderStorageKeys.sessionId)\n    );\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet pairing is in progress (pending).\n   */\n  public isWalletConnectionPending(): boolean {\n    return (\n      this.isConnected() &&\n      !!this.getStorageValue(ProviderStorageKeys.pairingToken)\n    );\n  }\n\n  /**\n   * @summary Gets the connected chain ID in hex format\n   * @public\n   * @returns {ChainId} The chain ID in hex format\n   */\n  public getChain(): ChainId {\n    return `0x${parseFloat(this.chainId.split(':')[1]).toString(16)}`;\n  }\n\n  /**\n   * @summary Gets the connected user's wallet address\n   * @public\n   * @returns {Address} The ethereum wallet address\n   */\n  public getAddress(): Address {\n    return this.accounts[0] || '';\n  }\n\n  /**\n   * @summary Sends a request to the provider\n   * @public\n   * @param {RequestArguments} args Request arguments\n   * @param {string} args.method The method name\n   * @param {RequestArgumentsParams} args.params The method parameters\n   * @returns {T} The result of the request\n   */\n  public async request<T>({ method, params }: RequestArguments): Promise<T> {\n    if (!this.chainId) {\n      this.emit(\n        ProviderEvents.disconnect,\n        new WalletProviderError('Disconnected', 4900)\n      );\n      throw new WalletProviderError('Disconnected', 4900);\n    }\n    if (!this.methods) {\n      throw new WalletProviderError('Unsupported Method', 4200);\n    }\n    if (!this.methods[method]) {\n      throw new WalletProviderError('Unsupported Method', 4200);\n    }\n\n    try {\n      if (this.methods[method].sessionRequired && !this.isWalletConnected()) {\n        throw new WalletProviderError('Unauthorized', 4900);\n      }\n\n      return (await this.methods[method].execute(params)) as T;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API and waits for the result.\n   * @public\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  public async sendAndWaitGrinderyRpcProviderRequest<T>(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[],\n    timeout?: number\n  ): Promise<T> {\n    const request = await this.sendGrinderyRpcProviderRequest(method, params);\n    return await this.waitGrinderyRpcProviderRequest(\n      request.requestToken,\n      timeout\n    );\n  }\n\n  /**\n   * @summary The application ID.\n   * @protected\n   */\n  protected appId: string = document.title || 'Grindery Wallet Provider';\n\n  /**\n   * @summary The chain ID in CAIP-2 format; e.g. \"eip155:1\".\n   * @protected\n   */\n  protected chainId: ChainId = 'eip155:137';\n\n  /**\n   * @summary The list of supported provider methods.\n   * @protected\n   */\n  protected methods?: ProviderMethods;\n\n  /**\n   * @summary The user's wallet addresses list.\n   * @protected\n   */\n  protected accounts: Address[] = [];\n\n  /**\n   * @summary Registers the provider methods.\n   * @protected\n   * @param {ProviderMethods} methods A map of supported provider methods.\n   * @returns {void}\n   */\n  protected registerProviderMethods(methods: ProviderMethods): void {\n    this.methods = methods;\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API.\n   * @protected\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @returns {ProviderRequestResult} The request token to use in the `waitGrinderyRpcProviderRequest` method\n   */\n  protected async sendGrinderyRpcProviderRequest(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[]\n  ): Promise<ProviderRequestResult> {\n    if (!this.getStorageValue(ProviderStorageKeys.sessionId)) {\n      throw new WalletProviderError('Unauthorized', 4900);\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<ProviderRequestResult>(\n        GrinderyRpcMethodNames.checkout_request,\n        {\n          sessionId: this.getStorageValue(ProviderStorageKeys.sessionId),\n          scope: this.chainId,\n          request: {\n            method,\n            params,\n          },\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Waits for the result of the provider request.\n   * @protected\n   * @param {RequestToken} requestToken A token to identify provider request. Recieved in the results of `sendGrinderyRpcProviderRequest` method.\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  protected async waitGrinderyRpcProviderRequest<T>(\n    requestToken: RequestToken,\n    timeout?: number\n  ): Promise<T> {\n    if (!this.getStorageValue(ProviderStorageKeys.sessionId)) {\n      throw new WalletProviderError('Unauthorized', 4900);\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<T>(\n        GrinderyRpcMethodNames.checkout_waitForRequestResult,\n        {\n          requestToken,\n          timeout,\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a request to the Grindery Walletconnect RPC API.\n   * @protected\n   * @param {GrinderyRpcMethodName} method Request method name\n   * @param {RequestArgumentsParams} params Request parameters\n   * @returns {T} The result of the request\n   */\n  protected async sendGrinderyRpcApiRequest<T>(\n    method: GrinderyRpcMethodName,\n    params?: RequestArgumentsParams\n  ): Promise<T> {\n    try {\n      const response = await fetch('https://walletconnect-api.grindery.com', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method,\n          params: params || [],\n        }),\n      });\n      const data = await response.json();\n      if (data.error) {\n        throw new WalletProviderError(data.error.message, data.error.code);\n      }\n      if (!data.result) {\n        throw new WalletProviderError('No result', 4900);\n      }\n      return data.result;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Creates a provider error from an unknown error\n   * @protected\n   * @param {unknown} error Optional. Error object.\n   * @returns {WalletProviderError} The provider error\n   */\n  protected createProviderRpcError(error?: unknown): WalletProviderError {\n    let errorResponse: WalletProviderError;\n    if (error instanceof WalletProviderError) {\n      errorResponse = new WalletProviderError(error.message || 'Unknown error');\n      errorResponse.code = error.code || 4900;\n      errorResponse.data = error.data;\n    } else if (error instanceof Error) {\n      errorResponse = new WalletProviderError(error.message || 'Unknown error');\n      errorResponse.code = 4900;\n    } else {\n      errorResponse = new WalletProviderError('Unknown error');\n      errorResponse.code = 4900;\n    }\n    return errorResponse;\n  }\n\n  /**\n   * @summary Injects the provider into the window object\n   * @private\n   * @returns {void}\n   */\n  private injectProvider(): void {\n    if (!window.ethereum) {\n      window.ethereum = this;\n    } else {\n      if (\n        window.ethereum.providers &&\n        Array.isArray(window.ethereum.providers)\n      ) {\n        window.ethereum.providers.push(this);\n      } else {\n        window.ethereum.providers = [window.ethereum, this];\n      }\n    }\n  }\n}\n","import {\n  GrinderyRpcMethodNames,\n  GrinderyRpcProviderRequestMethodNames,\n  ProviderStorageKeys,\n} from '../enums';\nimport {\n  ProviderInterface,\n  ProviderPairingResult,\n  ProviderRequestPairingResult,\n  RequestArgumentsParams,\n} from '../types';\nimport { WalletProvider } from './WalletProvider';\nimport { WalletProviderError } from './WalletProviderError';\n\n/**\n * @summary The Grindery Wallet Ethereum Injected Provider Class.\n * @extends WalletProvider\n * @implements ProviderInterface\n */\nexport class GrinderyWalletProvider extends WalletProvider\n  implements ProviderInterface {\n  /**\n   * @summary Indicates that the provider is a Grindery Wallet.\n   */\n  public readonly isGrinderyWallet: boolean = true;\n\n  constructor() {\n    super();\n\n    this.registerProviderMethods({\n      eth_requestAccounts: {\n        sessionRequired: false,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          if (this.isWalletConnected()) {\n            try {\n              const accounts = await this.request<string[]>({\n                method: GrinderyRpcProviderRequestMethodNames.eth_accounts,\n                params: params || [],\n              });\n              this.accounts = accounts;\n              this.emit('accountsChanged', { accounts });\n              return accounts;\n            } catch (error) {\n              this.setStorageValue(ProviderStorageKeys.sessionId, '');\n              // skip failed request and continue with pairing\n            }\n          }\n          if (this.isWalletConnectionPending()) {\n            try {\n              const pairResult = await this.sendGrinderyRpcApiRequest<\n                ProviderPairingResult\n              >(GrinderyRpcMethodNames.checkout_waitForPairingResult, {\n                pairingToken: this.getStorageValue(\n                  ProviderStorageKeys.pairingToken\n                ),\n              });\n\n              this.clearStorage();\n              this.setStorageValue(\n                ProviderStorageKeys.sessionId,\n                pairResult.session.sessionId\n              );\n\n              if (!pairResult.session.sessionId) {\n                throw new WalletProviderError('Pairing failed', 4900);\n              }\n\n              const accounts = (\n                pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n              ).map(account =>\n                account.includes(':') ? account.split(':')[2] || '' : account\n              );\n              this.accounts = accounts;\n              this.emit('accountsChanged', { accounts });\n              return [];\n            } catch (error) {\n              this.clearStorage();\n              // skip failed request and continue with pairing\n            }\n          }\n          try {\n            const result = await this.sendGrinderyRpcApiRequest<\n              ProviderRequestPairingResult\n            >(GrinderyRpcMethodNames.checkout_requestPairing, {\n              appId: this.appId,\n            });\n\n            if (!result.pairingToken || !result.connectUrl) {\n              throw new WalletProviderError('Pairing failed', 4900);\n            }\n\n            this.setStorageValue(\n              ProviderStorageKeys.pairingToken,\n              result.pairingToken\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.connectUrl,\n              result.connectUrl\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.connectUrlBrowser,\n              result.connectUrlBrowser\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.shortToken,\n              result.shortToken\n            );\n            this.emit('pair', {\n              shortToken: result.shortToken,\n              connectUrl: result.connectUrl,\n              connectUrlBrowser: result.connectUrlBrowser,\n            });\n            const pairResult = await this.sendGrinderyRpcApiRequest<\n              ProviderPairingResult\n            >(GrinderyRpcMethodNames.checkout_waitForPairingResult, {\n              pairingToken: result.pairingToken,\n            });\n\n            this.setStorageValue(\n              ProviderStorageKeys.sessionId,\n              pairResult.session.sessionId\n            );\n\n            if (!pairResult.session.sessionId) {\n              throw new WalletProviderError('Pairing failed', 4900);\n            }\n            this.setStorageValue(ProviderStorageKeys.pairingToken, '');\n            this.setStorageValue(ProviderStorageKeys.connectUrl, '');\n            this.setStorageValue(ProviderStorageKeys.connectUrlBrowser, '');\n            this.setStorageValue(ProviderStorageKeys.shortToken, '');\n            const accounts = (\n              pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n            ).map(account =>\n              account.includes(':') ? account.split(':')[2] || '' : account\n            );\n            this.accounts = accounts;\n            this.emit('accountsChanged', { accounts });\n            return accounts;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.eth_accounts]: {\n        sessionRequired: true,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          try {\n            const accounts = await this.sendAndWaitGrinderyRpcProviderRequest<\n              string[]\n            >(\n              GrinderyRpcProviderRequestMethodNames.eth_accounts,\n              params ? (Array.isArray(params) ? params : [params]) : []\n            );\n            this.accounts = accounts;\n            this.emit('accountsChanged', { accounts });\n            return accounts;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.eth_sendTransaction]: {\n        sessionRequired: true,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest<string[]>(\n            GrinderyRpcProviderRequestMethodNames.eth_sendTransaction,\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.personal_sign]: {\n        sessionRequired: true,\n        execute: async (\n          params?: Partial<RequestArgumentsParams>\n        ): Promise<string> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest(\n            GrinderyRpcProviderRequestMethodNames.personal_sign,\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n    });\n\n    window.addEventListener('load', () => {\n      this.emit('connect', { chainId: this.getChain() });\n      this.restorePairing();\n      this.restoreSession();\n    });\n  }\n\n  /**\n   * @summary Restores the pairing process if pairing token is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restorePairing(): Promise<void> {\n    const pairingToken = this.getStorageValue(ProviderStorageKeys.pairingToken);\n    const sessionId = this.getStorageValue(ProviderStorageKeys.sessionId);\n    if (pairingToken && !sessionId) {\n      try {\n        const pairResult = await this.sendGrinderyRpcApiRequest<\n          ProviderPairingResult\n        >(GrinderyRpcMethodNames.checkout_waitForPairingResult, {\n          pairingToken,\n        });\n\n        this.clearStorage();\n        this.setStorageValue(\n          ProviderStorageKeys.sessionId,\n          pairResult.session.sessionId\n        );\n\n        if (!pairResult.session.sessionId) {\n          throw new WalletProviderError('Pairing failed', 4900);\n        }\n\n        const accounts = (\n          pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n        ).map(account =>\n          account.includes(':') ? account.split(':')[2] || '' : account\n        );\n        this.accounts = accounts;\n        this.emit('accountsChanged', { accounts });\n      } catch (error) {\n        this.accounts = [];\n        this.clearStorage();\n      }\n    }\n  }\n\n  /**\n   * @summary Restores the session if session Id is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restoreSession(): Promise<void> {\n    const pairingToken = this.getStorageValue(ProviderStorageKeys.pairingToken);\n    const sessionId = this.getStorageValue(ProviderStorageKeys.sessionId);\n    if (sessionId && !pairingToken) {\n      try {\n        await this.request<string[]>({\n          method: GrinderyRpcProviderRequestMethodNames.eth_requestAccounts,\n        });\n      } catch (error) {\n        this.accounts = [];\n        this.clearStorage();\n      }\n    }\n  }\n}\n","import {\n  GrinderyRpcProviderRequestMethodNames,\n  ProviderEvents,\n} from '../enums';\nimport { ProviderEvent, ProviderRequestPairingResult } from '../types';\nimport { GrinderyWalletProvider } from '../provider/GrinderyWalletProvider';\n\n/**\n * @summary The Grindery Wallet SDK class\n * @since 0.1.0\n */\nexport class GrinderyWalletSDK {\n  /**\n   * @summary The provider instance\n   * @public\n   */\n  public provider: GrinderyWalletProvider;\n\n  constructor() {\n    this.provider = this.getWeb3Provider();\n    this.provider.on(ProviderEvents.pair, this.handlePairing);\n  }\n\n  /**\n   * @summary Checks if the provider is connected to the server\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return this.provider.isConnected();\n  }\n\n  /**\n   * @summary Checks if the provider is connected to the server and the Grindery Wallet\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return this.provider.isWalletConnected();\n  }\n\n  /**\n   * @summary Initiate connection to the Grindery Wallet\n   * @public\n   * @returns {Promise<string[]>} The array of ethereum addresses\n   * @since 0.1.0\n   */\n  public async connect(): Promise<string[]> {\n    return await this.provider.request({\n      method: GrinderyRpcProviderRequestMethodNames.eth_requestAccounts,\n    });\n  }\n\n  /**\n   * @summary Sends a transaction request to the Grindery Wallet\n   * @public\n   * @since 0.1.0\n   * @param {object} params The transaction parameters\n   * @param {string} params.to The recipient address\n   * @param {string} [params.value] The amount to send in wei\n   * @param {string} [params.data] The data to send\n   * @returns {Promise<string[]>} Array with transaction hash string\n   */\n  public async sendTransaction(params: {\n    to: string;\n    value?: string;\n    data?: string;\n  }): Promise<string[]> {\n    return await this.provider.request<string[]>({\n      method: GrinderyRpcProviderRequestMethodNames.eth_sendTransaction,\n      params: [params],\n    });\n  }\n\n  /**\n   * @summary Sends a personal signature request to the Grindery Wallet\n   * @public\n   * @since 0.1.0\n   * @param {string} message The message to sign\n   * @returns {Promise<string>} Signature string\n   */\n  public async signMessage(message: string): Promise<string> {\n    return await this.provider.request<string>({\n      method: GrinderyRpcProviderRequestMethodNames.personal_sign,\n      params: [message, this.provider.getAddress()],\n    });\n  }\n\n  /**\n   * @summary Adds a listener to the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public on(event: ProviderEvent, callback: Function) {\n    this.provider.on(event, callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public removeListener(event: ProviderEvent, callback: Function) {\n    this.provider.removeListener(event, callback);\n    return this;\n  }\n\n  /**\n   * @summary Gets the Grindery Wallet ethereum provider\n   * @returns {GrinderyWalletProvider} The Grindery Wallet ethereum provider\n   */\n  private getWeb3Provider(): GrinderyWalletProvider {\n    let provider = window.ethereum?.providers?.find(\n      (provider: GrinderyWalletProvider | unknown) =>\n        provider instanceof GrinderyWalletProvider && provider.isGrinderyWallet\n    );\n    if (\n      !provider &&\n      window.ethereum instanceof GrinderyWalletProvider &&\n      window.ethereum.isGrinderyWallet\n    ) {\n      provider = window.ethereum;\n    }\n    if (!provider) {\n      provider = new GrinderyWalletProvider();\n    }\n    return provider;\n  }\n\n  /**\n   * @summary Handles the pairing request, by opening the Grindery Wallet\n   * @private\n   * @param ProviderRequestPairingResult\n   * @returns {void}\n   */\n  private handlePairing({\n    shortToken,\n    connectUrlBrowser,\n  }: ProviderRequestPairingResult): void {\n    const WebApp = window.Telegram?.WebApp;\n    const redirectUrl = `https://walletconnect.grindery.com/connect/wc?uri=${shortToken}`;\n    if (\n      WebApp &&\n      WebApp.openTelegramLink &&\n      WebApp.platform &&\n      WebApp.platform !== 'unknown'\n    ) {\n      WebApp.openTelegramLink(connectUrlBrowser);\n      if (WebApp.close) {\n        window.Telegram.WebApp.close();\n      }\n    } else {\n      window.open(redirectUrl, '_blank');\n    }\n  }\n}\n","import { GrinderyWalletSDK } from './sdk/GrinderyWalletSDK';\n\ndeclare global {\n  interface Window {\n    Telegram?: any;\n    ethereum?: any;\n    Grindery?: {\n      WalletSDK?: GrinderyWalletSDK;\n    };\n  }\n}\n\nfunction init() {\n  if (\n    !window.Grindery?.WalletSDK ||\n    !(window.Grindery.WalletSDK instanceof GrinderyWalletSDK)\n  ) {\n    window.Grindery = {\n      ...(window.Grindery || {}),\n      WalletSDK: new GrinderyWalletSDK(),\n    };\n  }\n}\n\n// Initialize the SDK when the page is loaded\ninit();\n"],"names":["ProviderEvents","ProviderStorageKeys","GrinderyRpcMethodNames","GrinderyRpcProviderRequestMethodNames","WalletProviderEventEmitter","events","Map","_proto","prototype","on","event","callback","has","set","get","push","removeListener","callbacks","filter","cb","emit","data","Array","_len","_key","arguments","console","log","forEach","apply","LOCALSTORAGE_KEY","WalletProviderLocalStorage","_WalletProviderEventE","_inheritsLoose","getStorageValue","key","value","getStorage","setStorageValue","storage","saveStorage","clearStorage","JSON","parse","localStorage","getItem","error","setItem","stringify","Error","WalletProviderError","_Error","message","code","_this","call","_wrapNativeSuper","WalletProvider","_WalletProviderLocalS","document","title","injectProvider","isConnected","chainId","isWalletConnected","sessionId","isWalletConnectionPending","pairingToken","getChain","parseFloat","split","toString","getAddress","accounts","request","_request","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","method","params","wrap","_callee$","_context","prev","next","disconnect","methods","sessionRequired","execute","abrupt","sent","t0","createProviderRpcError","stop","_x","sendAndWaitGrinderyRpcProviderRequest","_sendAndWaitGrinderyRpcProviderRequest","_callee2","timeout","_callee2$","_context2","sendGrinderyRpcProviderRequest","waitGrinderyRpcProviderRequest","requestToken","_x2","_x3","_x4","registerProviderMethods","_sendGrinderyRpcProviderRequest","_callee3","_callee3$","_context3","sendGrinderyRpcApiRequest","checkout_request","scope","_x5","_x6","_waitGrinderyRpcProviderRequest","_callee4","_callee4$","_context4","checkout_waitForRequestResult","_x7","_x8","_sendGrinderyRpcApiRequest","_callee5","response","_callee5$","_context5","fetch","headers","body","jsonrpc","id","json","result","_x9","_x10","errorResponse","window","ethereum","providers","isArray","GrinderyWalletProvider","_WalletProvider","_this$registerProvide","eth_requestAccounts","_execute","_pairResult$session","pairResult","_accounts","_pairResult$session2","_pairResult","_accounts2","eth_accounts","checkout_waitForPairingResult","session","namespaces","map","account","includes","t1","checkout_requestPairing","appId","connectUrl","connectUrlBrowser","shortToken","t2","_execute2","eth_sendTransaction","_execute3","personal_sign","_execute4","addEventListener","restorePairing","restoreSession","_restorePairing","_pairResult$session3","_restoreSession","_callee6","_callee6$","_context6","GrinderyWalletSDK","provider","getWeb3Provider","pair","handlePairing","connect","_connect","sendTransaction","_sendTransaction","signMessage","_signMessage","_window$ethereum","find","isGrinderyWallet","WebApp","_window$Telegram","Telegram","redirectUrl","openTelegramLink","platform","close","open","init","_window$Grindery","Grindery","WalletSDK","_extends"],"mappings":"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"}