{"version":3,"file":"grindery-wallet-sdk.esm.js","sources":["../src/provider/ProviderError.ts","../src/provider/ProviderEventEmitter.ts","../src/provider/ProviderLocalStorage.ts","../src/provider/ProviderBase.ts","../src/provider/GrinderyWalletProvider.ts","../src/sdk/GrinderyWalletSDK.ts","../src/index.ts"],"sourcesContent":["/**\n * @summary Error class for GrinderyWalletProvider\n * @since 0.1.0\n * @extends Error\n */\nexport class ProviderError extends Error {\n  name: string = 'GrinderyWalletProviderError';\n  code?: number;\n  data?: unknown;\n\n  constructor(message: string, code?: number, data?: unknown) {\n    super(message);\n    this.code = code;\n    this.data = data;\n  }\n}\n","/**\n * @summary A class for emitting provider events\n * @since 0.1.0\n */\nexport class ProviderEventEmitter {\n  /**\n   * @summary A map of events and their listeners\n   */\n  private events: Map<string, Array<Function>>;\n\n  constructor() {\n    this.events = new Map();\n  }\n\n  /**\n   * @summary Adds a listener to the provider event\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {ProviderEventEmitter} The instance of the class itself\n   */\n  on(event: string, callback: Function) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event)!.push(callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the provider event\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {ProviderEventEmitter} The instance of the class itself\n   */\n  removeListener(event: string, callback: Function) {\n    if (this.events.has(event)) {\n      const callbacks = this.events.get(event)!.filter(cb => cb !== callback);\n      this.events.set(event, callbacks);\n    }\n    return this;\n  }\n\n  /**\n   * @summary Emits an event\n   * @param {string} event Event name\n   * @param data Event data\n   * @returns {ProviderEventEmitter} The instance of the class itself\n   */\n  protected emit(event: string, ...data: any[]) {\n    if (this.events.has(event)) {\n      console.log('[GrinderyWalletProvider] > Event:', event, data);\n      this.events.get(event)!.forEach(callback => {\n        callback(...data);\n      });\n    }\n    return this;\n  }\n}\n","import { ProviderEventEmitter } from './ProviderEventEmitter';\nimport { ProviderStorage, ProviderStorageKey } from './types';\n\nconst LOCALSTORAGE_KEY = 'GrinderyWalletProvider';\n\n/**\n * @summary A local storage class for the provider\n * @since 0.1.0\n * @extends ProviderEventEmitter\n */\nexport class ProviderLocalStorage extends ProviderEventEmitter {\n  /**\n   * @summary Gets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @returns {string} The value of the storage by the key\n   */\n  protected getStorageValue(key: ProviderStorageKey): string {\n    const value = this.getStorage()[key] || '';\n    return value;\n  }\n\n  /**\n   * @summary Sets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @param {string} value The value to set\n   * @returns {void}\n   */\n  protected setStorageValue(key: ProviderStorageKey, value: string): void {\n    const storage = this.getStorage();\n    storage[key] = value;\n    this.saveStorage(storage);\n  }\n\n  /**\n   * @summary Clears the storage\n   * @protected\n   * @returns {void}\n   */\n  protected clearStorage(): void {\n    this.saveStorage({});\n  }\n\n  /**\n   * @summary Gets the provider storage\n   * @returns {ProviderStorage} The provider storage\n   */\n  private getStorage(): ProviderStorage {\n    try {\n      return JSON.parse(\n        localStorage.getItem(LOCALSTORAGE_KEY) || '{}'\n      ) as ProviderStorage;\n    } catch (error) {\n      localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify({}));\n      throw new Error('Error parsing storage');\n    }\n  }\n\n  /**\n   * @summary Saves the provider storage\n   * @param {ProviderStorage} storage Provider storage object\n   */\n  private saveStorage(storage: ProviderStorage): void {\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(storage));\n  }\n}\n","import { ProviderError } from './ProviderError';\nimport { ProviderLocalStorage } from './ProviderLocalStorage';\nimport {\n  GrinderyRpcMethodName,\n  GrinderyRpcProviderRequestMethodName,\n  ProviderMethods,\n  ProviderRequestResult,\n  RequestArguments,\n  RequestArgumentsParams,\n} from './types';\n\n/**\n * @summary The provider base class\n * @since 0.1.0\n * @extends ProviderLocalStorage\n */\nexport class ProviderBase extends ProviderLocalStorage {\n  constructor() {\n    super();\n\n    this.injectProvider();\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return !!this.chainId;\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return this.isConnected() && !!this.getStorageValue('sessionId');\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet pairing is in progress (pending).\n   */\n  public isWalletConnectionPending(): boolean {\n    return this.isConnected() && !!this.getStorageValue('pairingToken');\n  }\n\n  /**\n   * @summary Gets the connected chain ID in hex format\n   * @public\n   * @returns {string} The chain ID in hex format\n   */\n  public getChain(): string {\n    return `0x${parseFloat(this.chainId.split(':')[1]).toString(16)}`;\n  }\n\n  /**\n   * @summary Gets the connected user's wallet address\n   * @public\n   * @returns {string} The ethereum wallet address\n   */\n  public getAddress(): string {\n    return this.accounts[0] || '';\n  }\n\n  /**\n   * @summary Sends a request to the provider\n   * @public\n   * @param {RequestArguments} args Request arguments\n   * @param {string} args.method The method name\n   * @param {RequestArgumentsParams} args.params The method parameters\n   * @returns {T} The result of the request\n   */\n  public async request<T>({ method, params }: RequestArguments): Promise<T> {\n    if (!this.chainId) {\n      this.emit('disconnect', new ProviderError('Disconnected', 4900));\n      throw new ProviderError('Disconnected', 4900);\n    }\n    if (!this.methods[method]) {\n      throw new ProviderError('Unsupported Method', 4200);\n    }\n\n    try {\n      if (this.methods[method].sessionRequired && !this.isWalletConnected()) {\n        throw new ProviderError('Unauthorized', 4900);\n      }\n\n      return (await this.methods[method].execute(params)) as T;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API and waits for the result.\n   * @public\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  public async sendAndWaitGrinderyRpcProviderRequest<T>(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[],\n    timeout?: number\n  ): Promise<T> {\n    const request = await this.sendGrinderyRpcProviderRequest(method, params);\n    return await this.waitGrinderyRpcProviderRequest(\n      request.requestToken,\n      timeout\n    );\n  }\n\n  /**\n   * @summary The application ID.\n   * @protected\n   */\n  protected appId: string = document.title || 'Grindery Wallet Provider';\n\n  /**\n   * @summary The chain ID in CAIP-2 format; e.g. \"eip155:1\".\n   * @protected\n   */\n  protected chainId: string = 'eip155:137';\n\n  /**\n   * @summary The list of supported provider methods.\n   * @protected\n   */\n  protected methods: ProviderMethods = {};\n\n  /**\n   * @summary The user's wallet addresses list.\n   * @protected\n   */\n  protected accounts: string[] = [];\n\n  /**\n   * @summary Registers the provider methods.\n   * @protected\n   * @param {ProviderMethods} methods A map of supported provider methods.\n   * @returns {void}\n   */\n  protected registerProviderMethods(methods: ProviderMethods): void {\n    this.methods = methods;\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API.\n   * @protected\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @returns {ProviderRequestResult} The request token to use in the `waitGrinderyRpcProviderRequest` method\n   */\n  protected async sendGrinderyRpcProviderRequest(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[]\n  ): Promise<ProviderRequestResult> {\n    if (!this.getStorageValue('sessionId')) {\n      throw new ProviderError('Unauthorized', 4900);\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<ProviderRequestResult>(\n        'checkout_request',\n        {\n          sessionId: this.getStorageValue('sessionId'),\n          scope: this.chainId,\n          request: {\n            method,\n            params,\n          },\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Waits for the result of the provider request.\n   * @protected\n   * @param {string} requestToken A token to identify provider request. Recieved in the results of `sendGrinderyRpcProviderRequest` method.\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  protected async waitGrinderyRpcProviderRequest<T>(\n    requestToken: string,\n    timeout?: number\n  ): Promise<T> {\n    if (!this.getStorageValue('sessionId')) {\n      throw new ProviderError('Unauthorized', 4900);\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<T>(\n        'checkout_waitForRequestResult',\n        {\n          requestToken,\n          timeout,\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a request to the Grindery Walletconnect RPC API.\n   * @protected\n   * @param {GrinderyRpcMethodName} method Request method name\n   * @param {RequestArgumentsParams} params Request parameters\n   * @returns {T} The result of the request\n   */\n  protected async sendGrinderyRpcApiRequest<T>(\n    method: GrinderyRpcMethodName,\n    params?: RequestArgumentsParams\n  ): Promise<T> {\n    try {\n      const response = await fetch('https://walletconnect-api.grindery.com', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method,\n          params: params || [],\n        }),\n      });\n      const data = await response.json();\n      if (data.error) {\n        throw new ProviderError(data.error.message, data.error.code);\n      }\n      if (!data.result) {\n        throw new ProviderError('No result', 4900);\n      }\n      return data.result;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Creates a provider error from an unknown error\n   * @protected\n   * @param {unknown} error Optional. Error object.\n   * @returns {ProviderError} The provider error\n   */\n  protected createProviderRpcError(error?: unknown): ProviderError {\n    let errorResponse: ProviderError;\n    if (error instanceof ProviderError) {\n      errorResponse = new ProviderError(error.message || 'Unknown error');\n      errorResponse.code = error.code || 4900;\n      errorResponse.data = error.data;\n    } else if (error instanceof Error) {\n      errorResponse = new ProviderError(error.message || 'Unknown error');\n      errorResponse.code = 4900;\n    } else {\n      errorResponse = new ProviderError('Unknown error');\n      errorResponse.code = 4900;\n    }\n    return errorResponse;\n  }\n\n  /**\n   * @summary Injects the provider into the window object\n   * @private\n   * @returns {void}\n   */\n  private injectProvider(): void {\n    if (!window.ethereum) {\n      window.ethereum = this;\n    } else {\n      if (\n        window.ethereum.providers &&\n        Array.isArray(window.ethereum.providers)\n      ) {\n        window.ethereum.providers.push(this);\n      } else {\n        window.ethereum.providers = [window.ethereum, this];\n      }\n    }\n  }\n}\n","import { ProviderBase } from './ProviderBase';\nimport { ProviderError } from './ProviderError';\nimport {\n  ProviderInterface,\n  ProviderPairingResult,\n  ProviderRequestPairingResult,\n  RequestArgumentsParams,\n} from './types';\n\n/**\n * @summary The Grindery Wallet Ethereum Injected Provider Class.\n * @extends ProviderBase\n * @implements ProviderInterface\n */\nexport class GrinderyWalletProvider extends ProviderBase\n  implements ProviderInterface {\n  /**\n   * @summary Indicates that the provider is a Grindery Wallet.\n   */\n  public readonly isGrinderyWallet: boolean = true;\n\n  constructor() {\n    super();\n\n    this.registerProviderMethods({\n      eth_requestAccounts: {\n        sessionRequired: false,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          if (this.isWalletConnected()) {\n            try {\n              const accounts = await this.request<string[]>({\n                method: 'eth_accounts',\n                params: params || [],\n              });\n              this.accounts = accounts;\n              this.emit('accountsChanged', { accounts });\n              return accounts;\n            } catch (error) {\n              this.setStorageValue('sessionId', '');\n              // skip failed request and continue with pairing\n            }\n          }\n          if (this.isWalletConnectionPending()) {\n            try {\n              this.emit('restorePairing', {\n                connectUrl: this.getStorageValue('connectUrl'),\n                connectUrlBrowser: this.getStorageValue('connectUrlBrowser'),\n              });\n\n              const pairResult = await this.sendGrinderyRpcApiRequest<\n                ProviderPairingResult\n              >('checkout_waitForPairingResult', {\n                pairingToken: this.getStorageValue('pairingToken'),\n              });\n\n              this.clearStorage();\n              this.setStorageValue('sessionId', pairResult.session.sessionId);\n\n              if (!pairResult.session.sessionId) {\n                throw new ProviderError('Pairing failed', 4900);\n              }\n\n              const accounts = (\n                pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n              ).map(account =>\n                account.includes(':') ? account.split(':')[2] || '' : account\n              );\n              this.accounts = accounts;\n              this.emit('accountsChanged', { accounts });\n              return [];\n            } catch (error) {\n              this.clearStorage();\n              // skip failed request and continue with pairing\n            }\n          }\n          try {\n            const result = await this.sendGrinderyRpcApiRequest<\n              ProviderRequestPairingResult\n            >('checkout_requestPairing', { appId: this.appId });\n\n            if (!result.pairingToken || !result.connectUrl) {\n              throw new ProviderError('Pairing failed', 4900);\n            }\n\n            this.setStorageValue('pairingToken', result.pairingToken);\n            this.setStorageValue('connectUrl', result.connectUrl);\n            this.setStorageValue('connectUrlBrowser', result.connectUrlBrowser);\n            this.emit('pairing', {\n              connectUrl: result.connectUrl,\n              connectUrlBrowser: result.connectUrlBrowser,\n            });\n            const pairResult = await this.sendGrinderyRpcApiRequest<\n              ProviderPairingResult\n            >('checkout_waitForPairingResult', {\n              pairingToken: result.pairingToken,\n            });\n\n            this.setStorageValue('sessionId', pairResult.session.sessionId);\n\n            if (!pairResult.session.sessionId) {\n              throw new ProviderError('Pairing failed', 4900);\n            }\n            this.setStorageValue('pairingToken', '');\n            this.setStorageValue('connectUrl', '');\n            this.setStorageValue('connectUrlBrowser', '');\n            const accounts = (\n              pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n            ).map(account =>\n              account.includes(':') ? account.split(':')[2] || '' : account\n            );\n            this.accounts = accounts;\n            this.emit('accountsChanged', { accounts });\n            return accounts;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      eth_accounts: {\n        sessionRequired: true,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          try {\n            const accounts = await this.sendAndWaitGrinderyRpcProviderRequest<\n              string[]\n            >(\n              'eth_accounts',\n              params ? (Array.isArray(params) ? params : [params]) : []\n            );\n            this.accounts = accounts;\n            this.emit('accountsChanged', { accounts });\n            return accounts;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      eth_sendTransaction: {\n        sessionRequired: true,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest<string[]>(\n            'eth_sendTransaction',\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n      personal_sign: {\n        sessionRequired: true,\n        execute: async (\n          params?: Partial<RequestArgumentsParams>\n        ): Promise<string> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest(\n            'personal_sign',\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n    });\n\n    window.addEventListener('load', () => {\n      this.emit('connect', { chainId: this.getChain() });\n      this.restorePairing();\n      this.restoreSession();\n    });\n  }\n\n  /**\n   * @summary Restores the pairing process if pairing token is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restorePairing(): Promise<void> {\n    const pairingToken = this.getStorageValue('pairingToken');\n    const sessionId = this.getStorageValue('sessionId');\n    if (pairingToken && !sessionId) {\n      try {\n        this.emit('restorePairing', {\n          connectUrl: this.getStorageValue('connectUrl'),\n          connectUrlBrowser: this.getStorageValue('connectUrlBrowser'),\n        });\n\n        const pairResult = await this.sendGrinderyRpcApiRequest<\n          ProviderPairingResult\n        >('checkout_waitForPairingResult', {\n          pairingToken,\n        });\n\n        this.clearStorage();\n        this.setStorageValue('sessionId', pairResult.session.sessionId);\n\n        if (!pairResult.session.sessionId) {\n          throw new ProviderError('Pairing failed', 4900);\n        }\n\n        const accounts = (\n          pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n        ).map(account =>\n          account.includes(':') ? account.split(':')[2] || '' : account\n        );\n        this.accounts = accounts;\n        this.emit('accountsChanged', { accounts });\n      } catch (error) {\n        this.accounts = [];\n        this.clearStorage();\n      }\n    }\n  }\n\n  /**\n   * @summary Restores the session if session Id is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restoreSession(): Promise<void> {\n    const pairingToken = this.getStorageValue('pairingToken');\n    const sessionId = this.getStorageValue('sessionId');\n    if (sessionId && !pairingToken) {\n      try {\n        await this.request<string[]>({\n          method: 'eth_requestAccounts',\n        });\n      } catch (error) {\n        this.accounts = [];\n        this.clearStorage();\n      }\n    }\n  }\n}\n","import { GrinderyWalletProvider } from '../provider/GrinderyWalletProvider';\n\n/**\n * @summary The Grindery Wallet SDK class\n * @since 0.1.0\n */\nexport class GrinderyWalletSDK {\n  /**\n   * @summary The provider instance\n   * @public\n   */\n  public provider: GrinderyWalletProvider;\n\n  constructor() {\n    this.provider = this.getWeb3Provider();\n  }\n\n  /**\n   * @summary Gets the Grindery Wallet ethereum provider\n   * @returns {GrinderyWalletProvider} The Grindery Wallet ethereum provider\n   */\n  private getWeb3Provider(): GrinderyWalletProvider {\n    let provider = window.ethereum?.providers?.find(\n      (provider: GrinderyWalletProvider | unknown) =>\n        provider instanceof GrinderyWalletProvider && provider.isGrinderyWallet\n    );\n    if (\n      !provider &&\n      window.ethereum instanceof GrinderyWalletProvider &&\n      window.ethereum.isGrinderyWallet\n    ) {\n      provider = window.ethereum;\n    }\n    if (!provider) {\n      provider = new GrinderyWalletProvider();\n    }\n    return provider;\n  }\n}\n","import { GrinderyWalletSDK } from './sdk/GrinderyWalletSDK';\n\ndeclare global {\n  interface Window {\n    Telegram?: any;\n    ethereum?: any;\n    Grindery?: {\n      WalletSDK?: GrinderyWalletSDK;\n    };\n  }\n}\n\nfunction init() {\n  if (\n    !window.Grindery?.WalletSDK ||\n    !(window.Grindery.WalletSDK instanceof GrinderyWalletSDK)\n  ) {\n    window.Grindery = {\n      ...(window.Grindery || {}),\n      WalletSDK: new GrinderyWalletSDK(),\n    };\n  }\n}\n\n// Initialize the SDK when the page is loaded\ninit();\n"],"names":["ProviderError","_Error","message","code","data","_this","call","_inheritsLoose","_wrapNativeSuper","Error","ProviderEventEmitter","events","Map","_proto","prototype","on","event","callback","has","set","get","push","removeListener","callbacks","filter","cb","emit","Array","_len","_key","arguments","console","log","forEach","apply","LOCALSTORAGE_KEY","ProviderLocalStorage","_ProviderEventEmitter","getStorageValue","key","value","getStorage","setStorageValue","storage","saveStorage","clearStorage","JSON","parse","localStorage","getItem","error","setItem","stringify","ProviderBase","_ProviderLocalStorage","document","title","injectProvider","isConnected","chainId","isWalletConnected","isWalletConnectionPending","getChain","parseFloat","split","toString","getAddress","accounts","request","_request","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","method","params","wrap","_callee$","_context","prev","next","methods","sessionRequired","execute","abrupt","sent","t0","createProviderRpcError","stop","_x","sendAndWaitGrinderyRpcProviderRequest","_sendAndWaitGrinderyRpcProviderRequest","_callee2","timeout","_callee2$","_context2","sendGrinderyRpcProviderRequest","waitGrinderyRpcProviderRequest","requestToken","_x2","_x3","_x4","registerProviderMethods","_sendGrinderyRpcProviderRequest","_callee3","_callee3$","_context3","sendGrinderyRpcApiRequest","sessionId","scope","_x5","_x6","_waitGrinderyRpcProviderRequest","_callee4","_callee4$","_context4","_x7","_x8","_sendGrinderyRpcApiRequest","_callee5","response","_callee5$","_context5","fetch","headers","body","jsonrpc","id","json","result","_x9","_x10","errorResponse","window","ethereum","providers","isArray","GrinderyWalletProvider","_ProviderBase","eth_requestAccounts","_execute","_pairResult$session","pairResult","_accounts","_pairResult$session2","_pairResult","_accounts2","connectUrl","connectUrlBrowser","pairingToken","session","namespaces","map","account","includes","t1","appId","t2","eth_accounts","_execute2","eth_sendTransaction","_execute3","personal_sign","_execute4","addEventListener","restorePairing","restoreSession","_restorePairing","_pairResult$session3","_restoreSession","_callee6","_callee6$","_context6","GrinderyWalletSDK","provider","getWeb3Provider","_window$ethereum","find","isGrinderyWallet","init","_window$Grindery","Grindery","WalletSDK","_extends"],"mappings":"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"}