{"version":3,"file":"grindery-wallet-sdk.umd.development.js","sources":["../src/classes/EventEmitter.ts","../src/classes/LocalStorage.ts","../src/classes/ProviderError.ts","../src/classes/ProviderBase.ts","../src/classes/GrinderyWalletProvider.ts","../src/classes/GrinderyWalletSDK.ts","../src/index.ts"],"sourcesContent":["/**\n * @summary A class for emitting provider events\n * @since 0.1.0\n */\nexport class EventEmitter {\n  /**\n   * @summary A map of events and their listeners\n   * @public\n   */\n  public events: Map<string, Array<Function>>;\n\n  constructor() {\n    this.events = new Map();\n  }\n\n  /**\n   * @summary Adds a listener to the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public on(event: string, callback: Function) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event)!.push(callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public removeListener(event: string, callback: Function) {\n    if (this.events.has(event)) {\n      const callbacks = this.events.get(event)!.filter(cb => cb !== callback);\n      this.events.set(event, callbacks);\n    }\n    return this;\n  }\n\n  /**\n   * @summary Emits an event\n   * @public\n   * @param {string} event Event name\n   * @param data Event data\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  protected emit(event: string, ...data: any[]) {\n    if (this.events.has(event)) {\n      console.log('[Grindery.WalletSDK] > Event:', event, data);\n      this.events.get(event)!.forEach(callback => {\n        callback(...data);\n      });\n    }\n    return this;\n  }\n}\n","import { EventEmitter } from './EventEmitter';\nimport { ProviderStorage, ProviderStorageKey } from '../types';\n\nconst LOCALSTORAGE_KEY = 'GrinderyWalletProvider';\n\n/**\n * @summary A local storage class for the provider\n * @since 0.1.0\n * @extends EventEmitter\n */\nexport class ProviderLocalStorage extends EventEmitter {\n  /**\n   * @summary Gets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @returns {string} The value of the storage by the key\n   */\n  protected getStorageValue(key: ProviderStorageKey): string {\n    const value = this.getStorage()[key] || '';\n    return value;\n  }\n\n  /**\n   * @summary Sets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @param {string} value The value to set\n   * @returns {void}\n   */\n  protected setStorageValue(key: ProviderStorageKey, value: string): void {\n    const storage = this.getStorage();\n    storage[key] = value;\n    this.saveStorage(storage);\n  }\n\n  /**\n   * @summary Clears the storage\n   * @protected\n   * @returns {void}\n   */\n  protected clearStorage(): void {\n    this.saveStorage({});\n  }\n\n  /**\n   * @summary Gets the provider storage\n   * @returns {ProviderStorage} The provider storage\n   */\n  private getStorage(): ProviderStorage {\n    try {\n      return JSON.parse(\n        localStorage.getItem(LOCALSTORAGE_KEY) || '{}'\n      ) as ProviderStorage;\n    } catch (error) {\n      localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify({}));\n      throw new Error('Error parsing storage');\n    }\n  }\n\n  /**\n   * @summary Saves the provider storage\n   * @param {ProviderStorage} storage Provider storage object\n   */\n  private saveStorage(storage: ProviderStorage): void {\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(storage));\n  }\n}\n","/**\n * @summary Error class for GrinderyWalletProvider\n * @since 0.1.0\n * @extends Error\n */\nexport class ProviderError extends Error {\n  name: string = 'GrinderyWalletProviderError';\n  code?: number;\n  data?: unknown;\n\n  constructor(message: string, code?: number, data?: unknown) {\n    super(message);\n    this.code = code;\n    this.data = data;\n  }\n}\n","import { ProviderLocalStorage } from './LocalStorage';\nimport {\n  GrinderyRpcMethodName,\n  GrinderyRpcProviderRequestMethodName,\n  ProviderMethods,\n  ProviderRequestResult,\n  RequestArguments,\n  RequestArgumentsParams,\n} from '../types';\nimport { ProviderError } from './ProviderError';\n\n/**\n * @summary The provider base class\n * @since 0.1.0\n * @extends ProviderLocalStorage\n */\nexport class ProviderBase extends ProviderLocalStorage {\n  constructor() {\n    super();\n\n    this.injectProvider();\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return !!this.chainId;\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return this.isConnected() && !!this.getStorageValue('sessionId');\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet pairing is in progress (pending).\n   */\n  public isWalletConnectionPending(): boolean {\n    return this.isConnected() && !!this.getStorageValue('pairingToken');\n  }\n\n  /**\n   * @summary Gets the connected chain ID in hex format\n   * @public\n   * @returns {string} The chain ID in hex format\n   */\n  public getChain(): string {\n    return `0x${parseFloat(this.chainId.split(':')[1]).toString(16)}`;\n  }\n\n  /**\n   * @summary Gets the connected user's wallet address\n   * @public\n   * @returns {string} The ethereum wallet address\n   */\n  public getAddress(): string {\n    return this.accounts[0] || '';\n  }\n\n  /**\n   * @summary Sends a request to the provider\n   * @public\n   * @param {RequestArguments} args Request arguments\n   * @param {string} args.method The method name\n   * @param {RequestArgumentsParams} args.params The method parameters\n   * @returns {T} The result of the request\n   */\n  public async request<T>({ method, params }: RequestArguments): Promise<T> {\n    if (!this.chainId) {\n      this.emit('disconnect', new ProviderError('Disconnected', 4900));\n      throw new ProviderError('Disconnected', 4900);\n    }\n    if (!this.methods[method]) {\n      throw new ProviderError('Unsupported Method', 4200);\n    }\n\n    try {\n      if (this.methods[method].sessionRequired && !this.isWalletConnected()) {\n        throw new ProviderError('Unauthorized', 4900);\n      }\n\n      return (await this.methods[method].execute(params)) as T;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API and waits for the result.\n   * @public\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  public async sendAndWaitGrinderyRpcProviderRequest<T>(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[],\n    timeout?: number\n  ): Promise<T> {\n    const request = await this.sendGrinderyRpcProviderRequest(method, params);\n    return await this.waitGrinderyRpcProviderRequest(\n      request.requestToken,\n      timeout\n    );\n  }\n\n  /**\n   * @summary The application ID.\n   * @protected\n   */\n  protected appId: string = document.title || 'Grindery Wallet Provider';\n\n  /**\n   * @summary The chain ID in CAIP-2 format; e.g. \"eip155:1\".\n   * @protected\n   */\n  protected chainId: string = 'eip155:137';\n\n  /**\n   * @summary The list of supported provider methods.\n   * @protected\n   */\n  protected methods: ProviderMethods = {};\n\n  /**\n   * @summary The user's wallet addresses list.\n   * @protected\n   */\n  protected accounts: string[] = [];\n\n  /**\n   * @summary Registers the provider methods.\n   * @protected\n   * @param {ProviderMethods} methods A map of supported provider methods.\n   * @returns {void}\n   */\n  protected registerProviderMethods(methods: ProviderMethods): void {\n    this.methods = methods;\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API.\n   * @protected\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @returns {ProviderRequestResult} The request token to use in the `waitGrinderyRpcProviderRequest` method\n   */\n  protected async sendGrinderyRpcProviderRequest(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[]\n  ): Promise<ProviderRequestResult> {\n    if (!this.getStorageValue('sessionId')) {\n      throw new ProviderError('Unauthorized', 4900);\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<ProviderRequestResult>(\n        'checkout_request',\n        {\n          sessionId: this.getStorageValue('sessionId'),\n          scope: this.chainId,\n          request: {\n            method,\n            params,\n          },\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Waits for the result of the provider request.\n   * @protected\n   * @param {string} requestToken A token to identify provider request. Recieved in the results of `sendGrinderyRpcProviderRequest` method.\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  protected async waitGrinderyRpcProviderRequest<T>(\n    requestToken: string,\n    timeout?: number\n  ): Promise<T> {\n    if (!this.getStorageValue('sessionId')) {\n      throw new ProviderError('Unauthorized', 4900);\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<T>(\n        'checkout_waitForRequestResult',\n        {\n          requestToken,\n          timeout,\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a request to the Grindery Walletconnect RPC API.\n   * @protected\n   * @param {GrinderyRpcMethodName} method Request method name\n   * @param {RequestArgumentsParams} params Request parameters\n   * @returns {T} The result of the request\n   */\n  protected async sendGrinderyRpcApiRequest<T>(\n    method: GrinderyRpcMethodName,\n    params?: RequestArgumentsParams\n  ): Promise<T> {\n    try {\n      const response = await fetch('https://walletconnect-api.grindery.com', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method,\n          params: params || [],\n        }),\n      });\n      const data = await response.json();\n      if (data.error) {\n        throw new ProviderError(data.error.message, data.error.code);\n      }\n      if (!data.result) {\n        throw new ProviderError('No result', 4900);\n      }\n      return data.result;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Creates a provider error from an unknown error\n   * @protected\n   * @param {unknown} error Optional. Error object.\n   * @returns {ProviderError} The provider error\n   */\n  protected createProviderRpcError(error?: unknown): ProviderError {\n    let errorResponse: ProviderError;\n    if (error instanceof ProviderError) {\n      errorResponse = new ProviderError(error.message || 'Unknown error');\n      errorResponse.code = error.code || 4900;\n      errorResponse.data = error.data;\n    } else if (error instanceof Error) {\n      errorResponse = new ProviderError(error.message || 'Unknown error');\n      errorResponse.code = 4900;\n    } else {\n      errorResponse = new ProviderError('Unknown error');\n      errorResponse.code = 4900;\n    }\n    return errorResponse;\n  }\n\n  /**\n   * @summary Injects the provider into the window object\n   * @private\n   * @returns {void}\n   */\n  private injectProvider(): void {\n    if (!window.ethereum) {\n      window.ethereum = this;\n    } else {\n      if (\n        window.ethereum.providers &&\n        Array.isArray(window.ethereum.providers)\n      ) {\n        window.ethereum.providers.push(this);\n      } else {\n        window.ethereum.providers = [window.ethereum, this];\n      }\n    }\n  }\n}\n","import {\n  ProviderInterface,\n  ProviderPairingResult,\n  ProviderRequestPairingResult,\n  RequestArgumentsParams,\n} from '../types';\nimport { ProviderBase } from './ProviderBase';\nimport { ProviderError } from './ProviderError';\n\n/**\n * @summary The Grindery Wallet Ethereum Injected Provider Class.\n * @extends ProviderBase\n * @implements ProviderInterface\n */\nexport class GrinderyWalletProvider extends ProviderBase\n  implements ProviderInterface {\n  /**\n   * @summary Indicates that the provider is a Grindery Wallet.\n   */\n  public readonly isGrinderyWallet: boolean = true;\n\n  constructor() {\n    super();\n\n    this.registerProviderMethods({\n      eth_requestAccounts: {\n        sessionRequired: false,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          if (this.isWalletConnected()) {\n            try {\n              const accounts = await this.request<string[]>({\n                method: 'eth_accounts',\n                params: params || [],\n              });\n              this.accounts = accounts;\n              this.emit('accountsChanged', { accounts });\n              return accounts;\n            } catch (error) {\n              this.setStorageValue('sessionId', '');\n              // skip failed request and continue with pairing\n            }\n          }\n          if (this.isWalletConnectionPending()) {\n            try {\n              const pairResult = await this.sendGrinderyRpcApiRequest<\n                ProviderPairingResult\n              >('checkout_waitForPairingResult', {\n                pairingToken: this.getStorageValue('pairingToken'),\n              });\n\n              this.clearStorage();\n              this.setStorageValue('sessionId', pairResult.session.sessionId);\n\n              if (!pairResult.session.sessionId) {\n                throw new ProviderError('Pairing failed', 4900);\n              }\n\n              const accounts = (\n                pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n              ).map(account =>\n                account.includes(':') ? account.split(':')[2] || '' : account\n              );\n              this.accounts = accounts;\n              this.emit('accountsChanged', { accounts });\n              return [];\n            } catch (error) {\n              this.clearStorage();\n              // skip failed request and continue with pairing\n            }\n          }\n          try {\n            const result = await this.sendGrinderyRpcApiRequest<\n              ProviderRequestPairingResult\n            >('checkout_requestPairing', { appId: this.appId });\n\n            if (!result.pairingToken || !result.connectUrl) {\n              throw new ProviderError('Pairing failed', 4900);\n            }\n\n            this.setStorageValue('pairingToken', result.pairingToken);\n            this.setStorageValue('connectUrl', result.connectUrl);\n            this.setStorageValue('connectUrlBrowser', result.connectUrlBrowser);\n            this.setStorageValue('shortToken', result.shortToken);\n            this.emit('pairing', {\n              shortToken: result.shortToken,\n              connectUrl: result.connectUrl,\n              connectUrlBrowser: result.connectUrlBrowser,\n            });\n            const pairResult = await this.sendGrinderyRpcApiRequest<\n              ProviderPairingResult\n            >('checkout_waitForPairingResult', {\n              pairingToken: result.pairingToken,\n            });\n\n            this.setStorageValue('sessionId', pairResult.session.sessionId);\n\n            if (!pairResult.session.sessionId) {\n              throw new ProviderError('Pairing failed', 4900);\n            }\n            this.setStorageValue('pairingToken', '');\n            this.setStorageValue('connectUrl', '');\n            this.setStorageValue('connectUrlBrowser', '');\n            this.setStorageValue('shortToken', '');\n            const accounts = (\n              pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n            ).map(account =>\n              account.includes(':') ? account.split(':')[2] || '' : account\n            );\n            this.accounts = accounts;\n            this.emit('accountsChanged', { accounts });\n            return accounts;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      eth_accounts: {\n        sessionRequired: true,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          try {\n            const accounts = await this.sendAndWaitGrinderyRpcProviderRequest<\n              string[]\n            >(\n              'eth_accounts',\n              params ? (Array.isArray(params) ? params : [params]) : []\n            );\n            this.accounts = accounts;\n            this.emit('accountsChanged', { accounts });\n            return accounts;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      eth_sendTransaction: {\n        sessionRequired: true,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest<string[]>(\n            'eth_sendTransaction',\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n      personal_sign: {\n        sessionRequired: true,\n        execute: async (\n          params?: Partial<RequestArgumentsParams>\n        ): Promise<string> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest(\n            'personal_sign',\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n    });\n\n    window.addEventListener('load', () => {\n      this.emit('connect', { chainId: this.getChain() });\n      this.restorePairing();\n      this.restoreSession();\n    });\n  }\n\n  /**\n   * @summary Restores the pairing process if pairing token is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restorePairing(): Promise<void> {\n    const pairingToken = this.getStorageValue('pairingToken');\n    const sessionId = this.getStorageValue('sessionId');\n    if (pairingToken && !sessionId) {\n      try {\n        const pairResult = await this.sendGrinderyRpcApiRequest<\n          ProviderPairingResult\n        >('checkout_waitForPairingResult', {\n          pairingToken,\n        });\n\n        this.clearStorage();\n        this.setStorageValue('sessionId', pairResult.session.sessionId);\n\n        if (!pairResult.session.sessionId) {\n          throw new ProviderError('Pairing failed', 4900);\n        }\n\n        const accounts = (\n          pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n        ).map(account =>\n          account.includes(':') ? account.split(':')[2] || '' : account\n        );\n        this.accounts = accounts;\n        this.emit('accountsChanged', { accounts });\n      } catch (error) {\n        this.accounts = [];\n        this.clearStorage();\n      }\n    }\n  }\n\n  /**\n   * @summary Restores the session if session Id is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restoreSession(): Promise<void> {\n    const pairingToken = this.getStorageValue('pairingToken');\n    const sessionId = this.getStorageValue('sessionId');\n    if (sessionId && !pairingToken) {\n      try {\n        await this.request<string[]>({\n          method: 'eth_requestAccounts',\n        });\n      } catch (error) {\n        this.accounts = [];\n        this.clearStorage();\n      }\n    }\n  }\n}\n","import { ProviderRequestPairingResult } from '../types';\nimport { GrinderyWalletProvider } from './GrinderyWalletProvider';\n\n/**\n * @summary The Grindery Wallet SDK class\n * @since 0.1.0\n */\nexport class GrinderyWalletSDK {\n  /**\n   * @summary The provider instance\n   * @public\n   */\n  public provider: GrinderyWalletProvider;\n\n  constructor() {\n    this.provider = this.getWeb3Provider();\n    this.provider.on('pairing', this.handlePairing);\n  }\n\n  /**\n   * @summary Checks if the provider is connected to the server\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return this.provider.isConnected();\n  }\n\n  /**\n   * @summary Checks if the provider is connected to the server and the Grindery Wallet\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return this.provider.isWalletConnected();\n  }\n\n  /**\n   * @summary Initiate connection to the Grindery Wallet\n   * @public\n   * @returns {Promise<string[]>} The array of ethereum addresses\n   * @since 0.1.0\n   */\n  public async connect(): Promise<string[]> {\n    return await this.provider.request({ method: 'eth_requestAccounts' });\n  }\n\n  /**\n   * @summary Sends a transaction request to the Grindery Wallet\n   * @public\n   * @since 0.1.0\n   * @param {object} params The transaction parameters\n   * @param {string} params.to The recipient address\n   * @param {string} [params.value] The amount to send in wei\n   * @param {string} [params.data] The data to send\n   * @returns {Promise<string[]>} Array with transaction hash string\n   */\n  public async sendTransaction(params: {\n    to: string;\n    value?: string;\n    data?: string;\n  }): Promise<string[]> {\n    return await this.provider.request<string[]>({\n      method: 'eth_sendTransaction',\n      params: [params],\n    });\n  }\n\n  /**\n   * @summary Sends a personal signature request to the Grindery Wallet\n   * @public\n   * @since 0.1.0\n   * @param {string} message The message to sign\n   * @returns {Promise<string>} Signature string\n   */\n  public async signMessage(message: string): Promise<string> {\n    return await this.provider.request<string>({\n      method: 'personal_sign',\n      params: [message, this.provider.getAddress()],\n    });\n  }\n\n  /**\n   * @summary Adds a listener to the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public on(event: string, callback: Function) {\n    this.provider.on(event, callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public removeListener(event: string, callback: Function) {\n    this.provider.removeListener(event, callback);\n    return this;\n  }\n\n  /**\n   * @summary Gets the Grindery Wallet ethereum provider\n   * @returns {GrinderyWalletProvider} The Grindery Wallet ethereum provider\n   */\n  private getWeb3Provider(): GrinderyWalletProvider {\n    let provider = window.ethereum?.providers?.find(\n      (provider: GrinderyWalletProvider | unknown) =>\n        provider instanceof GrinderyWalletProvider && provider.isGrinderyWallet\n    );\n    if (\n      !provider &&\n      window.ethereum instanceof GrinderyWalletProvider &&\n      window.ethereum.isGrinderyWallet\n    ) {\n      provider = window.ethereum;\n    }\n    if (!provider) {\n      provider = new GrinderyWalletProvider();\n    }\n    return provider;\n  }\n\n  private handlePairing({\n    shortToken,\n    connectUrlBrowser,\n  }: ProviderRequestPairingResult): void {\n    const WebApp = window.Telegram?.WebApp;\n    const redirectUrl = `https://walletconnect.grindery.com/connect/wc?uri=${shortToken}`;\n    if (\n      WebApp &&\n      WebApp.openTelegramLink &&\n      WebApp.platform &&\n      WebApp.platform !== 'unknown'\n    ) {\n      WebApp.openTelegramLink(connectUrlBrowser);\n      if (WebApp.close) {\n        window.Telegram.WebApp.close();\n      }\n    } else {\n      window.open(redirectUrl, '_blank');\n    }\n  }\n}\n","import { GrinderyWalletSDK } from './classes/GrinderyWalletSDK';\n\ndeclare global {\n  interface Window {\n    Telegram?: any;\n    ethereum?: any;\n    Grindery?: {\n      WalletSDK?: GrinderyWalletSDK;\n    };\n  }\n}\n\nfunction init() {\n  if (\n    !window.Grindery?.WalletSDK ||\n    !(window.Grindery.WalletSDK instanceof GrinderyWalletSDK)\n  ) {\n    window.Grindery = {\n      ...(window.Grindery || {}),\n      WalletSDK: new GrinderyWalletSDK(),\n    };\n  }\n}\n\n// Initialize the SDK when the page is loaded\ninit();\n"],"names":["EventEmitter","events","Map","_proto","prototype","on","event","callback","has","set","get","push","removeListener","callbacks","filter","cb","emit","data","Array","_len","_key","arguments","console","log","forEach","apply","LOCALSTORAGE_KEY","ProviderLocalStorage","_EventEmitter","_inheritsLoose","getStorageValue","key","value","getStorage","setStorageValue","storage","saveStorage","clearStorage","JSON","parse","localStorage","getItem","error","setItem","stringify","Error","ProviderError","_Error","message","code","_this","call","_wrapNativeSuper","ProviderBase","_ProviderLocalStorage","document","title","injectProvider","isConnected","chainId","isWalletConnected","isWalletConnectionPending","getChain","parseFloat","split","toString","getAddress","accounts","request","_request","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","method","params","wrap","_callee$","_context","prev","next","methods","sessionRequired","execute","abrupt","sent","t0","createProviderRpcError","stop","_x","sendAndWaitGrinderyRpcProviderRequest","_sendAndWaitGrinderyRpcProviderRequest","_callee2","timeout","_callee2$","_context2","sendGrinderyRpcProviderRequest","waitGrinderyRpcProviderRequest","requestToken","_x2","_x3","_x4","registerProviderMethods","_sendGrinderyRpcProviderRequest","_callee3","_callee3$","_context3","sendGrinderyRpcApiRequest","sessionId","scope","_x5","_x6","_waitGrinderyRpcProviderRequest","_callee4","_callee4$","_context4","_x7","_x8","_sendGrinderyRpcApiRequest","_callee5","response","_callee5$","_context5","fetch","headers","body","jsonrpc","id","json","result","_x9","_x10","errorResponse","window","ethereum","providers","isArray","GrinderyWalletProvider","_ProviderBase","eth_requestAccounts","_execute","_pairResult$session","pairResult","_accounts","_pairResult$session2","_pairResult","_accounts2","pairingToken","session","namespaces","map","account","includes","t1","appId","connectUrl","connectUrlBrowser","shortToken","t2","eth_accounts","_execute2","eth_sendTransaction","_execute3","personal_sign","_execute4","addEventListener","restorePairing","restoreSession","_restorePairing","_pairResult$session3","_restoreSession","_callee6","_callee6$","_context6","GrinderyWalletSDK","provider","getWeb3Provider","handlePairing","connect","_connect","sendTransaction","_sendTransaction","signMessage","_signMessage","_window$ethereum","find","isGrinderyWallet","WebApp","_window$Telegram","Telegram","redirectUrl","openTelegramLink","platform","close","open","init","_window$Grindery","Grindery","WalletSDK","_extends"],"mappings":"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"}