{"version":3,"file":"grindery-wallet-sdk.esm.js","sources":["../src/provider/ProviderError.ts","../src/provider/ProviderEventEmitter.ts","../src/provider/ProviderLocalStorage.ts","../src/provider/Provider.ts","../src/provider/GrinderyWalletProvider.ts","../src/sdk/GrinderyWalletSDK.ts","../src/index.ts"],"sourcesContent":["/**\n * @summary Error class for GrinderyWalletProvider\n * @since 0.1.0\n * @extends Error\n */\nexport class ProviderError extends Error {\n  name: string = 'GrinderyWalletProviderError';\n  code?: number;\n  data?: unknown;\n\n  constructor(message: string, code?: number, data?: unknown) {\n    super(message);\n    this.code = code;\n    this.data = data;\n  }\n}\n","/**\n * @summary A class for emitting provider events\n * @since 0.1.0\n */\nexport class ProviderEventEmitter {\n  /**\n   * @summary A map of events and their listeners\n   */\n  private events: Map<string, Array<Function>>;\n\n  constructor() {\n    this.events = new Map();\n  }\n\n  /**\n   * @summary Adds a listener to the provider event\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {ProviderEventEmitter} The instance of the class itself\n   */\n  on(event: string, callback: Function) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event)!.push(callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the provider event\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {ProviderEventEmitter} The instance of the class itself\n   */\n  removeListener(event: string, callback: Function) {\n    if (this.events.has(event)) {\n      const callbacks = this.events.get(event)!.filter(cb => cb !== callback);\n      this.events.set(event, callbacks);\n    }\n    return this;\n  }\n\n  /**\n   * @summary Emits an event\n   * @param {string} event Event name\n   * @param data Event data\n   * @returns {ProviderEventEmitter} The instance of the class itself\n   */\n  protected emit(event: string, ...data: any[]) {\n    if (this.events.has(event)) {\n      console.log('[GrinderyWalletProvider] > Event:', event, data);\n      this.events.get(event)!.forEach(callback => {\n        callback(...data);\n      });\n    }\n    return this;\n  }\n}\n","import { ProviderEventEmitter } from './ProviderEventEmitter';\nimport { ProviderStorage, ProviderStorageKey } from './types';\n\nconst LOCALSTORAGE_KEY = 'GrinderyWalletProvider';\n\n/**\n * @summary A local storage class for the provider\n * @since 0.1.0\n * @extends ProviderEventEmitter\n */\nexport class ProviderLocalStorage extends ProviderEventEmitter {\n  /**\n   * @summary Gets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @returns {string} The value of the storage by the key\n   */\n  protected getStorageValue(key: ProviderStorageKey): string {\n    const value = this.getStorage()[key] || '';\n    return value;\n  }\n\n  /**\n   * @summary Sets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @param {string} value The value to set\n   * @returns {void}\n   */\n  protected setStorageValue(key: ProviderStorageKey, value: string): void {\n    const storage = this.getStorage();\n    storage[key] = value;\n    this.saveStorage(storage);\n  }\n\n  /**\n   * @summary Clears the storage\n   * @protected\n   * @returns {void}\n   */\n  protected clearStorage(): void {\n    this.saveStorage({});\n  }\n\n  /**\n   * @summary Gets the provider storage\n   * @returns {ProviderStorage} The provider storage\n   */\n  private getStorage(): ProviderStorage {\n    try {\n      return JSON.parse(\n        localStorage.getItem(LOCALSTORAGE_KEY) || '{}'\n      ) as ProviderStorage;\n    } catch (error) {\n      localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify({}));\n      throw new Error('Error parsing storage');\n    }\n  }\n\n  /**\n   * @summary Saves the provider storage\n   * @param {ProviderStorage} storage Provider storage object\n   */\n  private saveStorage(storage: ProviderStorage): void {\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(storage));\n  }\n}\n","import { ProviderError } from './ProviderError';\nimport { ProviderLocalStorage } from './ProviderLocalStorage';\nimport {\n  GrinderyRpcMethodName,\n  GrinderyRpcProviderRequestMethodName,\n  ProviderMethods,\n  ProviderRequestResult,\n  RequestArguments,\n  RequestArgumentsParams,\n} from './types';\n\n/**\n * @summary The provider class\n * @since 0.1.0\n * @extends ProviderLocalStorage\n */\nexport class Provider extends ProviderLocalStorage {\n  constructor() {\n    super();\n\n    this.injectProvider();\n\n    window.addEventListener('load', () => {\n      this.emit('connect', { chainId: this.getChain() });\n      this.restoreSession();\n    });\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return !!this.chainId;\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return this.isConnected() && !!this.getStorageValue('sessionId');\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet pairing is in progress (pending).\n   */\n  public isWalletConnectionPending(): boolean {\n    return this.isConnected() && !!this.getStorageValue('pairingToken');\n  }\n\n  /**\n   * @summary Gets the connected chain ID in hex format\n   * @public\n   * @returns {string} The chain ID in hex format\n   */\n  public getChain(): string {\n    return `0x${parseFloat(this.chainId.split(':')[1]).toString(16)}`;\n  }\n\n  /**\n   * @summary Gets the connected user's wallet address\n   * @public\n   * @returns {string} The ethereum wallet address\n   */\n  public getAddress(): string {\n    return this.accounts[0]?.split(':')[2] || '';\n  }\n\n  /**\n   * @summary Sends a request to the provider\n   * @public\n   * @param {RequestArguments} args Request arguments\n   * @param {string} args.method The method name\n   * @param {RequestArgumentsParams} args.params The method parameters\n   * @returns {T} The result of the request\n   */\n  public async request<T>({ method, params }: RequestArguments): Promise<T> {\n    if (!this.chainId) {\n      this.emit('disconnect', new ProviderError('Disconnected', 4900));\n      throw new ProviderError('Disconnected', 4900);\n    }\n    if (!this.methods[method]) {\n      throw new ProviderError('Unsupported Method', 4200);\n    }\n\n    try {\n      if (this.methods[method].sessionRequired && !this.isWalletConnected()) {\n        throw new ProviderError('Unauthorized', 4900);\n      }\n\n      return (await this.methods[method].execute(params)) as T;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary The application ID.\n   * @protected\n   */\n  protected appId: string = window.location.href;\n\n  /**\n   * @summary The chain ID in CAIP-2 format; e.g. \"eip155:1\".\n   * @protected\n   */\n  protected chainId: string = 'eip155:137';\n\n  /**\n   * @summary The list of supported provider methods.\n   * @protected\n   */\n  protected methods: ProviderMethods = {};\n\n  /**\n   * @summary The user's wallet addresses list.\n   * @protected\n   */\n  protected accounts: string[] = [];\n\n  /**\n   * @summary Registers the provider methods.\n   * @protected\n   * @param {ProviderMethods} methods A map of supported provider methods.\n   * @returns {void}\n   */\n  protected registerProviderMethods(methods: ProviderMethods): void {\n    this.methods = methods;\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API.\n   * @protected\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @returns {ProviderRequestResult} The request token to use in the `waitGrinderyRpcProviderRequest` method\n   */\n  protected async sendGrinderyRpcProviderRequest(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[]\n  ): Promise<ProviderRequestResult> {\n    if (!this.getStorageValue('sessionId')) {\n      throw new ProviderError('Unauthorized', 4900);\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<ProviderRequestResult>(\n        'checkout_request',\n        {\n          sessionId: this.getStorageValue('sessionId'),\n          scope: this.chainId,\n          request: {\n            method,\n            params,\n          },\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Waits for the result of the provider request.\n   * @protected\n   * @param {string} requestToken A token to identify provider request. Recieved in the results of `sendGrinderyRpcProviderRequest` method.\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  protected async waitGrinderyRpcProviderRequest<T>(\n    requestToken: string,\n    timeout?: number\n  ): Promise<T> {\n    if (!this.getStorageValue('sessionId')) {\n      throw new ProviderError('Unauthorized', 4900);\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<T>(\n        'checkout_waitForRequestResult',\n        {\n          requestToken,\n          timeout,\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a request to the Grindery Walletconnect RPC API.\n   * @protected\n   * @param {GrinderyRpcMethodName} method Request method name\n   * @param {RequestArgumentsParams} params Request parameters\n   * @returns {T} The result of the request\n   */\n  protected async sendGrinderyRpcApiRequest<T>(\n    method: GrinderyRpcMethodName,\n    params?: RequestArgumentsParams\n  ): Promise<T> {\n    try {\n      const response = await fetch('https://walletconnect-api.grindery.com', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method,\n          params: params || [],\n        }),\n      });\n      const data = await response.json();\n      if (data.error) {\n        throw new ProviderError(data.error.message, data.error.code);\n      }\n      if (!data.result) {\n        throw new ProviderError('No result', 4900);\n      }\n      return data.result;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Creates a provider error from an unknown error\n   * @protected\n   * @param {unknown} error Optional. Error object.\n   * @returns {ProviderError} The provider error\n   */\n  protected createProviderRpcError(error?: unknown): ProviderError {\n    let errorResponse: ProviderError;\n    if (error instanceof ProviderError) {\n      errorResponse = new ProviderError(error.message || 'Unknown error');\n      errorResponse.code = error.code || 4900;\n      errorResponse.data = error.data;\n    } else if (error instanceof Error) {\n      errorResponse = new ProviderError(error.message || 'Unknown error');\n      errorResponse.code = 4900;\n    } else {\n      errorResponse = new ProviderError('Unknown error');\n      errorResponse.code = 4900;\n    }\n    return errorResponse;\n  }\n\n  /**\n   * @summary Restores the session if session Id is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restoreSession(): Promise<void> {\n    const sessionId = this.getStorageValue('sessionId');\n    if (sessionId) {\n      try {\n        await this.request<string[]>({\n          method: 'eth_requestAccounts',\n        });\n      } catch (error) {\n        this.accounts = [];\n        this.clearStorage();\n      }\n    }\n  }\n\n  /**\n   * @summary Injects the provider into the window object\n   * @private\n   * @returns {void}\n   */\n  private injectProvider(): void {\n    if (!window.ethereum) {\n      window.ethereum = this;\n    } else {\n      if (\n        window.ethereum.providers &&\n        Array.isArray(window.ethereum.providers)\n      ) {\n        window.ethereum.providers.push(this);\n      } else {\n        window.ethereum.providers = [window.ethereum, this];\n      }\n    }\n  }\n}\n","import { Provider } from './Provider';\nimport { ProviderError } from './ProviderError';\nimport {\n  ProviderInterface,\n  ProviderPairingResult,\n  ProviderRequestPairingResult,\n  RequestArgumentsParams,\n} from './types';\n\n/**\n * @summary The Grindery Wallet Ethereum Injected Provider Class.\n * @extends Provider\n * @implements ProviderInterface\n */\nexport class GrinderyWalletProvider extends Provider\n  implements ProviderInterface {\n  /**\n   * @summary Indicates that the provider is a Grindery Wallet.\n   */\n  public readonly isGrinderyWallet: boolean = true;\n\n  constructor() {\n    super();\n\n    this.registerProviderMethods({\n      eth_requestAccounts: {\n        sessionRequired: false,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          if (this.isWalletConnected()) {\n            try {\n              const accounts = await this.request<string[]>({\n                method: 'eth_accounts',\n                params: params || [],\n              });\n              this.accounts = accounts;\n              this.emit('accountsChanged', { accounts });\n              return accounts;\n            } catch (error) {\n              this.setStorageValue('sessionId', '');\n              // skip failed request and continue with pairing\n            }\n          }\n          if (this.isWalletConnectionPending()) {\n            try {\n              this.emit('restorePairing', {\n                connectUrl: this.getStorageValue('connectUrl'),\n                connectUrlBrowser: this.getStorageValue('connectUrlBrowser'),\n              });\n\n              const pairResult = await this.sendGrinderyRpcApiRequest<\n                ProviderPairingResult\n              >('checkout_waitForPairingResult', {\n                pairingToken: this.getStorageValue('pairingToken'),\n              });\n\n              this.clearStorage();\n              this.setStorageValue('sessionId', pairResult.session.sessionId);\n\n              if (!pairResult.session.sessionId) {\n                throw new ProviderError('Pairing failed', 4900);\n              }\n\n              const accounts =\n                pairResult.session?.namespaces?.[`eip155`]?.accounts || [];\n              this.accounts = accounts;\n              this.emit('accountsChanged', { accounts });\n              return [];\n            } catch (error) {\n              this.clearStorage();\n              // skip failed request and continue with pairing\n            }\n          }\n          try {\n            const result = await this.sendGrinderyRpcApiRequest<\n              ProviderRequestPairingResult\n            >('checkout_requestPairing', { appId: this.appId });\n\n            if (!result.pairingToken || !result.connectUrl) {\n              throw new ProviderError('Pairing failed', 4900);\n            }\n\n            this.setStorageValue('pairingToken', result.pairingToken);\n            this.setStorageValue('connectUrl', result.connectUrl);\n            this.setStorageValue('connectUrlBrowser', result.connectUrlBrowser);\n            this.emit('pairing', {\n              connectUrl: result.connectUrl,\n              connectUrlBrowser: result.connectUrlBrowser,\n            });\n            const pairResult = await this.sendGrinderyRpcApiRequest<\n              ProviderPairingResult\n            >('checkout_waitForPairingResult', {\n              pairingToken: result.pairingToken,\n            });\n\n            this.setStorageValue('sessionId', pairResult.session.sessionId);\n\n            if (!pairResult.session.sessionId) {\n              throw new ProviderError('Pairing failed', 4900);\n            }\n            this.setStorageValue('pairingToken', '');\n            this.setStorageValue('connectUrl', '');\n            this.setStorageValue('connectUrlBrowser', '');\n            const accounts =\n              pairResult.session?.namespaces?.[`eip155`]?.accounts || [];\n            this.accounts = accounts;\n            this.emit('accountsChanged', { accounts });\n            return accounts;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      eth_accounts: {\n        sessionRequired: true,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          try {\n            const { requestToken } = await this.sendGrinderyRpcProviderRequest(\n              'eth_accounts',\n              params ? (Array.isArray(params) ? params : [params]) : []\n            );\n            if (!requestToken) {\n              throw new ProviderError('No request token', 4900);\n            }\n            const accounts = await this.waitGrinderyRpcProviderRequest<\n              string[]\n            >(requestToken);\n            this.accounts = accounts;\n            this.emit('accountsChanged', { accounts });\n            return accounts;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      eth_sendTransaction: {\n        sessionRequired: true,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          try {\n            const { requestToken } = await this.sendGrinderyRpcProviderRequest(\n              'eth_sendTransaction',\n              params ? (Array.isArray(params) ? params : [params]) : []\n            );\n            if (!requestToken) {\n              throw new ProviderError('No request token', 4900);\n            }\n            return await this.waitGrinderyRpcProviderRequest<string[]>(\n              requestToken\n            );\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      personal_sign: {\n        sessionRequired: true,\n        execute: async (\n          params?: Partial<RequestArgumentsParams>\n        ): Promise<string> => {\n          try {\n            const { requestToken } = await this.sendGrinderyRpcProviderRequest(\n              'personal_sign',\n              params ? (Array.isArray(params) ? params : [params]) : []\n            );\n            if (!requestToken) {\n              throw new ProviderError('No request token', 4900);\n            }\n            return await this.waitGrinderyRpcProviderRequest(requestToken);\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n    });\n  }\n}\n","import { GrinderyWalletProvider } from '../provider/GrinderyWalletProvider';\n\n/**\n * @summary The Grindery Wallet SDK class\n * @since 0.1.0\n */\nexport class GrinderyWalletSDK {\n  /**\n   * @summary The provider instance\n   * @public\n   */\n  public provider: GrinderyWalletProvider;\n\n  constructor() {\n    this.provider = this.getWeb3Provider();\n  }\n\n  /**\n   * @summary Gets the Grindery Wallet ethereum provider\n   * @returns {GrinderyWalletProvider} The Grindery Wallet ethereum provider\n   */\n  private getWeb3Provider(): GrinderyWalletProvider {\n    let provider = window.ethereum?.providers?.find(\n      (provider: GrinderyWalletProvider | unknown) =>\n        provider instanceof GrinderyWalletProvider && provider.isGrinderyWallet\n    );\n    if (\n      !provider &&\n      window.ethereum instanceof GrinderyWalletProvider &&\n      window.ethereum.isGrinderyWallet\n    ) {\n      provider = window.ethereum;\n    }\n    if (!provider) {\n      provider = new GrinderyWalletProvider();\n    }\n    return provider;\n  }\n}\n","import { GrinderyWalletSDK } from './sdk/GrinderyWalletSDK';\n\ndeclare global {\n  interface Window {\n    Telegram?: any;\n    ethereum?: any;\n    Grindery?: {\n      WalletSDK?: GrinderyWalletSDK;\n    };\n  }\n}\n\nfunction init() {\n  if (\n    !window.Grindery?.WalletSDK ||\n    !(window.Grindery.WalletSDK instanceof GrinderyWalletSDK)\n  ) {\n    window.Grindery = {\n      ...(window.Grindery || {}),\n      WalletSDK: new GrinderyWalletSDK(),\n    };\n  }\n}\n\n// Initialize the SDK when the page is loaded\ninit();\n"],"names":["ProviderError","_Error","message","code","data","_this","call","_inheritsLoose","_wrapNativeSuper","Error","ProviderEventEmitter","events","Map","_proto","prototype","on","event","callback","has","set","get","push","removeListener","callbacks","filter","cb","emit","Array","_len","_key","arguments","console","log","forEach","apply","LOCALSTORAGE_KEY","ProviderLocalStorage","_ProviderEventEmitter","getStorageValue","key","value","getStorage","setStorageValue","storage","saveStorage","clearStorage","JSON","parse","localStorage","getItem","error","setItem","stringify","Provider","_ProviderLocalStorage","window","location","href","injectProvider","addEventListener","chainId","getChain","restoreSession","isConnected","isWalletConnected","isWalletConnectionPending","parseFloat","split","toString","getAddress","_this$accounts$","accounts","request","_request","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","method","params","wrap","_callee$","_context","prev","next","methods","sessionRequired","execute","abrupt","sent","t0","createProviderRpcError","stop","_x","registerProviderMethods","sendGrinderyRpcProviderRequest","_sendGrinderyRpcProviderRequest","_callee2","_callee2$","_context2","sendGrinderyRpcApiRequest","sessionId","scope","_x2","_x3","waitGrinderyRpcProviderRequest","_waitGrinderyRpcProviderRequest","_callee3","requestToken","timeout","_callee3$","_context3","_x4","_x5","_sendGrinderyRpcApiRequest","_callee4","response","_callee4$","_context4","fetch","headers","body","jsonrpc","id","json","result","_x6","_x7","errorResponse","_restoreSession","_callee5","_callee5$","_context5","ethereum","providers","isArray","GrinderyWalletProvider","_Provider","eth_requestAccounts","_execute","_pairResult$session","pairResult","_accounts","_pairResult$session2","_pairResult","_accounts2","connectUrl","connectUrlBrowser","pairingToken","session","namespaces","t1","appId","t2","eth_accounts","_execute2","_yield$_this$sendGrin","eth_sendTransaction","_execute3","_yield$_this$sendGrin2","personal_sign","_execute4","_yield$_this$sendGrin3","GrinderyWalletSDK","provider","getWeb3Provider","_window$ethereum","find","isGrinderyWallet","init","_window$Grindery","Grindery","WalletSDK","_extends"],"mappings":"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"}