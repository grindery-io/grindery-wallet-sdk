{"version":3,"file":"grindery-wallet-sdk.cjs.development.js","sources":["../src/enums.ts","../src/provider/WalletProviderEventEmitter.ts","../src/provider/WalletProviderLocalStorage.ts","../src/provider/WalletProviderError.ts","../src/provider/WalletProvider.ts","../src/provider/GrinderyWalletProvider.ts","../src/sdk/GrinderyWalletSDK.ts","../src/index.ts"],"sourcesContent":["export enum ProviderEvents {\n  accountsChanged = 'accountsChanged',\n  pair = 'pair',\n  connect = 'connect',\n  disconnect = 'disconnect',\n  chainChanged = 'chainChanged',\n  message = 'message',\n}\n\nexport enum ProviderStorageKeys {\n  pairingToken = 'pairingToken',\n  sessionId = 'sessionId',\n  connectUrl = 'connectUrl',\n  connectUrlBrowser = 'connectUrlBrowser',\n  shortToken = 'shortToken',\n}\n\nexport enum GrinderyRpcMethodNames {\n  checkout_requestPairing = 'checkout_requestPairing',\n  checkout_waitForPairingResult = 'checkout_waitForPairingResult',\n  checkout_request = 'checkout_request',\n  checkout_waitForRequestResult = 'checkout_waitForRequestResult',\n}\n\nexport enum GrinderyRpcProviderRequestMethodNames {\n  eth_requestAccounts = 'eth_requestAccounts',\n  eth_accounts = 'eth_accounts',\n  personal_sign = 'personal_sign',\n  eth_sendTransaction = 'eth_sendTransaction',\n}\n","import { ProviderEvent } from '../types';\n\n/**\n * @summary A class for emitting provider events\n * @since 0.1.0\n */\nexport class WalletProviderEventEmitter {\n  /**\n   * @summary A map of events and their listeners\n   * @public\n   */\n  public events: Map<ProviderEvent, Array<Function>>;\n\n  constructor() {\n    this.events = new Map();\n  }\n\n  /**\n   * @summary Adds a listener to the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public on(event: ProviderEvent, callback: Function) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event)!.push(callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public removeListener(event: ProviderEvent, callback: Function) {\n    if (this.events.has(event)) {\n      const callbacks = this.events.get(event)!.filter(cb => cb !== callback);\n      this.events.set(event, callbacks);\n    }\n    return this;\n  }\n\n  /**\n   * @summary Emits an event\n   * @public\n   * @param {string} event Event name\n   * @param data Event data\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  protected emit(event: ProviderEvent, ...data: any[]) {\n    if (this.events.has(event)) {\n      console.log('[Grindery.WalletSDK] > Event:', event, data[0]);\n      this.events.get(event)!.forEach(callback => {\n        callback(...data);\n      });\n    }\n    return this;\n  }\n}\n","import { ProviderStorage, ProviderStorageKey } from '../types';\nimport { WalletProviderEventEmitter } from './WalletProviderEventEmitter';\n\nconst LOCALSTORAGE_KEY = 'GrinderyWalletProvider';\n\n/**\n * @summary A local storage class for the provider\n * @since 0.1.0\n * @extends WalletProviderEventEmitter\n */\nexport class WalletProviderLocalStorage extends WalletProviderEventEmitter {\n  /**\n   * @summary Gets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @returns {string} The value of the storage by the key\n   */\n  protected getStorageValue(key: ProviderStorageKey): string {\n    const value = this.getStorage()[key] || '';\n    return value;\n  }\n\n  /**\n   * @summary Sets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @param {string} value The value to set\n   * @returns {void}\n   */\n  protected setStorageValue(key: ProviderStorageKey, value: string): void {\n    const storage = this.getStorage();\n    storage[key] = value;\n    this.saveStorage(storage);\n  }\n\n  /**\n   * @summary Clears the storage\n   * @protected\n   * @returns {void}\n   */\n  protected clearStorage(): void {\n    this.saveStorage({});\n  }\n\n  /**\n   * @summary Gets the provider storage\n   * @returns {ProviderStorage} The provider storage\n   */\n  private getStorage(): ProviderStorage {\n    try {\n      return JSON.parse(\n        localStorage.getItem(LOCALSTORAGE_KEY) || '{}'\n      ) as ProviderStorage;\n    } catch (error) {\n      localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify({}));\n      throw new Error('Error parsing storage');\n    }\n  }\n\n  /**\n   * @summary Saves the provider storage\n   * @param {ProviderStorage} storage Provider storage object\n   */\n  private saveStorage(storage: ProviderStorage): void {\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(storage));\n  }\n}\n","/**\n * @summary Error class for WalletProvider\n * @since 0.1.0\n * @extends Error\n */\nexport class WalletProviderError extends Error {\n  name: string = 'GrinderyWalletProviderError';\n  code?: number;\n  data?: unknown;\n\n  constructor(message: string, code?: number, data?: unknown) {\n    super(message);\n    this.code = code;\n    this.data = data;\n  }\n}\n\nexport const WalletProviderErrors = {\n  PairingFailed: new WalletProviderError('Pairing failed', 4900),\n  Disconnected: new WalletProviderError('Disconnected', 4900),\n  UnsupportedMethod: new WalletProviderError('Unsupported Method', 4200),\n  Unauthorized: new WalletProviderError('Unauthorized', 4900),\n  NoResult: new WalletProviderError('No result', 4900),\n};\n","import { WalletProviderLocalStorage } from './WalletProviderLocalStorage';\nimport {\n  Address,\n  ChainId,\n  GrinderyRpcApiRequestResults,\n  GrinderyRpcMethodName,\n  GrinderyRpcProviderRequestMethodName,\n  ProviderMethods,\n  ProviderRequestResult,\n  RequestArguments,\n  RequestArgumentsParams,\n  RequestToken,\n} from '../types';\nimport {\n  WalletProviderError,\n  WalletProviderErrors,\n} from './WalletProviderError';\nimport {\n  GrinderyRpcMethodNames,\n  ProviderEvents,\n  ProviderStorageKeys,\n} from '../enums';\n\n/**\n * @summary The base wallet provider class\n * @since 0.1.0\n * @extends WalletProviderLocalStorage\n */\nexport class WalletProvider extends WalletProviderLocalStorage {\n  constructor() {\n    super();\n\n    this.injectProvider();\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return !!this.chainId;\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return (\n      this.isConnected() &&\n      !!this.getStorageValue(ProviderStorageKeys.sessionId)\n    );\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet pairing is in progress (pending).\n   */\n  public isWalletConnectionPending(): boolean {\n    return (\n      this.isConnected() &&\n      !!this.getStorageValue(ProviderStorageKeys.pairingToken) &&\n      !this.getStorageValue(ProviderStorageKeys.sessionId)\n    );\n  }\n\n  /**\n   * @summary Gets the connected chain ID in hex format\n   * @public\n   * @returns {ChainId} The chain ID in hex format\n   */\n  public getChain(): ChainId {\n    return `0x${parseFloat(this.chainId.split(':')[1]).toString(16)}`;\n  }\n\n  /**\n   * @summary Gets the connected user's wallet address\n   * @public\n   * @returns {Address} The ethereum wallet address\n   */\n  public getAddress(): Address {\n    return this.accounts[0] || '';\n  }\n\n  /**\n   * @summary Sends a request to the provider\n   * @public\n   * @param {RequestArguments} args Request arguments\n   * @param {string} args.method The method name\n   * @param {RequestArgumentsParams} args.params The method parameters\n   * @returns {T} The result of the request\n   */\n  public async request<T>({ method, params }: RequestArguments): Promise<T> {\n    if (!this.chainId) {\n      this.emit(ProviderEvents.disconnect, WalletProviderErrors.Disconnected);\n      throw WalletProviderErrors.Disconnected;\n    }\n    if (!this.methods[method]) {\n      throw WalletProviderErrors.UnsupportedMethod;\n    }\n\n    try {\n      if (this.methods[method]?.sessionRequired && !this.isWalletConnected()) {\n        throw WalletProviderErrors.Unauthorized;\n      }\n\n      return (await this.methods[method]?.execute(params)) as T;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API and waits for the result.\n   * @public\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  public async sendAndWaitGrinderyRpcProviderRequest<T>(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[],\n    timeout?: number\n  ): Promise<T> {\n    const request = await this.sendGrinderyRpcProviderRequest(method, params);\n    return await this.waitGrinderyRpcProviderRequest(\n      request.requestToken,\n      timeout\n    );\n  }\n\n  /**\n   * @summary The application ID.\n   * @protected\n   */\n  protected appId: string = document.title || 'Grindery Wallet Provider';\n\n  /**\n   * @summary The chain ID in CAIP-2 format; e.g. \"eip155:1\".\n   * @protected\n   */\n  protected chainId: ChainId = 'eip155:137';\n\n  /**\n   * @summary The list of supported provider methods.\n   * @protected\n   */\n  protected methods: Partial<ProviderMethods> = {};\n\n  /**\n   * @summary The user's wallet addresses list.\n   * @protected\n   */\n  protected accounts: Address[] = [];\n\n  protected setAccounts(accounts: Address[]): Address[] {\n    if (JSON.stringify(accounts) !== JSON.stringify(this.accounts)) {\n      this.emit(ProviderEvents.accountsChanged, accounts);\n    }\n    this.accounts = accounts;\n    return this.accounts;\n  }\n\n  /**\n   * @summary Registers the provider methods.\n   * @protected\n   * @param {ProviderMethods} methods A map of supported provider methods.\n   * @returns {void}\n   */\n  protected registerProviderMethods(methods: Partial<ProviderMethods>): void {\n    this.methods = methods;\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API.\n   * @protected\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @returns {ProviderRequestResult} The request token to use in the `waitGrinderyRpcProviderRequest` method\n   */\n  protected async sendGrinderyRpcProviderRequest(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[]\n  ): Promise<ProviderRequestResult> {\n    if (!this.getStorageValue(ProviderStorageKeys.sessionId)) {\n      throw WalletProviderErrors.Unauthorized;\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<\n        GrinderyRpcApiRequestResults.checkout_request\n      >(GrinderyRpcMethodNames.checkout_request, {\n        sessionId: this.getStorageValue(ProviderStorageKeys.sessionId),\n        scope: this.chainId,\n        request: {\n          method,\n          params,\n        },\n      });\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Waits for the result of the provider request.\n   * @protected\n   * @param {RequestToken} requestToken A token to identify provider request. Recieved in the results of `sendGrinderyRpcProviderRequest` method.\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  protected async waitGrinderyRpcProviderRequest<T>(\n    requestToken: RequestToken,\n    timeout?: number\n  ): Promise<T> {\n    if (!this.getStorageValue(ProviderStorageKeys.sessionId)) {\n      throw WalletProviderErrors.Unauthorized;\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<T>(\n        GrinderyRpcMethodNames.checkout_waitForRequestResult,\n        {\n          requestToken,\n          timeout,\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a request to the Grindery Walletconnect RPC API.\n   * @protected\n   * @param {GrinderyRpcMethodName} method Request method name\n   * @param {RequestArgumentsParams} params Request parameters\n   * @returns {T} The result of the request\n   */\n  protected async sendGrinderyRpcApiRequest<T>(\n    method: GrinderyRpcMethodName,\n    params?: RequestArgumentsParams\n  ): Promise<T> {\n    try {\n      const response = await fetch('https://walletconnect-api.grindery.com', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method,\n          params: params || [],\n        }),\n      });\n      const data = await response.json();\n      if (data.error) {\n        throw new WalletProviderError(data.error.message, data.error.code);\n      }\n      if (!data.result) {\n        throw WalletProviderErrors.NoResult;\n      }\n      return data.result;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Creates a provider error from an unknown error\n   * @protected\n   * @param {unknown} error Optional. Error object.\n   * @returns {WalletProviderError} The provider error\n   */\n  protected createProviderRpcError(error?: unknown): WalletProviderError {\n    let errorResponse: WalletProviderError;\n    if (error instanceof WalletProviderError) {\n      errorResponse = new WalletProviderError(\n        error.message || 'Unknown error',\n        error.code || 4900,\n        error.data\n      );\n    } else if (error instanceof Error) {\n      errorResponse = new WalletProviderError(\n        error.message || 'Unknown error',\n        4900,\n        error\n      );\n    } else {\n      errorResponse = new WalletProviderError('Unknown error', 4900, error);\n    }\n    return errorResponse;\n  }\n\n  /**\n   * @summary Injects the provider into the window object\n   * @private\n   * @returns {void}\n   */\n  private injectProvider(): void {\n    if (!window.ethereum) {\n      window.ethereum = this;\n    } else {\n      if (\n        window.ethereum.providers &&\n        Array.isArray(window.ethereum.providers)\n      ) {\n        window.ethereum.providers.push(this);\n      } else {\n        window.ethereum.providers = [window.ethereum, this];\n      }\n    }\n  }\n}\n","import {\n  GrinderyRpcMethodNames,\n  GrinderyRpcProviderRequestMethodNames,\n  ProviderEvents,\n  ProviderStorageKeys,\n} from '../enums';\nimport {\n  GrinderyRpcApiRequestResults,\n  GrinderyRpcProviderRequestResults,\n  ProviderInterface,\n  RequestArgumentsParams,\n} from '../types';\nimport { WalletProvider } from './WalletProvider';\nimport { WalletProviderErrors } from './WalletProviderError';\n\n/**\n * @summary The Grindery Wallet Ethereum Injected Provider Class.\n * @extends WalletProvider\n * @implements ProviderInterface\n */\nexport class GrinderyWalletProvider extends WalletProvider\n  implements ProviderInterface {\n  /**\n   * @summary Indicates that the provider is a Grindery Wallet.\n   */\n  public readonly isGrinderyWallet: boolean = true;\n\n  constructor() {\n    super();\n\n    this.registerProviderMethods({\n      [GrinderyRpcProviderRequestMethodNames.eth_requestAccounts]: {\n        sessionRequired: false,\n        execute: async (\n          params?: RequestArgumentsParams\n        ): Promise<GrinderyRpcProviderRequestResults.eth_requestAccounts> => {\n          if (this.isWalletConnected()) {\n            try {\n              return await this.request<\n                GrinderyRpcProviderRequestResults.eth_accounts\n              >({\n                method: GrinderyRpcProviderRequestMethodNames.eth_accounts,\n                params: params || [],\n              });\n            } catch (error) {\n              this.setStorageValue(ProviderStorageKeys.sessionId, '');\n              // skip failed request and continue with pairing\n            }\n          }\n          if (this.isWalletConnectionPending()) {\n            try {\n              const pairResult = await this.sendGrinderyRpcApiRequest<\n                GrinderyRpcApiRequestResults.checkout_waitForPairingResult\n              >(GrinderyRpcMethodNames.checkout_waitForPairingResult, {\n                pairingToken: this.getStorageValue(\n                  ProviderStorageKeys.pairingToken\n                ),\n              });\n\n              this.clearStorage();\n              this.setStorageValue(\n                ProviderStorageKeys.sessionId,\n                pairResult.session.sessionId\n              );\n\n              if (!pairResult.session.sessionId) {\n                throw WalletProviderErrors.PairingFailed;\n              }\n\n              return await this.request<\n                GrinderyRpcProviderRequestResults.eth_accounts\n              >({\n                method: GrinderyRpcProviderRequestMethodNames.eth_accounts,\n                params: params || [],\n              });\n            } catch (error) {\n              this.clearStorage();\n              // skip failed request and continue with pairing\n            }\n          }\n          try {\n            const result = await this.sendGrinderyRpcApiRequest<\n              GrinderyRpcApiRequestResults.checkout_requestPairing\n            >(GrinderyRpcMethodNames.checkout_requestPairing, {\n              appId: this.appId,\n            });\n\n            if (!result.pairingToken || !result.connectUrl) {\n              throw WalletProviderErrors.PairingFailed;\n            }\n\n            this.setStorageValue(\n              ProviderStorageKeys.pairingToken,\n              result.pairingToken\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.connectUrl,\n              result.connectUrl\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.connectUrlBrowser,\n              result.connectUrlBrowser\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.shortToken,\n              result.shortToken\n            );\n            this.emit(ProviderEvents.pair, {\n              shortToken: result.shortToken,\n              connectUrl: result.connectUrl,\n              connectUrlBrowser: result.connectUrlBrowser,\n            });\n            const pairResult = await this.sendGrinderyRpcApiRequest<\n              GrinderyRpcApiRequestResults.checkout_waitForPairingResult\n            >(GrinderyRpcMethodNames.checkout_waitForPairingResult, {\n              pairingToken: result.pairingToken,\n            });\n\n            this.setStorageValue(\n              ProviderStorageKeys.sessionId,\n              pairResult.session.sessionId\n            );\n\n            if (!pairResult.session.sessionId) {\n              throw WalletProviderErrors.PairingFailed;\n            }\n            this.setStorageValue(ProviderStorageKeys.pairingToken, '');\n            this.setStorageValue(ProviderStorageKeys.connectUrl, '');\n            this.setStorageValue(ProviderStorageKeys.connectUrlBrowser, '');\n            this.setStorageValue(ProviderStorageKeys.shortToken, '');\n\n            return await this.request({\n              method: GrinderyRpcProviderRequestMethodNames.eth_accounts,\n              params: params || [],\n            });\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.eth_accounts]: {\n        sessionRequired: true,\n        execute: async (\n          params?: RequestArgumentsParams\n        ): Promise<GrinderyRpcProviderRequestResults.eth_accounts> => {\n          try {\n            return this.setAccounts(\n              await this.sendAndWaitGrinderyRpcProviderRequest(\n                GrinderyRpcProviderRequestMethodNames.eth_accounts,\n                params ? (Array.isArray(params) ? params : [params]) : []\n              )\n            );\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.eth_sendTransaction]: {\n        sessionRequired: true,\n        execute: async (\n          params?: RequestArgumentsParams\n        ): Promise<GrinderyRpcProviderRequestResults.eth_sendTransaction> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest(\n            GrinderyRpcProviderRequestMethodNames.eth_sendTransaction,\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.personal_sign]: {\n        sessionRequired: true,\n        execute: async (\n          params?: Partial<RequestArgumentsParams>\n        ): Promise<GrinderyRpcProviderRequestResults.personal_sign> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest(\n            GrinderyRpcProviderRequestMethodNames.personal_sign,\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n    });\n\n    window.addEventListener('load', () => {\n      this.emit(ProviderEvents.connect, this.getChain());\n      this.restorePairing();\n      this.restoreSession();\n    });\n  }\n\n  /**\n   * @summary Restores the pairing process if pairing token is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restorePairing(): Promise<void> {\n    const pairingToken = this.getStorageValue(ProviderStorageKeys.pairingToken);\n    const sessionId = this.getStorageValue(ProviderStorageKeys.sessionId);\n    if (pairingToken && !sessionId) {\n      try {\n        const pairResult = await this.sendGrinderyRpcApiRequest<\n          GrinderyRpcApiRequestResults.checkout_waitForPairingResult\n        >(GrinderyRpcMethodNames.checkout_waitForPairingResult, {\n          pairingToken,\n        });\n\n        this.clearStorage();\n        this.setStorageValue(\n          ProviderStorageKeys.sessionId,\n          pairResult.session.sessionId\n        );\n\n        if (!pairResult.session.sessionId) {\n          throw WalletProviderErrors.PairingFailed;\n        }\n\n        const accounts = (\n          pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n        ).map(account =>\n          account.includes(':') ? account.split(':')[2] || '' : account\n        );\n        this.setAccounts(accounts);\n      } catch (error) {\n        this.setAccounts([]);\n        this.clearStorage();\n      }\n    }\n  }\n\n  /**\n   * @summary Restores the session if session Id is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restoreSession(): Promise<void> {\n    const pairingToken = this.getStorageValue(ProviderStorageKeys.pairingToken);\n    const sessionId = this.getStorageValue(ProviderStorageKeys.sessionId);\n    if (sessionId && !pairingToken) {\n      try {\n        await this.request<string[]>({\n          method: GrinderyRpcProviderRequestMethodNames.eth_requestAccounts,\n        });\n      } catch (error) {\n        this.setAccounts([]);\n        this.clearStorage();\n      }\n    }\n  }\n}\n","import {\n  GrinderyRpcProviderRequestMethodNames,\n  ProviderEvents,\n} from '../enums';\nimport { GrinderyRpcApiRequestResults, ProviderEvent } from '../types';\nimport { GrinderyWalletProvider } from '../provider/GrinderyWalletProvider';\n\n/**\n * @summary The Grindery Wallet SDK class\n * @since 0.1.0\n */\nexport class GrinderyWalletSDK {\n  /**\n   * @summary The provider instance\n   * @public\n   */\n  public provider: GrinderyWalletProvider;\n\n  constructor() {\n    this.provider = this.getWeb3Provider();\n    this.provider.on(ProviderEvents.pair, this.handlePairing);\n  }\n\n  /**\n   * @summary Checks if the provider is connected to the server\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return this.provider.isConnected();\n  }\n\n  /**\n   * @summary Checks if the provider is connected to the server and the Grindery Wallet\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return this.provider.isWalletConnected();\n  }\n\n  /**\n   * @summary Initiate connection to the Grindery Wallet\n   * @public\n   * @returns {Promise<string[]>} The array of ethereum addresses\n   * @since 0.1.0\n   */\n  public async connect(): Promise<string[]> {\n    return await this.provider.request({\n      method: GrinderyRpcProviderRequestMethodNames.eth_requestAccounts,\n    });\n  }\n\n  /**\n   * @summary Sends a transaction request to the Grindery Wallet\n   * @public\n   * @since 0.1.0\n   * @param {object} params The transaction parameters\n   * @param {string} params.to The recipient address\n   * @param {string} [params.value] The amount to send in wei\n   * @param {string} [params.data] The data to send\n   * @returns {Promise<string[]>} Array with transaction hash string\n   */\n  public async sendTransaction(params: {\n    to: string;\n    value?: string;\n    data?: string;\n  }): Promise<string[]> {\n    return await this.provider.request<string[]>({\n      method: GrinderyRpcProviderRequestMethodNames.eth_sendTransaction,\n      params: [params],\n    });\n  }\n\n  /**\n   * @summary Sends a personal signature request to the Grindery Wallet\n   * @public\n   * @since 0.1.0\n   * @param {string} message The message to sign\n   * @returns {Promise<string>} Signature string\n   */\n  public async signMessage(message: string): Promise<string> {\n    return await this.provider.request<string>({\n      method: GrinderyRpcProviderRequestMethodNames.personal_sign,\n      params: [message, this.provider.getAddress()],\n    });\n  }\n\n  /**\n   * @summary Adds a listener to the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public on(event: ProviderEvent, callback: Function) {\n    this.provider.on(event, callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public removeListener(event: ProviderEvent, callback: Function) {\n    this.provider.removeListener(event, callback);\n    return this;\n  }\n\n  /**\n   * @summary Gets the Grindery Wallet ethereum provider\n   * @returns {GrinderyWalletProvider} The Grindery Wallet ethereum provider\n   */\n  private getWeb3Provider(): GrinderyWalletProvider {\n    let provider = window.ethereum?.providers?.find(\n      (provider: GrinderyWalletProvider | unknown) =>\n        provider instanceof GrinderyWalletProvider && provider.isGrinderyWallet\n    );\n    if (\n      !provider &&\n      window.ethereum instanceof GrinderyWalletProvider &&\n      window.ethereum.isGrinderyWallet\n    ) {\n      provider = window.ethereum;\n    }\n    if (!provider) {\n      provider = new GrinderyWalletProvider();\n    }\n    return provider;\n  }\n\n  /**\n   * @summary Handles the pairing request, by opening the Grindery Wallet\n   * @private\n   * @param ProviderRequestPairingResult\n   * @returns {void}\n   */\n  private handlePairing({\n    shortToken,\n    connectUrlBrowser,\n  }: GrinderyRpcApiRequestResults.checkout_requestPairing): void {\n    const WebApp = window.Telegram?.WebApp;\n    const redirectUrl = `https://walletconnect.grindery.com/connect/wc?uri=${shortToken}`;\n    if (\n      WebApp &&\n      WebApp.openTelegramLink &&\n      WebApp.platform &&\n      WebApp.platform !== 'unknown'\n    ) {\n      WebApp.openTelegramLink(connectUrlBrowser);\n      if (WebApp.close) {\n        window.Telegram.WebApp.close();\n      }\n    } else {\n      window.open(redirectUrl, '_blank');\n    }\n  }\n}\n","import { GrinderyWalletSDK } from './sdk/GrinderyWalletSDK';\n\ndeclare global {\n  interface Window {\n    Telegram?: any;\n    ethereum?: any;\n    Grindery?: {\n      WalletSDK?: GrinderyWalletSDK;\n    };\n  }\n}\n\nfunction init() {\n  if (\n    !window.Grindery?.WalletSDK ||\n    !(window.Grindery.WalletSDK instanceof GrinderyWalletSDK)\n  ) {\n    window.Grindery = {\n      ...(window.Grindery || {}),\n      WalletSDK: new GrinderyWalletSDK(),\n    };\n  }\n}\n\n// Initialize the SDK when the page is loaded\ninit();\n"],"names":["ProviderEvents","ProviderStorageKeys","GrinderyRpcMethodNames","GrinderyRpcProviderRequestMethodNames","WalletProviderEventEmitter","events","Map","_proto","prototype","on","event","callback","has","set","get","push","removeListener","callbacks","filter","cb","emit","data","Array","_len","_key","arguments","console","log","forEach","apply","LOCALSTORAGE_KEY","WalletProviderLocalStorage","_WalletProviderEventE","_inheritsLoose","getStorageValue","key","value","getStorage","setStorageValue","storage","saveStorage","clearStorage","JSON","parse","localStorage","getItem","error","setItem","stringify","Error","WalletProviderError","_Error","message","code","_this","call","_wrapNativeSuper","WalletProviderErrors","PairingFailed","Disconnected","UnsupportedMethod","Unauthorized","NoResult","WalletProvider","_WalletProviderLocalS","document","title","injectProvider","isConnected","chainId","isWalletConnected","sessionId","isWalletConnectionPending","pairingToken","getChain","parseFloat","split","toString","getAddress","accounts","request","_request","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","method","params","_this$methods$method","_this$methods$method2","wrap","_callee$","_context","prev","next","disconnect","methods","sessionRequired","execute","abrupt","sent","t0","createProviderRpcError","stop","_x","sendAndWaitGrinderyRpcProviderRequest","_sendAndWaitGrinderyRpcProviderRequest","_callee2","timeout","_callee2$","_context2","sendGrinderyRpcProviderRequest","waitGrinderyRpcProviderRequest","requestToken","_x2","_x3","_x4","setAccounts","accountsChanged","registerProviderMethods","_sendGrinderyRpcProviderRequest","_callee3","_callee3$","_context3","sendGrinderyRpcApiRequest","checkout_request","scope","_x5","_x6","_waitGrinderyRpcProviderRequest","_callee4","_callee4$","_context4","checkout_waitForRequestResult","_x7","_x8","_sendGrinderyRpcApiRequest","_callee5","response","_callee5$","_context5","fetch","headers","body","jsonrpc","id","json","result","_x9","_x10","errorResponse","window","ethereum","providers","isArray","GrinderyWalletProvider","_WalletProvider","_this$registerProvide","eth_requestAccounts","_execute","pairResult","_pairResult","eth_accounts","checkout_waitForPairingResult","session","t1","checkout_requestPairing","appId","connectUrl","connectUrlBrowser","shortToken","pair","t2","_execute2","eth_sendTransaction","_execute3","personal_sign","_execute4","addEventListener","connect","restorePairing","restoreSession","_restorePairing","_pairResult$session","namespaces","map","account","includes","_restoreSession","_callee6","_callee6$","_context6","GrinderyWalletSDK","provider","getWeb3Provider","handlePairing","_connect","sendTransaction","_sendTransaction","signMessage","_signMessage","_window$ethereum","find","isGrinderyWallet","WebApp","_window$Telegram","Telegram","redirectUrl","openTelegramLink","platform","close","open","init","_window$Grindery","Grindery","WalletSDK","_extends"],"mappings":"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"}