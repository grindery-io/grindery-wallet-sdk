{"version":3,"file":"grindery-wallet-sdk.umd.production.min.js","sources":["../src/enums.ts","../src/provider/WalletProviderLocalStorage.ts","../src/provider/WalletProviderEventEmitter.ts","../src/provider/WalletProviderError.ts","../src/provider/GrinderyWalletProvider.ts","../src/provider/WalletProvider.ts","../src/sdk/GrinderyWalletSDK.ts","../src/index.ts"],"sourcesContent":["export enum ProviderEvents {\n  accountsChanged = 'accountsChanged',\n  pair = 'pair',\n  connect = 'connect',\n  disconnect = 'disconnect',\n  chainChanged = 'chainChanged',\n  message = 'message',\n}\n\nexport enum ProviderStorageKeys {\n  pairingToken = 'pairingToken',\n  sessionId = 'sessionId',\n  connectUrl = 'connectUrl',\n  connectUrlBrowser = 'connectUrlBrowser',\n  shortToken = 'shortToken',\n}\n\nexport enum GrinderyRpcMethodNames {\n  checkout_requestPairing = 'checkout_requestPairing',\n  checkout_waitForPairingResult = 'checkout_waitForPairingResult',\n  checkout_request = 'checkout_request',\n  checkout_waitForRequestResult = 'checkout_waitForRequestResult',\n}\n\nexport enum GrinderyRpcProviderRequestMethodNames {\n  eth_requestAccounts = 'eth_requestAccounts',\n  eth_accounts = 'eth_accounts',\n  personal_sign = 'personal_sign',\n  eth_sendTransaction = 'eth_sendTransaction',\n}\n","import { ProviderStorage, ProviderStorageKey } from '../types';\nimport { WalletProviderEventEmitter } from './WalletProviderEventEmitter';\n\nconst LOCALSTORAGE_KEY = 'GrinderyWalletProvider';\n\n/**\n * @summary A local storage class for the provider\n * @since 0.1.0\n * @extends WalletProviderEventEmitter\n */\nexport class WalletProviderLocalStorage extends WalletProviderEventEmitter {\n  /**\n   * @summary Gets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @returns {string} The value of the storage by the key\n   */\n  protected getStorageValue(key: ProviderStorageKey): string {\n    const value = this.getStorage()[key] || '';\n    return value;\n  }\n\n  /**\n   * @summary Sets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @param {string} value The value to set\n   * @returns {void}\n   */\n  protected setStorageValue(key: ProviderStorageKey, value: string): void {\n    const storage = this.getStorage();\n    storage[key] = value;\n    this.saveStorage(storage);\n  }\n\n  /**\n   * @summary Clears the storage\n   * @protected\n   * @returns {void}\n   */\n  protected clearStorage(): void {\n    this.saveStorage({});\n  }\n\n  /**\n   * @summary Gets the provider storage\n   * @returns {ProviderStorage} The provider storage\n   */\n  private getStorage(): ProviderStorage {\n    try {\n      return JSON.parse(\n        localStorage.getItem(LOCALSTORAGE_KEY) || '{}'\n      ) as ProviderStorage;\n    } catch (error) {\n      localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify({}));\n      throw new Error('Error parsing storage');\n    }\n  }\n\n  /**\n   * @summary Saves the provider storage\n   * @param {ProviderStorage} storage Provider storage object\n   */\n  private saveStorage(storage: ProviderStorage): void {\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(storage));\n  }\n}\n","import { ProviderEvent } from '../types';\n\n/**\n * @summary A class for emitting provider events\n * @since 0.1.0\n */\nexport class WalletProviderEventEmitter {\n  /**\n   * @summary A map of events and their listeners\n   * @public\n   */\n  public events: Map<ProviderEvent, Array<Function>>;\n\n  constructor() {\n    this.events = new Map();\n  }\n\n  /**\n   * @summary Adds a listener to the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public on(event: ProviderEvent, callback: Function) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event)!.push(callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public removeListener(event: ProviderEvent, callback: Function) {\n    if (this.events.has(event)) {\n      const callbacks = this.events.get(event)!.filter(cb => cb !== callback);\n      this.events.set(event, callbacks);\n    }\n    return this;\n  }\n\n  /**\n   * @summary Emits an event\n   * @public\n   * @param {string} event Event name\n   * @param data Event data\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  protected emit(event: ProviderEvent, ...data: any[]) {\n    if (this.events.has(event)) {\n      console.log('[Grindery.WalletSDK] > Event:', event, data);\n      this.events.get(event)!.forEach(callback => {\n        callback(...data);\n      });\n    }\n    return this;\n  }\n}\n","/**\n * @summary Error class for WalletProvider\n * @since 0.1.0\n * @extends Error\n */\nexport class WalletProviderError extends Error {\n  name: string = 'GrinderyWalletProviderError';\n  code?: number;\n  data?: unknown;\n\n  constructor(message: string, code?: number, data?: unknown) {\n    super(message);\n    this.code = code;\n    this.data = data;\n  }\n}\n\nexport const WalletProviderErrors = {\n  PairingFailed: new WalletProviderError('Pairing failed', 4900),\n  Disconnected: new WalletProviderError('Disconnected', 4900),\n  UnsupportedMethod: new WalletProviderError('Unsupported Method', 4200),\n  Unauthorized: new WalletProviderError('Unauthorized', 4900),\n  NoResult: new WalletProviderError('No result', 4900),\n};\n","import {\n  GrinderyRpcMethodNames,\n  GrinderyRpcProviderRequestMethodNames,\n  ProviderEvents,\n  ProviderStorageKeys,\n} from '../enums';\nimport {\n  ProviderInterface,\n  ProviderPairingResult,\n  ProviderRequestPairingResult,\n  RequestArgumentsParams,\n} from '../types';\nimport { WalletProvider } from './WalletProvider';\nimport { WalletProviderErrors } from './WalletProviderError';\n\n/**\n * @summary The Grindery Wallet Ethereum Injected Provider Class.\n * @extends WalletProvider\n * @implements ProviderInterface\n */\nexport class GrinderyWalletProvider extends WalletProvider\n  implements ProviderInterface {\n  /**\n   * @summary Indicates that the provider is a Grindery Wallet.\n   */\n  public readonly isGrinderyWallet: boolean = true;\n\n  constructor() {\n    super();\n\n    this.registerProviderMethods({\n      [GrinderyRpcProviderRequestMethodNames.eth_requestAccounts]: {\n        sessionRequired: false,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          if (this.isWalletConnected()) {\n            try {\n              const accounts = await this.request<string[]>({\n                method: GrinderyRpcProviderRequestMethodNames.eth_accounts,\n                params: params || [],\n              });\n              this.accounts = accounts;\n              this.emit(ProviderEvents.accountsChanged, { accounts });\n              return accounts;\n            } catch (error) {\n              this.setStorageValue(ProviderStorageKeys.sessionId, '');\n              // skip failed request and continue with pairing\n            }\n          }\n          if (this.isWalletConnectionPending()) {\n            try {\n              const pairResult = await this.sendGrinderyRpcApiRequest<\n                ProviderPairingResult\n              >(GrinderyRpcMethodNames.checkout_waitForPairingResult, {\n                pairingToken: this.getStorageValue(\n                  ProviderStorageKeys.pairingToken\n                ),\n              });\n\n              this.clearStorage();\n              this.setStorageValue(\n                ProviderStorageKeys.sessionId,\n                pairResult.session.sessionId\n              );\n\n              if (!pairResult.session.sessionId) {\n                throw WalletProviderErrors.PairingFailed;\n              }\n\n              const accounts = (\n                pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n              ).map(account =>\n                account.includes(':') ? account.split(':')[2] || '' : account\n              );\n              this.accounts = accounts;\n              this.emit(ProviderEvents.accountsChanged, { accounts });\n              return [];\n            } catch (error) {\n              this.clearStorage();\n              // skip failed request and continue with pairing\n            }\n          }\n          try {\n            const result = await this.sendGrinderyRpcApiRequest<\n              ProviderRequestPairingResult\n            >(GrinderyRpcMethodNames.checkout_requestPairing, {\n              appId: this.appId,\n            });\n\n            if (!result.pairingToken || !result.connectUrl) {\n              throw WalletProviderErrors.PairingFailed;\n            }\n\n            this.setStorageValue(\n              ProviderStorageKeys.pairingToken,\n              result.pairingToken\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.connectUrl,\n              result.connectUrl\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.connectUrlBrowser,\n              result.connectUrlBrowser\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.shortToken,\n              result.shortToken\n            );\n            this.emit(ProviderEvents.pair, {\n              shortToken: result.shortToken,\n              connectUrl: result.connectUrl,\n              connectUrlBrowser: result.connectUrlBrowser,\n            });\n            const pairResult = await this.sendGrinderyRpcApiRequest<\n              ProviderPairingResult\n            >(GrinderyRpcMethodNames.checkout_waitForPairingResult, {\n              pairingToken: result.pairingToken,\n            });\n\n            this.setStorageValue(\n              ProviderStorageKeys.sessionId,\n              pairResult.session.sessionId\n            );\n\n            if (!pairResult.session.sessionId) {\n              throw WalletProviderErrors.PairingFailed;\n            }\n            this.setStorageValue(ProviderStorageKeys.pairingToken, '');\n            this.setStorageValue(ProviderStorageKeys.connectUrl, '');\n            this.setStorageValue(ProviderStorageKeys.connectUrlBrowser, '');\n            this.setStorageValue(ProviderStorageKeys.shortToken, '');\n            const accounts = (\n              pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n            ).map(account =>\n              account.includes(':') ? account.split(':')[2] || '' : account\n            );\n            this.accounts = accounts;\n            this.emit(ProviderEvents.accountsChanged, { accounts });\n            return accounts;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.eth_accounts]: {\n        sessionRequired: true,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          try {\n            const accounts = await this.sendAndWaitGrinderyRpcProviderRequest<\n              string[]\n            >(\n              GrinderyRpcProviderRequestMethodNames.eth_accounts,\n              params ? (Array.isArray(params) ? params : [params]) : []\n            );\n            this.accounts = accounts;\n            this.emit(ProviderEvents.accountsChanged, { accounts });\n            return accounts;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.eth_sendTransaction]: {\n        sessionRequired: true,\n        execute: async (params?: RequestArgumentsParams): Promise<string[]> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest<string[]>(\n            GrinderyRpcProviderRequestMethodNames.eth_sendTransaction,\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.personal_sign]: {\n        sessionRequired: true,\n        execute: async (\n          params?: Partial<RequestArgumentsParams>\n        ): Promise<string> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest(\n            GrinderyRpcProviderRequestMethodNames.personal_sign,\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n    });\n\n    window.addEventListener('load', () => {\n      this.emit(ProviderEvents.connect, { chainId: this.getChain() });\n      this.restorePairing();\n      this.restoreSession();\n    });\n  }\n\n  /**\n   * @summary Restores the pairing process if pairing token is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restorePairing(): Promise<void> {\n    const pairingToken = this.getStorageValue(ProviderStorageKeys.pairingToken);\n    const sessionId = this.getStorageValue(ProviderStorageKeys.sessionId);\n    if (pairingToken && !sessionId) {\n      try {\n        const pairResult = await this.sendGrinderyRpcApiRequest<\n          ProviderPairingResult\n        >(GrinderyRpcMethodNames.checkout_waitForPairingResult, {\n          pairingToken,\n        });\n\n        this.clearStorage();\n        this.setStorageValue(\n          ProviderStorageKeys.sessionId,\n          pairResult.session.sessionId\n        );\n\n        if (!pairResult.session.sessionId) {\n          throw WalletProviderErrors.PairingFailed;\n        }\n\n        const accounts = (\n          pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n        ).map(account =>\n          account.includes(':') ? account.split(':')[2] || '' : account\n        );\n        this.accounts = accounts;\n        this.emit(ProviderEvents.accountsChanged, { accounts });\n      } catch (error) {\n        this.accounts = [];\n        this.clearStorage();\n      }\n    }\n  }\n\n  /**\n   * @summary Restores the session if session Id is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restoreSession(): Promise<void> {\n    const pairingToken = this.getStorageValue(ProviderStorageKeys.pairingToken);\n    const sessionId = this.getStorageValue(ProviderStorageKeys.sessionId);\n    if (sessionId && !pairingToken) {\n      try {\n        await this.request<string[]>({\n          method: GrinderyRpcProviderRequestMethodNames.eth_requestAccounts,\n        });\n      } catch (error) {\n        this.accounts = [];\n        this.clearStorage();\n      }\n    }\n  }\n}\n","import { WalletProviderLocalStorage } from './WalletProviderLocalStorage';\nimport {\n  Address,\n  ChainId,\n  GrinderyRpcMethodName,\n  GrinderyRpcProviderRequestMethodName,\n  ProviderMethods,\n  ProviderRequestResult,\n  RequestArguments,\n  RequestArgumentsParams,\n  RequestToken,\n} from '../types';\nimport {\n  WalletProviderError,\n  WalletProviderErrors,\n} from './WalletProviderError';\nimport {\n  GrinderyRpcMethodNames,\n  ProviderEvents,\n  ProviderStorageKeys,\n} from '../enums';\n\n/**\n * @summary The base wallet provider class\n * @since 0.1.0\n * @extends WalletProviderLocalStorage\n */\nexport class WalletProvider extends WalletProviderLocalStorage {\n  constructor() {\n    super();\n\n    this.injectProvider();\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return !!this.chainId;\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return (\n      this.isConnected() &&\n      !!this.getStorageValue(ProviderStorageKeys.sessionId)\n    );\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet pairing is in progress (pending).\n   */\n  public isWalletConnectionPending(): boolean {\n    return (\n      this.isConnected() &&\n      !!this.getStorageValue(ProviderStorageKeys.pairingToken)\n    );\n  }\n\n  /**\n   * @summary Gets the connected chain ID in hex format\n   * @public\n   * @returns {ChainId} The chain ID in hex format\n   */\n  public getChain(): ChainId {\n    return `0x${parseFloat(this.chainId.split(':')[1]).toString(16)}`;\n  }\n\n  /**\n   * @summary Gets the connected user's wallet address\n   * @public\n   * @returns {Address} The ethereum wallet address\n   */\n  public getAddress(): Address {\n    return this.accounts[0] || '';\n  }\n\n  /**\n   * @summary Sends a request to the provider\n   * @public\n   * @param {RequestArguments} args Request arguments\n   * @param {string} args.method The method name\n   * @param {RequestArgumentsParams} args.params The method parameters\n   * @returns {T} The result of the request\n   */\n  public async request<T>({ method, params }: RequestArguments): Promise<T> {\n    if (!this.chainId) {\n      this.emit(ProviderEvents.disconnect, WalletProviderErrors.Disconnected);\n      throw WalletProviderErrors.Disconnected;\n    }\n    if (!this.methods) {\n      throw WalletProviderErrors.UnsupportedMethod;\n    }\n    if (!this.methods[method]) {\n      throw WalletProviderErrors.UnsupportedMethod;\n    }\n\n    try {\n      if (this.methods[method].sessionRequired && !this.isWalletConnected()) {\n        throw WalletProviderErrors.Unauthorized;\n      }\n\n      return (await this.methods[method].execute(params)) as T;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API and waits for the result.\n   * @public\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  public async sendAndWaitGrinderyRpcProviderRequest<T>(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[],\n    timeout?: number\n  ): Promise<T> {\n    const request = await this.sendGrinderyRpcProviderRequest(method, params);\n    return await this.waitGrinderyRpcProviderRequest(\n      request.requestToken,\n      timeout\n    );\n  }\n\n  /**\n   * @summary The application ID.\n   * @protected\n   */\n  protected appId: string = document.title || 'Grindery Wallet Provider';\n\n  /**\n   * @summary The chain ID in CAIP-2 format; e.g. \"eip155:1\".\n   * @protected\n   */\n  protected chainId: ChainId = 'eip155:137';\n\n  /**\n   * @summary The list of supported provider methods.\n   * @protected\n   */\n  protected methods?: ProviderMethods;\n\n  /**\n   * @summary The user's wallet addresses list.\n   * @protected\n   */\n  protected accounts: Address[] = [];\n\n  /**\n   * @summary Registers the provider methods.\n   * @protected\n   * @param {ProviderMethods} methods A map of supported provider methods.\n   * @returns {void}\n   */\n  protected registerProviderMethods(methods: ProviderMethods): void {\n    this.methods = methods;\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API.\n   * @protected\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @returns {ProviderRequestResult} The request token to use in the `waitGrinderyRpcProviderRequest` method\n   */\n  protected async sendGrinderyRpcProviderRequest(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[]\n  ): Promise<ProviderRequestResult> {\n    if (!this.getStorageValue(ProviderStorageKeys.sessionId)) {\n      throw WalletProviderErrors.Unauthorized;\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<ProviderRequestResult>(\n        GrinderyRpcMethodNames.checkout_request,\n        {\n          sessionId: this.getStorageValue(ProviderStorageKeys.sessionId),\n          scope: this.chainId,\n          request: {\n            method,\n            params,\n          },\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Waits for the result of the provider request.\n   * @protected\n   * @param {RequestToken} requestToken A token to identify provider request. Recieved in the results of `sendGrinderyRpcProviderRequest` method.\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  protected async waitGrinderyRpcProviderRequest<T>(\n    requestToken: RequestToken,\n    timeout?: number\n  ): Promise<T> {\n    if (!this.getStorageValue(ProviderStorageKeys.sessionId)) {\n      throw WalletProviderErrors.Unauthorized;\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<T>(\n        GrinderyRpcMethodNames.checkout_waitForRequestResult,\n        {\n          requestToken,\n          timeout,\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a request to the Grindery Walletconnect RPC API.\n   * @protected\n   * @param {GrinderyRpcMethodName} method Request method name\n   * @param {RequestArgumentsParams} params Request parameters\n   * @returns {T} The result of the request\n   */\n  protected async sendGrinderyRpcApiRequest<T>(\n    method: GrinderyRpcMethodName,\n    params?: RequestArgumentsParams\n  ): Promise<T> {\n    try {\n      const response = await fetch('https://walletconnect-api.grindery.com', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method,\n          params: params || [],\n        }),\n      });\n      const data = await response.json();\n      if (data.error) {\n        throw new WalletProviderError(data.error.message, data.error.code);\n      }\n      if (!data.result) {\n        throw WalletProviderErrors.NoResult;\n      }\n      return data.result;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Creates a provider error from an unknown error\n   * @protected\n   * @param {unknown} error Optional. Error object.\n   * @returns {WalletProviderError} The provider error\n   */\n  protected createProviderRpcError(error?: unknown): WalletProviderError {\n    let errorResponse: WalletProviderError;\n    if (error instanceof WalletProviderError) {\n      errorResponse = new WalletProviderError(\n        error.message || 'Unknown error',\n        error.code || 4900,\n        error.data\n      );\n    } else if (error instanceof Error) {\n      errorResponse = new WalletProviderError(\n        error.message || 'Unknown error',\n        4900,\n        error\n      );\n    } else {\n      errorResponse = new WalletProviderError('Unknown error', 4900, error);\n    }\n    return errorResponse;\n  }\n\n  /**\n   * @summary Injects the provider into the window object\n   * @private\n   * @returns {void}\n   */\n  private injectProvider(): void {\n    if (!window.ethereum) {\n      window.ethereum = this;\n    } else {\n      if (\n        window.ethereum.providers &&\n        Array.isArray(window.ethereum.providers)\n      ) {\n        window.ethereum.providers.push(this);\n      } else {\n        window.ethereum.providers = [window.ethereum, this];\n      }\n    }\n  }\n}\n","import {\n  GrinderyRpcProviderRequestMethodNames,\n  ProviderEvents,\n} from '../enums';\nimport { ProviderEvent, ProviderRequestPairingResult } from '../types';\nimport { GrinderyWalletProvider } from '../provider/GrinderyWalletProvider';\n\n/**\n * @summary The Grindery Wallet SDK class\n * @since 0.1.0\n */\nexport class GrinderyWalletSDK {\n  /**\n   * @summary The provider instance\n   * @public\n   */\n  public provider: GrinderyWalletProvider;\n\n  constructor() {\n    this.provider = this.getWeb3Provider();\n    this.provider.on(ProviderEvents.pair, this.handlePairing);\n  }\n\n  /**\n   * @summary Checks if the provider is connected to the server\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return this.provider.isConnected();\n  }\n\n  /**\n   * @summary Checks if the provider is connected to the server and the Grindery Wallet\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return this.provider.isWalletConnected();\n  }\n\n  /**\n   * @summary Initiate connection to the Grindery Wallet\n   * @public\n   * @returns {Promise<string[]>} The array of ethereum addresses\n   * @since 0.1.0\n   */\n  public async connect(): Promise<string[]> {\n    return await this.provider.request({\n      method: GrinderyRpcProviderRequestMethodNames.eth_requestAccounts,\n    });\n  }\n\n  /**\n   * @summary Sends a transaction request to the Grindery Wallet\n   * @public\n   * @since 0.1.0\n   * @param {object} params The transaction parameters\n   * @param {string} params.to The recipient address\n   * @param {string} [params.value] The amount to send in wei\n   * @param {string} [params.data] The data to send\n   * @returns {Promise<string[]>} Array with transaction hash string\n   */\n  public async sendTransaction(params: {\n    to: string;\n    value?: string;\n    data?: string;\n  }): Promise<string[]> {\n    return await this.provider.request<string[]>({\n      method: GrinderyRpcProviderRequestMethodNames.eth_sendTransaction,\n      params: [params],\n    });\n  }\n\n  /**\n   * @summary Sends a personal signature request to the Grindery Wallet\n   * @public\n   * @since 0.1.0\n   * @param {string} message The message to sign\n   * @returns {Promise<string>} Signature string\n   */\n  public async signMessage(message: string): Promise<string> {\n    return await this.provider.request<string>({\n      method: GrinderyRpcProviderRequestMethodNames.personal_sign,\n      params: [message, this.provider.getAddress()],\n    });\n  }\n\n  /**\n   * @summary Adds a listener to the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public on(event: ProviderEvent, callback: Function) {\n    this.provider.on(event, callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public removeListener(event: ProviderEvent, callback: Function) {\n    this.provider.removeListener(event, callback);\n    return this;\n  }\n\n  /**\n   * @summary Gets the Grindery Wallet ethereum provider\n   * @returns {GrinderyWalletProvider} The Grindery Wallet ethereum provider\n   */\n  private getWeb3Provider(): GrinderyWalletProvider {\n    let provider = window.ethereum?.providers?.find(\n      (provider: GrinderyWalletProvider | unknown) =>\n        provider instanceof GrinderyWalletProvider && provider.isGrinderyWallet\n    );\n    if (\n      !provider &&\n      window.ethereum instanceof GrinderyWalletProvider &&\n      window.ethereum.isGrinderyWallet\n    ) {\n      provider = window.ethereum;\n    }\n    if (!provider) {\n      provider = new GrinderyWalletProvider();\n    }\n    return provider;\n  }\n\n  /**\n   * @summary Handles the pairing request, by opening the Grindery Wallet\n   * @private\n   * @param ProviderRequestPairingResult\n   * @returns {void}\n   */\n  private handlePairing({\n    shortToken,\n    connectUrlBrowser,\n  }: ProviderRequestPairingResult): void {\n    const WebApp = window.Telegram?.WebApp;\n    const redirectUrl = `https://walletconnect.grindery.com/connect/wc?uri=${shortToken}`;\n    if (\n      WebApp &&\n      WebApp.openTelegramLink &&\n      WebApp.platform &&\n      WebApp.platform !== 'unknown'\n    ) {\n      WebApp.openTelegramLink(connectUrlBrowser);\n      if (WebApp.close) {\n        window.Telegram.WebApp.close();\n      }\n    } else {\n      window.open(redirectUrl, '_blank');\n    }\n  }\n}\n","import { GrinderyWalletSDK } from './sdk/GrinderyWalletSDK';\n\ndeclare global {\n  interface Window {\n    Telegram?: any;\n    ethereum?: any;\n    Grindery?: {\n      WalletSDK?: GrinderyWalletSDK;\n    };\n  }\n}\n\nfunction init() {\n  if (\n    !window.Grindery?.WalletSDK ||\n    !(window.Grindery.WalletSDK instanceof GrinderyWalletSDK)\n  ) {\n    window.Grindery = {\n      ...(window.Grindery || {}),\n      WalletSDK: new GrinderyWalletSDK(),\n    };\n  }\n}\n\n// Initialize the SDK when the page is loaded\ninit();\n"],"names":["ProviderEvents","ProviderStorageKeys","GrinderyRpcMethodNames","GrinderyRpcProviderRequestMethodNames","WalletProviderLocalStorage","_WalletProviderEventE","apply","arguments","_inheritsLoose","_proto","prototype","getStorageValue","key","this","getStorage","setStorageValue","value","storage","saveStorage","clearStorage","JSON","parse","localStorage","getItem","error","setItem","stringify","Error","WalletProviderEventEmitter","events","Map","on","event","callback","has","set","get","push","removeListener","callbacks","filter","cb","emit","data","Array","_len","_key","console","log","forEach","WalletProviderError","_Error","message","code","_this","call","_wrapNativeSuper","WalletProviderErrors","PairingFailed","Disconnected","UnsupportedMethod","Unauthorized","NoResult","GrinderyWalletProvider","_WalletProvider","_execute4","_execute3","_execute2","_execute","registerProviderMethods","_this$registerProvide","eth_requestAccounts","sessionRequired","execute","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","accounts","_pairResult$session","pairResult","_accounts","_pairResult$session2","result","_pairResult","_accounts2","wrap","_context","prev","next","isWalletConnected","request","method","eth_accounts","sent","accountsChanged","abrupt","t0","sessionId","isWalletConnectionPending","sendGrinderyRpcApiRequest","checkout_waitForPairingResult","pairingToken","session","namespaces","map","account","includes","split","t1","checkout_requestPairing","appId","connectUrl","connectUrlBrowser","shortToken","pair","t2","createProviderRpcError","stop","_x","_callee2","_context2","sendAndWaitGrinderyRpcProviderRequest","isArray","_x2","eth_sendTransaction","_callee3","_context3","_x3","personal_sign","_callee4","_context4","_x4","window","addEventListener","connect","chainId","getChain","restorePairing","restoreSession","_restorePairing","_callee5","_pairResult$session3","_context5","_restoreSession","_callee6","_context6","_WalletProviderLocalS","WalletProvider","document","title","injectProvider","isConnected","parseFloat","toString","getAddress","_request","_ref","disconnect","methods","_sendAndWaitGrinderyRpcProviderRequest","timeout","sendGrinderyRpcProviderRequest","waitGrinderyRpcProviderRequest","requestToken","_sendGrinderyRpcProviderRequest","checkout_request","scope","_x5","_x6","_waitGrinderyRpcProviderRequest","checkout_waitForRequestResult","_x7","_x8","_sendGrinderyRpcApiRequest","response","fetch","headers","Content-Type","body","jsonrpc","id","json","_x9","_x10","ethereum","providers","GrinderyWalletSDK","provider","getWeb3Provider","handlePairing","_connect","sendTransaction","_sendTransaction","signMessage","_signMessage","_window$ethereum","find","isGrinderyWallet","WebApp","_window$Telegram","Telegram","redirectUrl","openTelegramLink","platform","close","open","_window$Grindery","Grindery","WalletSDK","_extends"],"mappings":"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"}