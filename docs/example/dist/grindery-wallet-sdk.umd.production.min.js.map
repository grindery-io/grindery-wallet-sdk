{"version":3,"file":"grindery-wallet-sdk.umd.production.min.js","sources":["../src/enums.ts","../src/utils/uuid.ts","../src/provider/WalletProviderLocalStorage.ts","../src/provider/WalletProviderEventEmitter.ts","../src/provider/WalletProviderError.ts","../src/provider/GrinderyWalletProvider.ts","../src/provider/WalletProvider.ts","../src/sdk/GrinderyWalletSDK.ts","../src/index.ts","../src/utils/getAppId.ts"],"sourcesContent":["export enum ProviderEvents {\n  accountsChanged = 'accountsChanged',\n  pair = 'pair',\n  connect = 'connect',\n  disconnect = 'disconnect',\n  chainChanged = 'chainChanged',\n  message = 'message',\n}\n\nexport enum ProviderStorageKeys {\n  pairingToken = 'pairingToken',\n  sessionId = 'sessionId',\n  connectUrl = 'connectUrl',\n  connectUrlBrowser = 'connectUrlBrowser',\n  shortToken = 'shortToken',\n  clientId = 'clientId',\n}\n\n/**\n * @summary The Grindery RPC API method names\n */\nexport enum GrinderyRpcMethodNames {\n  requestPairing = 'requestPairing',\n  waitForPairingResult = 'waitForPairingResult',\n  request = 'request',\n  waitForRequestResult = 'waitForRequestResult',\n  'disconnect' = 'disconnect',\n}\n\n/**\n * @summary The Grindery wallet provider method names\n */\nexport enum GrinderyRpcProviderRequestMethodNames {\n  eth_requestAccounts = 'eth_requestAccounts',\n  eth_accounts = 'eth_accounts',\n  personal_sign = 'personal_sign',\n  eth_sendTransaction = 'eth_sendTransaction',\n  gws_disconnect = 'gws_disconnect',\n}\n","/**\n * @summary Generates a Version 4 (pseudorandom) UUID\n * @returns {string} The UUID\n */\nexport const uuid = (): string => {\n  let d = '';\n  while (d.length < 32)\n    d += Math.random()\n      .toString(16)\n      .substr(2);\n  const vr = ((parseInt(d.substr(16, 1), 16) & 0x3) | 0x8).toString(16);\n  return `${d.substr(0, 8)}-${d.substr(8, 4)}-4${d.substr(\n    13,\n    3\n  )}-${vr}${d.substr(17, 3)}-${d.substr(20, 12)}`;\n};\n","import { ProviderStorage, ProviderStorageKey } from '../types';\nimport { uuid } from '../utils/uuid';\nimport { WalletProviderEventEmitter } from './WalletProviderEventEmitter';\n\nconst LOCALSTORAGE_KEY = 'GrinderyWalletProvider';\n\n/**\n * @summary A local storage class for the provider\n * @since 0.1.0\n * @extends WalletProviderEventEmitter\n */\nexport class WalletProviderLocalStorage extends WalletProviderEventEmitter {\n  /**\n   * @summary Gets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @returns {string} The value of the storage by the key\n   */\n  protected getStorageValue(key: ProviderStorageKey): string {\n    const value = this.getStorage()[key] || '';\n    return value;\n  }\n\n  /**\n   * @summary Sets the value of the storage by the key\n   * @protected\n   * @param {ProviderStorageKey} key Provider storage key\n   * @param {string} value The value to set\n   * @returns {void}\n   */\n  protected setStorageValue(key: ProviderStorageKey, value: string): string {\n    const storage = this.getStorage();\n    storage[key] = value;\n    this.saveStorage(storage);\n    return value;\n  }\n\n  /**\n   * @summary Clears the storage\n   * @protected\n   * @returns {void}\n   */\n  protected clearStorage(): void {\n    this.saveStorage({\n      clientId: this.getStorage().clientId || uuid(),\n    });\n  }\n\n  /**\n   * @summary Gets the provider storage\n   * @returns {ProviderStorage} The provider storage\n   */\n  private getStorage(): ProviderStorage {\n    try {\n      return JSON.parse(\n        localStorage.getItem(LOCALSTORAGE_KEY) || '{}'\n      ) as ProviderStorage;\n    } catch (error) {\n      localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify({}));\n      throw new Error('Error parsing storage');\n    }\n  }\n\n  /**\n   * @summary Saves the provider storage\n   * @param {ProviderStorage} storage Provider storage object\n   */\n  private saveStorage(storage: ProviderStorage): void {\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(storage));\n  }\n}\n","import { ProviderEvent } from '../types';\n\n/**\n * @summary A class for emitting provider events\n * @since 0.1.0\n */\nexport class WalletProviderEventEmitter {\n  /**\n   * @summary A map of events and their listeners\n   * @public\n   */\n  public events: Map<ProviderEvent, Array<Function>>;\n\n  constructor() {\n    this.events = new Map();\n  }\n\n  /**\n   * @summary Adds a listener to the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public on(event: ProviderEvent, callback: Function) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event)!.push(callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public removeListener(event: ProviderEvent, callback: Function) {\n    if (this.events.has(event)) {\n      const callbacks = this.events.get(event)!.filter(cb => cb !== callback);\n      this.events.set(event, callbacks);\n    }\n    return this;\n  }\n\n  /**\n   * @summary Emits an event\n   * @public\n   * @param {string} event Event name\n   * @param data Event data\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  protected emit(event: ProviderEvent, ...data: any[]) {\n    if (this.events.has(event)) {\n      console.log('[Grindery.WalletSDK] > Event:', event, data[0]);\n      this.events.get(event)!.forEach(callback => {\n        callback(...data);\n      });\n    }\n    return this;\n  }\n}\n","/**\n * @summary Error class for WalletProvider\n * @since 0.1.0\n * @extends Error\n */\nexport class WalletProviderError extends Error {\n  name: string = 'GrinderyWalletProviderError';\n  code?: number;\n  data?: unknown;\n\n  constructor(message: string, code?: number, data?: unknown) {\n    super(message);\n    this.code = code;\n    this.data = data;\n  }\n}\n\nexport const WalletProviderErrors = {\n  PairingFailed: new WalletProviderError('Pairing failed', 4900),\n  Disconnected: new WalletProviderError('Disconnected', 4900),\n  UnsupportedMethod: new WalletProviderError('Unsupported Method', 4200),\n  Unauthorized: new WalletProviderError('Unauthorized', 4900),\n  NoResult: new WalletProviderError('No result', 4900),\n  NoAppId: new WalletProviderError('App ID is required', 4900),\n};\n","import {\n  GrinderyRpcMethodNames,\n  GrinderyRpcProviderRequestMethodNames,\n  ProviderEvents,\n  ProviderStorageKeys,\n} from '../enums';\nimport {\n  GrinderyRpcApiRequestResults,\n  GrinderyRpcProviderRequestResults,\n  ProviderInterface,\n  RequestArgumentsParams,\n} from '../types';\nimport { WalletProvider } from './WalletProvider';\nimport { WalletProviderErrors } from './WalletProviderError';\n\n/**\n * @summary The Grindery Wallet Ethereum Injected Provider Class.\n * @extends WalletProvider\n * @implements ProviderInterface\n */\nexport class GrinderyWalletProvider extends WalletProvider\n  implements ProviderInterface {\n  /**\n   * @summary Indicates that the provider is a Grindery Wallet.\n   */\n  public readonly isGrinderyWallet: boolean = true;\n\n  constructor() {\n    super();\n\n    this.registerProviderMethods({\n      [GrinderyRpcProviderRequestMethodNames.eth_requestAccounts]: {\n        sessionRequired: false,\n        execute: async (\n          params?: RequestArgumentsParams\n        ): Promise<GrinderyRpcProviderRequestResults.eth_requestAccounts> => {\n          if (this.isWalletConnected()) {\n            try {\n              return await this.request<\n                GrinderyRpcProviderRequestResults.eth_accounts\n              >({\n                method: GrinderyRpcProviderRequestMethodNames.eth_accounts,\n                params: params || [],\n              });\n            } catch (error) {\n              this.setStorageValue(ProviderStorageKeys.sessionId, '');\n              // skip failed request and continue with pairing\n            }\n          }\n          if (this.isWalletConnectionPending()) {\n            try {\n              const pairResult = await this.sendGrinderyRpcApiRequest<\n                GrinderyRpcApiRequestResults.waitForPairingResult\n              >(GrinderyRpcMethodNames.waitForPairingResult, {\n                pairingToken: this.getStorageValue(\n                  ProviderStorageKeys.pairingToken\n                ),\n              });\n\n              this.clearStorage();\n              this.setStorageValue(\n                ProviderStorageKeys.sessionId,\n                pairResult.session.sessionId\n              );\n\n              if (!pairResult.session.sessionId) {\n                throw WalletProviderErrors.PairingFailed;\n              }\n\n              return await this.request<\n                GrinderyRpcProviderRequestResults.eth_accounts\n              >({\n                method: GrinderyRpcProviderRequestMethodNames.eth_accounts,\n                params: params || [],\n              });\n            } catch (error) {\n              this.clearStorage();\n              // skip failed request and continue with pairing\n            }\n          }\n          try {\n            const result = await this.sendGrinderyRpcApiRequest<\n              GrinderyRpcApiRequestResults.requestPairing\n            >(GrinderyRpcMethodNames.requestPairing, {\n              appId: this.appId,\n              clientId: this.clientId,\n            });\n\n            if (!result.pairingToken || !result.connectUrl) {\n              throw WalletProviderErrors.PairingFailed;\n            }\n\n            this.setStorageValue(\n              ProviderStorageKeys.pairingToken,\n              result.pairingToken\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.connectUrl,\n              result.connectUrl\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.connectUrlBrowser,\n              result.connectUrlBrowser\n            );\n            this.setStorageValue(\n              ProviderStorageKeys.shortToken,\n              result.shortToken\n            );\n            this.emit(ProviderEvents.pair, {\n              shortToken: result.shortToken,\n              connectUrl: result.connectUrl,\n              connectUrlBrowser: result.connectUrlBrowser,\n            });\n            const pairResult = await this.sendGrinderyRpcApiRequest<\n              GrinderyRpcApiRequestResults.waitForPairingResult\n            >(GrinderyRpcMethodNames.waitForPairingResult, {\n              pairingToken: result.pairingToken,\n            });\n\n            this.setStorageValue(\n              ProviderStorageKeys.sessionId,\n              pairResult.session.sessionId\n            );\n\n            if (!pairResult.session.sessionId) {\n              throw WalletProviderErrors.PairingFailed;\n            }\n            this.setStorageValue(ProviderStorageKeys.pairingToken, '');\n            this.setStorageValue(ProviderStorageKeys.connectUrl, '');\n            this.setStorageValue(ProviderStorageKeys.connectUrlBrowser, '');\n            this.setStorageValue(ProviderStorageKeys.shortToken, '');\n\n            return await this.request({\n              method: GrinderyRpcProviderRequestMethodNames.eth_accounts,\n              params: params || [],\n            });\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.eth_accounts]: {\n        sessionRequired: true,\n        execute: async (\n          params?: RequestArgumentsParams\n        ): Promise<GrinderyRpcProviderRequestResults.eth_accounts> => {\n          try {\n            return this.setAccounts(\n              await this.sendAndWaitGrinderyRpcProviderRequest(\n                GrinderyRpcProviderRequestMethodNames.eth_accounts,\n                params ? (Array.isArray(params) ? params : [params]) : []\n              )\n            );\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.eth_sendTransaction]: {\n        sessionRequired: true,\n        execute: async (\n          params?: RequestArgumentsParams\n        ): Promise<GrinderyRpcProviderRequestResults.eth_sendTransaction> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest(\n            GrinderyRpcProviderRequestMethodNames.eth_sendTransaction,\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.personal_sign]: {\n        sessionRequired: true,\n        execute: async (\n          params?: Partial<RequestArgumentsParams>\n        ): Promise<GrinderyRpcProviderRequestResults.personal_sign> => {\n          return await this.sendAndWaitGrinderyRpcProviderRequest(\n            GrinderyRpcProviderRequestMethodNames.personal_sign,\n            params ? (Array.isArray(params) ? params : [params]) : []\n          );\n        },\n      },\n      [GrinderyRpcProviderRequestMethodNames.gws_disconnect]: {\n        sessionRequired: true,\n        execute: async (): Promise<GrinderyRpcApiRequestResults.disconnect> => {\n          try {\n            const result = await this.sendGrinderyRpcApiRequest<\n              GrinderyRpcApiRequestResults.disconnect\n            >(GrinderyRpcMethodNames.disconnect, {\n              sessionToken: this.getStorageValue(ProviderStorageKeys.sessionId),\n            });\n            this.emit(\n              ProviderEvents.disconnect,\n              WalletProviderErrors.Disconnected\n            );\n            this.clearStorage();\n            this.setAccounts([]);\n            return result;\n          } catch (error) {\n            throw this.createProviderRpcError(error);\n          }\n        },\n      },\n    });\n\n    window.addEventListener('load', () => {\n      this.emit(ProviderEvents.connect, this.getChain());\n      this.restorePairing();\n      this.restoreSession();\n    });\n  }\n\n  /**\n   * @summary Restores the pairing process if pairing token is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restorePairing(): Promise<void> {\n    const pairingToken = this.getStorageValue(ProviderStorageKeys.pairingToken);\n    const sessionId = this.getStorageValue(ProviderStorageKeys.sessionId);\n    if (pairingToken && !sessionId) {\n      try {\n        const pairResult = await this.sendGrinderyRpcApiRequest<\n          GrinderyRpcApiRequestResults.waitForPairingResult\n        >(GrinderyRpcMethodNames.waitForPairingResult, {\n          pairingToken,\n        });\n\n        this.clearStorage();\n        this.setStorageValue(\n          ProviderStorageKeys.sessionId,\n          pairResult.session.sessionId\n        );\n\n        if (!pairResult.session.sessionId) {\n          throw WalletProviderErrors.PairingFailed;\n        }\n\n        const accounts = (\n          pairResult.session?.namespaces?.[`eip155`]?.accounts || []\n        ).map(account =>\n          account.includes(':') ? account.split(':')[2] || '' : account\n        );\n        this.setAccounts(accounts);\n      } catch (error) {\n        this.setAccounts([]);\n        this.clearStorage();\n      }\n    }\n  }\n\n  /**\n   * @summary Restores the session if session Id is stored in the local storage\n   * @private\n   * @returns {void}\n   */\n  private async restoreSession(): Promise<void> {\n    const pairingToken = this.getStorageValue(ProviderStorageKeys.pairingToken);\n    const sessionId = this.getStorageValue(ProviderStorageKeys.sessionId);\n    if (sessionId && !pairingToken) {\n      try {\n        await this.request<string[]>({\n          method: GrinderyRpcProviderRequestMethodNames.eth_requestAccounts,\n        });\n      } catch (error) {\n        this.setAccounts([]);\n        this.clearStorage();\n      }\n    }\n  }\n}\n","import { WalletProviderLocalStorage } from './WalletProviderLocalStorage';\nimport {\n  Address,\n  ChainId,\n  GrinderyRpcApiRequestResults,\n  GrinderyRpcMethodName,\n  GrinderyRpcProviderRequestMethodName,\n  ProviderMethods,\n  ProviderRequestResult,\n  RequestArguments,\n  RequestArgumentsParams,\n  RequestToken,\n} from '../types';\nimport {\n  WalletProviderError,\n  WalletProviderErrors,\n} from './WalletProviderError';\nimport {\n  GrinderyRpcMethodNames,\n  ProviderEvents,\n  ProviderStorageKeys,\n} from '../enums';\nimport { uuid } from '../utils/uuid';\n\n/**\n * @summary The base wallet provider class\n * @since 0.1.0\n * @extends WalletProviderLocalStorage\n */\nexport class WalletProvider extends WalletProviderLocalStorage {\n  constructor() {\n    super();\n\n    this.injectProvider();\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return !!this.chainId;\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return (\n      this.isConnected() &&\n      !!this.getStorageValue(ProviderStorageKeys.sessionId)\n    );\n  }\n\n  /**\n   * @public\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet pairing is in progress (pending).\n   */\n  public isWalletConnectionPending(): boolean {\n    return (\n      this.isConnected() &&\n      !!this.getStorageValue(ProviderStorageKeys.pairingToken) &&\n      !this.getStorageValue(ProviderStorageKeys.sessionId)\n    );\n  }\n\n  /**\n   * @summary Gets the connected chain ID in hex format\n   * @public\n   * @returns {ChainId} The chain ID in hex format\n   */\n  public getChain(): ChainId {\n    return `0x${parseFloat(this.chainId.split(':')[1]).toString(16)}`;\n  }\n\n  /**\n   * @summary Gets the connected user's wallet address\n   * @public\n   * @returns {Address} The ethereum wallet address\n   */\n  public getAddress(): Address {\n    return this.accounts[0] || '';\n  }\n\n  /**\n   * @summary Sets the application ID\n   * @public\n   * @param {string} appId The application ID\n   * @returns {string} The application ID\n   */\n  public setAppId(appId: string): string {\n    this.appId = appId;\n    return this.appId;\n  }\n\n  /**\n   * @summary Sends a request to the provider\n   * @public\n   * @param {RequestArguments} args Request arguments\n   * @param {string} args.method The method name\n   * @param {RequestArgumentsParams} args.params The method parameters\n   * @returns {T} The result of the request\n   */\n  public async request<T>({ method, params }: RequestArguments): Promise<T> {\n    /*if (!this.appId) {\n      throw WalletProviderErrors.NoAppId;\n    }*/\n    if (!this.chainId) {\n      this.emit(ProviderEvents.disconnect, WalletProviderErrors.Disconnected);\n      throw WalletProviderErrors.Disconnected;\n    }\n    if (!this.methods[method]) {\n      throw WalletProviderErrors.UnsupportedMethod;\n    }\n\n    try {\n      if (this.methods[method]?.sessionRequired && !this.isWalletConnected()) {\n        throw WalletProviderErrors.Unauthorized;\n      }\n\n      return (await this.methods[method]?.execute(params)) as T;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API and waits for the result.\n   * @public\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  public async sendAndWaitGrinderyRpcProviderRequest<T>(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[],\n    timeout?: number\n  ): Promise<T> {\n    const request = await this.sendGrinderyRpcProviderRequest(method, params);\n    return await this.waitGrinderyRpcProviderRequest(\n      request.requestToken,\n      timeout\n    );\n  }\n\n  /**\n   * @summary The application ID.\n   * @protected\n   */\n  protected appId: string = '';\n\n  /**\n   * @summary The chain ID in CAIP-2 format; e.g. \"eip155:1\".\n   * @protected\n   */\n  protected chainId: ChainId = 'eip155:137';\n\n  /**\n   * @summary Client id\n   * @protected\n   */\n  protected clientId: string =\n    this.getStorageValue('clientId') ||\n    this.setStorageValue('clientId', uuid());\n\n  /**\n   * @summary The list of supported provider methods.\n   * @protected\n   */\n  protected methods: Partial<ProviderMethods> = {};\n\n  /**\n   * @summary The user's wallet addresses list.\n   * @protected\n   */\n  protected accounts: Address[] = [];\n\n  protected setAccounts(accounts: Address[]): Address[] {\n    if (JSON.stringify(accounts) !== JSON.stringify(this.accounts)) {\n      this.emit(ProviderEvents.accountsChanged, accounts);\n    }\n    this.accounts = accounts;\n    return this.accounts;\n  }\n\n  /**\n   * @summary Registers the provider methods.\n   * @protected\n   * @param {ProviderMethods} methods A map of supported provider methods.\n   * @returns {void}\n   */\n  protected registerProviderMethods(methods: Partial<ProviderMethods>): void {\n    this.methods = methods;\n  }\n\n  /**\n   * @summary Sends a provider request to the Grindery RPC API.\n   * @protected\n   * @param {GrinderyRpcProviderRequestMethodName} method Provider request method name\n   * @param {Array} params Provider request parameters\n   * @returns {ProviderRequestResult} The request token to use in the `waitGrinderyRpcProviderRequest` method\n   */\n  protected async sendGrinderyRpcProviderRequest(\n    method: GrinderyRpcProviderRequestMethodName,\n    params?: readonly unknown[]\n  ): Promise<ProviderRequestResult> {\n    if (!this.getStorageValue(ProviderStorageKeys.sessionId)) {\n      throw WalletProviderErrors.Unauthorized;\n    }\n\n    try {\n      return await this.sendGrinderyRpcApiRequest<\n        GrinderyRpcApiRequestResults.request\n      >(GrinderyRpcMethodNames.request, {\n        sessionId: this.getStorageValue(ProviderStorageKeys.sessionId),\n        scope: this.chainId,\n        request: {\n          method,\n          params,\n        },\n      });\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Waits for the result of the provider request.\n   * @protected\n   * @param {RequestToken} requestToken A token to identify provider request. Recieved in the results of `sendGrinderyRpcProviderRequest` method.\n   * @param {number} timeout Optional. The time in milliseconds to wait for the request result. Default is 30000.\n   * @returns The result of the provider request\n   */\n  protected async waitGrinderyRpcProviderRequest<T>(\n    requestToken: RequestToken,\n    timeout?: number\n  ): Promise<T> {\n    if (!this.getStorageValue(ProviderStorageKeys.sessionId)) {\n      throw WalletProviderErrors.Unauthorized;\n    }\n    try {\n      return await this.sendGrinderyRpcApiRequest<T>(\n        GrinderyRpcMethodNames.waitForRequestResult,\n        {\n          requestToken,\n          timeout,\n        }\n      );\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Sends a request to the Grindery Walletconnect RPC API.\n   * @protected\n   * @param {GrinderyRpcMethodName} method Request method name\n   * @param {RequestArgumentsParams} params Request parameters\n   * @returns {T} The result of the request\n   */\n  protected async sendGrinderyRpcApiRequest<T>(\n    method: GrinderyRpcMethodName,\n    params?: RequestArgumentsParams\n  ): Promise<T> {\n    try {\n      const response = await fetch('https://walletconnect-api.grindery.com', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method: `gws_${method}`,\n          params: params || [],\n        }),\n      });\n      const data = await response.json();\n      if (data.error) {\n        throw new WalletProviderError(data.error.message, data.error.code);\n      }\n      if (!data.result) {\n        throw WalletProviderErrors.NoResult;\n      }\n      return data.result;\n    } catch (error) {\n      throw this.createProviderRpcError(error);\n    }\n  }\n\n  /**\n   * @summary Creates a provider error from an unknown error\n   * @protected\n   * @param {unknown} error Optional. Error object.\n   * @returns {WalletProviderError} The provider error\n   */\n  protected createProviderRpcError(error?: unknown): WalletProviderError {\n    let errorResponse: WalletProviderError;\n    if (error instanceof WalletProviderError) {\n      errorResponse = new WalletProviderError(\n        error.message || 'Unknown error',\n        error.code || 4900,\n        error.data\n      );\n    } else if (error instanceof Error) {\n      errorResponse = new WalletProviderError(\n        error.message || 'Unknown error',\n        4900,\n        error\n      );\n    } else {\n      errorResponse = new WalletProviderError('Unknown error', 4900, error);\n    }\n    return errorResponse;\n  }\n\n  /**\n   * @summary Injects the provider into the window object\n   * @private\n   * @returns {void}\n   */\n  private injectProvider(): void {\n    if (!window.ethereum) {\n      window.ethereum = this;\n    } else {\n      if (\n        window.ethereum.providers &&\n        Array.isArray(window.ethereum.providers)\n      ) {\n        window.ethereum.providers.push(this);\n      } else {\n        window.ethereum.providers = [window.ethereum, this];\n      }\n    }\n  }\n}\n","import {\n  GrinderyRpcProviderRequestMethodNames,\n  ProviderEvents,\n} from '../enums';\nimport {\n  GrinderyRpcApiRequestResults,\n  GrinderyWalletSDKConfig,\n  ProviderEvent,\n} from '../types';\nimport { GrinderyWalletProvider } from '../provider/GrinderyWalletProvider';\n\n/**\n * @summary The Grindery Wallet SDK class\n * @since 0.1.0\n */\nexport class GrinderyWalletSDK {\n  /**\n   * @summary The provider instance\n   * @public\n   */\n  public provider: GrinderyWalletProvider;\n\n  constructor({ appId }: GrinderyWalletSDKConfig) {\n    this.provider = this.getWeb3Provider();\n    this.setAppId(appId);\n    this.provider.on(ProviderEvents.pair, this.handlePairing);\n  }\n\n  /**\n   * @summary Checks if the provider is connected to the server\n   * @returns {boolean} True if the provider is connected to the server.\n   */\n  public isConnected(): boolean {\n    return this.provider.isConnected();\n  }\n\n  /**\n   * @summary Checks if the provider is connected to the server and the Grindery Wallet\n   * @returns {boolean} True if the provider is connected to the server and the Grindery Wallet.\n   */\n  public isWalletConnected(): boolean {\n    return this.provider.isWalletConnected();\n  }\n\n  /**\n   * @summary Initiate connection to the Grindery Wallet\n   * @public\n   * @returns {Promise<string[]>} The array of ethereum addresses\n   * @since 0.1.0\n   */\n  public async connect(): Promise<string[]> {\n    return await this.provider.request({\n      method: GrinderyRpcProviderRequestMethodNames.eth_requestAccounts,\n    });\n  }\n\n  /**\n   * @summary Disconnects Grindery Wallet\n   * @public\n   * @returns {Promise<boolean>} True if wallet is disconnected\n   * @since 0.1.0\n   */\n  public async disconnect(): Promise<boolean> {\n    return await this.provider.request({\n      method: GrinderyRpcProviderRequestMethodNames.gws_disconnect,\n    });\n  }\n\n  /**\n   * @summary Sets the app id\n   * @public\n   * @since 0.1.0\n   * @param {string} appId The app id\n   * @returns {void}\n   */\n  public setAppId(appId: string): void {\n    this.provider.setAppId(appId);\n  }\n\n  /**\n   * @summary Sends a transaction request to the Grindery Wallet\n   * @public\n   * @since 0.1.0\n   * @param {object} params The transaction parameters\n   * @param {string} params.to The recipient address\n   * @param {string} [params.value] The amount to send in wei\n   * @param {string} [params.data] The data to send\n   * @returns {Promise<string[]>} Array with transaction hash string\n   */\n  public async sendTransaction(params: {\n    to: string;\n    value?: string;\n    data?: string;\n  }): Promise<string[]> {\n    return await this.provider.request<string[]>({\n      method: GrinderyRpcProviderRequestMethodNames.eth_sendTransaction,\n      params: [params],\n    });\n  }\n\n  /**\n   * @summary Sends a personal signature request to the Grindery Wallet\n   * @public\n   * @since 0.1.0\n   * @param {string} message The message to sign\n   * @returns {Promise<string>} Signature string\n   */\n  public async signMessage(message: string): Promise<string> {\n    return await this.provider.request<string>({\n      method: GrinderyRpcProviderRequestMethodNames.personal_sign,\n      params: [message, this.provider.getAddress()],\n    });\n  }\n\n  /**\n   * @summary Adds a listener to the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public on(event: ProviderEvent, callback: Function) {\n    this.provider.on(event, callback);\n    return this;\n  }\n\n  /**\n   * @summary Removes a listener from the event\n   * @public\n   * @param {string} event Event name\n   * @param {Function} callback Callback function\n   * @returns {EventEmitter} The instance of the class itself\n   */\n  public removeListener(event: ProviderEvent, callback: Function) {\n    this.provider.removeListener(event, callback);\n    return this;\n  }\n\n  /**\n   * @summary Gets the Grindery Wallet ethereum provider\n   * @returns {GrinderyWalletProvider} The Grindery Wallet ethereum provider\n   */\n  private getWeb3Provider(): GrinderyWalletProvider {\n    let provider = window.ethereum?.providers?.find(\n      (provider: GrinderyWalletProvider | unknown) =>\n        provider instanceof GrinderyWalletProvider && provider.isGrinderyWallet\n    );\n    if (\n      !provider &&\n      window.ethereum instanceof GrinderyWalletProvider &&\n      window.ethereum.isGrinderyWallet\n    ) {\n      provider = window.ethereum;\n    }\n    if (!provider) {\n      provider = new GrinderyWalletProvider();\n    }\n    return provider;\n  }\n\n  /**\n   * @summary Handles the pairing request, by opening the Grindery Wallet\n   * @private\n   * @param ProviderRequestPairingResult\n   * @returns {void}\n   */\n  private handlePairing({\n    shortToken,\n    connectUrlBrowser,\n  }: GrinderyRpcApiRequestResults.requestPairing): void {\n    const WebApp = window.Telegram?.WebApp;\n    const redirectUrl = `https://walletconnect.grindery.com/connect/wc?uri=${shortToken}`;\n    if (\n      WebApp &&\n      WebApp.openTelegramLink &&\n      WebApp.platform &&\n      WebApp.platform !== 'unknown'\n    ) {\n      WebApp.openTelegramLink(connectUrlBrowser);\n      if (WebApp.close) {\n        window.Telegram.WebApp.close();\n      }\n    } else {\n      window.open(redirectUrl, '_blank');\n    }\n  }\n}\n","import { GrinderyWalletSDK } from './sdk/GrinderyWalletSDK';\nimport { getAppId } from './utils/getAppId';\n\ndeclare global {\n  interface Window {\n    Telegram?: any;\n    ethereum?: any;\n    Grindery?: {\n      appId?: string;\n      WalletSDK?: GrinderyWalletSDK;\n    };\n  }\n}\n\nfunction init() {\n  if (\n    !window.Grindery?.WalletSDK ||\n    !(window.Grindery.WalletSDK instanceof GrinderyWalletSDK)\n  ) {\n    window.Grindery = {\n      ...(window.Grindery || {}),\n      WalletSDK: new GrinderyWalletSDK({\n        appId: getAppId(),\n      }),\n    };\n  }\n}\n\n// Initialize the SDK\ninit();\n","/**\n * @summary Get the app id from the script tag or window object\n * @returns {string} The app id\n */\nexport const getAppId = (): string => {\n  let appId: string = '';\n  const elements = document.querySelectorAll('[data-app-id]');\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n    const value = element.getAttribute('data-app-id');\n    const src = element.getAttribute('src');\n    const isGrinderySrc = src && src.includes('grindery-wallet-sdk');\n    if (value && isGrinderySrc) {\n      appId = value;\n    }\n  }\n  if (window.Grindery?.appId) {\n    appId = window.Grindery.appId;\n  }\n  return appId;\n};\n"],"names":["ProviderEvents","ProviderStorageKeys","GrinderyRpcMethodNames","GrinderyRpcProviderRequestMethodNames","uuid","d","length","Math","random","toString","substr","vr","parseInt","WalletProviderLocalStorage","_WalletProviderEventE","apply","arguments","_inheritsLoose","_proto","prototype","getStorageValue","key","this","getStorage","setStorageValue","value","storage","saveStorage","clearStorage","clientId","JSON","parse","localStorage","getItem","error","setItem","stringify","Error","WalletProviderEventEmitter","events","Map","on","event","callback","has","set","get","push","removeListener","callbacks","filter","cb","emit","data","Array","_len","_key","console","log","forEach","WalletProviderError","_Error","message","code","_this","call","_wrapNativeSuper","WalletProviderErrors","PairingFailed","Disconnected","UnsupportedMethod","Unauthorized","NoResult","NoAppId","GrinderyWalletProvider","_WalletProvider","_execute5","_execute4","_execute3","_execute2","_execute","registerProviderMethods","_this$registerProvide","eth_requestAccounts","sessionRequired","execute","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","pairResult","result","_pairResult","wrap","_context","prev","next","isWalletConnected","request","method","eth_accounts","abrupt","sent","t0","sessionId","isWalletConnectionPending","sendGrinderyRpcApiRequest","waitForPairingResult","pairingToken","session","t1","requestPairing","appId","connectUrl","connectUrlBrowser","shortToken","pair","t2","createProviderRpcError","stop","_x","_callee2","_context2","sendAndWaitGrinderyRpcProviderRequest","isArray","setAccounts","_x2","eth_sendTransaction","_callee3","_context3","_x3","personal_sign","_callee4","_context4","_x4","gws_disconnect","_callee5","_context5","disconnect","sessionToken","window","addEventListener","connect","getChain","restorePairing","restoreSession","_restorePairing","_callee6","_pairResult$session","accounts","_context6","namespaces","map","account","includes","split","_restoreSession","_callee7","_context7","_WalletProviderLocalS","WalletProvider","injectProvider","isConnected","chainId","parseFloat","getAddress","setAppId","_request","_ref","_this$methods$method","_this$methods$method2","methods","_sendAndWaitGrinderyRpcProviderRequest","timeout","sendGrinderyRpcProviderRequest","waitGrinderyRpcProviderRequest","requestToken","accountsChanged","_sendGrinderyRpcProviderRequest","scope","_x5","_x6","_waitGrinderyRpcProviderRequest","waitForRequestResult","_x7","_x8","_sendGrinderyRpcApiRequest","response","fetch","headers","Content-Type","body","jsonrpc","id","json","_x9","_x10","ethereum","providers","GrinderyWalletSDK","provider","getWeb3Provider","handlePairing","_connect","_disconnect","sendTransaction","_sendTransaction","signMessage","_signMessage","_window$ethereum","find","isGrinderyWallet","_ref2","WebApp","_window$Telegram","Telegram","redirectUrl","openTelegramLink","platform","close","open","_window$Grindery","Grindery","WalletSDK","_extends","elements","document","querySelectorAll","i","element","getAttribute","src","isGrinderySrc","getAppId"],"mappings":"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"}